<#@ output extension=".cs" #>
<#@ include file="../../../codegen/FilterDeclarations.tt" #>
<#
AppendableFilter = (a) => a.Name != "ValueStringBuilder";
string codeGenerationRelativePath = @"../../../codegen";
#><#@ include file="../../../codegen/DataLoader.tt" #>//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using ICU4N.Globalization;
using ICU4N.Util;
using J2N.Text;
using System;
using System.Text;

namespace ICU4N.Impl
{
    public sealed partial class UPropertyAliases
    {
<# foreach (var charSequence in CharSequences) { #>
<#= GetBeginFeature(charSequence) #>
        private bool ContainsName(BytesTrie trie, <#=charSequence#> name)
        {
            Result result = Result.NoValue;
            for (int i = 0; i < name.Length; ++i)
            {
                int c = name[i];
                // Ignore delimiters '-', '_', and ASCII White_Space.
                if (c == '-' || c == '_' || c == ' ' || (0x09 <= c && c <= 0x0d))
                {
                    continue;
                }
                if (!result.HasNext())
                {
                    return false;
                }
                c = AsciiToLowercase(c);
                result = trie.Next(c);
            }
            return result.HasValue();
        }
<#= GetEndFeature(charSequence) #>
<# } #>
<# foreach (var charSequence in CharSequences) { #>
<#= GetBeginFeature(charSequence) #>
        private int GetPropertyOrValueEnum(int bytesTrieOffset, <#=charSequence#> alias)
        {
            BytesTrie trie = new BytesTrie(bytesTries, bytesTrieOffset);
            if (ContainsName(trie, alias))
            {
                return trie.GetValue();
            }
            else
            {
#pragma warning disable 612, 618
                return (int)UPropertyConstants.Undefined;
#pragma warning restore 612, 618
            }
        }
<#= GetEndFeature(charSequence) #>
<# } #>

        //----------------------------------------------------------------
        // Public API

<# foreach (var charSequence in CharSequences) { #>
<#= GetBeginFeature(charSequence) #>
        /// <summary>
        /// Returns a property enum given one of its property names.
        /// If the property name is not known, this method returns
        /// <see cref="UPropertyConstants.Undefined"/>.
        /// </summary>
        <#=charSequence.Accessibility#> int GetPropertyEnum(<#=charSequence#> alias)
        {
            return GetPropertyOrValueEnum(0, alias);
        }

<#= GetEndFeature(charSequence) #>
<# } #>
<# foreach (var charSequence in CharSequences) { #>
<#= GetBeginFeature(charSequence) #>
        /// <summary>
        /// Returns a value enum given a property enum and one of its value names.
        /// </summary>
        /// <seealso cref="TryGetPropertyValueEnum(UProperty, <#=charSequence.NameForDocAsType#>, out int)"/>
        <#=charSequence.Accessibility#> int GetPropertyValueEnum(UProperty property, <#=charSequence#> alias)
        {
            int valueMapIndex = FindProperty((int)property);
            if (valueMapIndex == 0)
            {
                throw new ArgumentException(
                        "Invalid property enum " + property + " (0x" + string.Format("{0:x2}", (int)property) + ")");
            }
            valueMapIndex = valueMaps[valueMapIndex + 1];
            if (valueMapIndex == 0)
            {
                throw new ArgumentException(
                        "Property " + property + " (0x" + string.Format("{0:x2}", (int)property) +
                        ") does not have named values");
            }
            // valueMapIndex is the start of the property's valueMap,
            // where the first word is the BytesTrie offset.
            return GetPropertyOrValueEnum(valueMaps[valueMapIndex], alias);
        }

<#= GetEndFeature(charSequence) #>
<# } #>
<# foreach (var charSequence in CharSequences) { #>
<#= GetBeginFeature(charSequence) #>
        /// <summary>
        /// Returns a value enum given a property enum and one of its value names.
        /// </summary>
        /// <seealso cref="GetPropertyValueEnum(UProperty, <#=charSequence.NameForDocAsType#>)"/>
        <#=charSequence.Accessibility#> bool TryGetPropertyValueEnum(UProperty property, <#=charSequence#> alias, out int result)
        {
#pragma warning disable 612, 618
            result = (int)UPropertyConstants.Undefined;
#pragma warning restore 612, 618
            int valueMapIndex = FindProperty((int)property);
            if (valueMapIndex == 0)
            {
                return false;
            }
            valueMapIndex = valueMaps[valueMapIndex + 1];
            if (valueMapIndex == 0)
            {
                return false;
            }
            // valueMapIndex is the start of the property's valueMap,
            // where the first word is the BytesTrie offset.
            result = GetPropertyOrValueEnum(valueMaps[valueMapIndex], alias);
#pragma warning disable 612, 618
            return result != (int)UPropertyConstants.Undefined;
#pragma warning restore 612, 618
        }

<#= GetEndFeature(charSequence) #>
<# } #>
    }
}
<#@ include file="../../../codegen/SharedObjects.tt" #>