<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="System.Xml.Linq" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Xml.Linq" #>
<#@ import namespace="System.Xml.XPath" #>
<#@ output extension=".cs" #>
<#
    // Load common settings from the XML file using relative path
    string settingsPath = System.IO.Path.GetFullPath(System.IO.Path.Combine(Host.ResolvePath(string.Empty), @"../../../src/CodeGenerationSettings.xml"));
    XDocument document = XDocument.Load(settingsPath);
    string[] charSequences = document.XPathSelectElements(@"//codeGen/charSequences/charSequence").Select(x => x.Value).ToArray();
    string charSequenceAccessibility = document.XPathSelectElement(@"//codeGen/charSequenceAccessibility").Value;
    string[] appendables = document.XPathSelectElements(@"//codeGen/appendables/appendable").Select(x => x.Value).ToArray();
#>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using J2N.Text;
using System.Text;

namespace ICU4N.Impl
{
    public sealed partial class ResourceKey
    {
<# foreach (var charSequence in charSequences) { #>

        private bool RegionMatches(int start, <#=charSequence#> cs, int n)
        {
            for (int i = 0; i < n; ++i)
            {
                if (bytes[offset + start + i] != cs[i])
                {
                    return false;
                }
            }
            return true;
        }
<# } #>
<# foreach (var charSequence in charSequences) { #>

        public bool ContentEquals(<#=charSequence#> cs)
        {
            if (cs == null)
            {
                return false;
            }
<# if (charSequence == "ICharSequence") { #>
            if (this == cs)
            {
                return true;
            }
<# } #>
            return (cs.Length == length && RegionMatches(0, cs, length));
        }
<# } #>
<# foreach (var charSequence in charSequences) { #>

        public bool StartsWith(<#=charSequence#> cs)
        {
            int csLength = cs.Length;
            return csLength <= length && RegionMatches(0, cs, csLength);
        }
<# } #>
<# foreach (var charSequence in charSequences) { #>

        public bool EndsWith(<#=charSequence#> cs)
        {
            int csLength = cs.Length;
            return csLength <= length && RegionMatches(length - csLength, cs, csLength);
        }
<# } #>
<# foreach (var charSequence in charSequences) { #>

        /// <returns>true if the substring of this key starting from the offset
        /// contains the same characters as the other sequence.</returns>
        public bool RegionMatches(int start, <#=charSequence#> cs)
        {
            int csLength = cs.Length;
            return csLength == (length - start) && RegionMatches(start, cs, csLength);
        }
<# } #>
<# foreach (var charSequence in charSequences) { #>

        public int CompareTo(<#=charSequence#> cs) // ICU4N TODO: Null reference check (should never throw in .NET here)
        {
            int csLength = cs.Length;
            int minLength = length <= csLength ? length : csLength;
            for (int i = 0; i < minLength; ++i)
            {
                int diff = this[i] - cs[i];
                if (diff != 0)
                {
                    return diff;
                }
            }
            return length - csLength;
        }
<# } #>

    }
}