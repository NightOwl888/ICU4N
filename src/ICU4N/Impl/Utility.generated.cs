//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using ICU4N.Support.Text;
using ICU4N.Text;
using J2N;
using J2N.Numerics;
using J2N.Text;
using System;
using System.IO;
using System.Text;

namespace ICU4N.Impl
{
    public static partial class Utility
    {

        /// <summary>
        /// Append the digits of a positive integer to the given
        /// <see cref="StringBuilder"/> in the given radix. This is
        /// done recursively since it is easiest to generate the low-
        /// order digit first, but it must be appended last.
        /// </summary>
        /// <param name="result">The <see cref="StringBuilder"/> to append to.</param>
        /// <param name="n">The positive integer.</param>
        /// <param name="radix">The radix, from 2 to 36 inclusive.</param>
        /// <param name="minDigits">The minimum number of digits to append.</param>
        private static void RecursiveAppendNumber(StringBuilder result, int n,
            int radix, int minDigits)
        {
            try
            {
                int digit = n % radix;

                if (n >= radix || minDigits > 1)
                {
                    RecursiveAppendNumber(result, n / radix, radix, minDigits - 1);
                }
                result.Append(DIGITS[digit]);
            }
            catch (IOException e)
            {
                throw new IcuArgumentException(e);
            }
        }

        /// <summary>
        /// Append the digits of a positive integer to the given
        /// <see cref="IAppendable"/> in the given radix. This is
        /// done recursively since it is easiest to generate the low-
        /// order digit first, but it must be appended last.
        /// </summary>
        /// <param name="result">The <see cref="IAppendable"/> to append to.</param>
        /// <param name="n">The positive integer.</param>
        /// <param name="radix">The radix, from 2 to 36 inclusive.</param>
        /// <param name="minDigits">The minimum number of digits to append.</param>
        private static void RecursiveAppendNumber(IAppendable result, int n,
            int radix, int minDigits)
        {
            try
            {
                int digit = n % radix;

                if (n >= radix || minDigits > 1)
                {
                    RecursiveAppendNumber(result, n / radix, radix, minDigits - 1);
                }
                result.Append(DIGITS[digit]);
            }
            catch (IOException e)
            {
                throw new IcuArgumentException(e);
            }
        }

        /// <summary>
        /// Append a number to the given <see cref="StringBuilder"/> in the given radix.
        /// Standard digits '0'-'9' are used and letters 'A'-'Z' for
        /// radices 11 through 36.
        /// </summary>
        /// <param name="result">The digits of the number are appended here.</param>
        /// <param name="n">The number to be converted to digits; may be negative. If negative, a '-' is prepended to the digits.</param>
        /// <param name="radix">A radix from 2 to 36 inclusive.</param>
        /// <param name="minDigits">
        /// The minimum number of digits, not including
        /// any '-', to produce.  Values less than 2 have no effect.  One
        /// digit is always emitted regardless of this parameter.
        /// </param>
        /// <returns>A reference to result.</returns>
        public static StringBuilder AppendNumber(StringBuilder result, int n,
            int radix, int minDigits)
        {
            try
            {
                if (radix < 2 || radix > 36)
                {
                    throw new ArgumentException("Illegal radix " + radix);
                }


                int abs = n;

                if (n < 0)
                {
                    abs = -n;
                    result.Append("-");
                }

                RecursiveAppendNumber(result, abs, radix, minDigits);

                return result;
            }
            catch (IOException e)
            {
                throw new IcuArgumentException(e);
            }
        }

        /// <summary>
        /// Append a number to the given <see cref="IAppendable"/> in the given radix.
        /// Standard digits '0'-'9' are used and letters 'A'-'Z' for
        /// radices 11 through 36.
        /// </summary>
        /// <param name="result">The digits of the number are appended here.</param>
        /// <param name="n">The number to be converted to digits; may be negative. If negative, a '-' is prepended to the digits.</param>
        /// <param name="radix">A radix from 2 to 36 inclusive.</param>
        /// <param name="minDigits">
        /// The minimum number of digits, not including
        /// any '-', to produce.  Values less than 2 have no effect.  One
        /// digit is always emitted regardless of this parameter.
        /// </param>
        /// <returns>A reference to result.</returns>
        public static T AppendNumber<T>(T result, int n,
            int radix, int minDigits) where T : IAppendable
        {
            try
            {
                if (radix < 2 || radix > 36)
                {
                    throw new ArgumentException("Illegal radix " + radix);
                }


                int abs = n;

                if (n < 0)
                {
                    abs = -n;
                    result.Append("-");
                }

                RecursiveAppendNumber(result, abs, radix, minDigits);

                return result;
            }
            catch (IOException e)
            {
                throw new IcuArgumentException(e);
            }
        }
    }
}