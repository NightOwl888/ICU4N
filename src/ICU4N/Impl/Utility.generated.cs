//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using ICU4N.Support.Text;
using ICU4N.Text;
using J2N;
using J2N.Numerics;
using J2N.Text;
using System;
using System.IO;
using System.Text;

namespace ICU4N.Impl
{
    public static partial class Utility
    {

        /// <summary>
        /// Encode a run, possibly a degenerate run (of &lt; 4 values).
        /// </summary>
        /// <param name="buffer"></param>
        /// <param name="value"></param>
        /// <param name="length">The length of the run; must be > 0 &amp;&amp; &lt;= 0xFFFF.</param>
        private static void EncodeRun(StringBuilder buffer, int value, int length)
        {
            if (length < 4)
            {
                for (int j = 0; j < length; ++j)
                {
                    if (value == ESCAPE)
                    {
                        AppendInt32(buffer, value);
                    }
                    AppendInt32(buffer, value);
                }
            }
            else
            {
                if (length == ESCAPE)
                {
                    if (value == ESCAPE)
                    {
                        AppendInt32(buffer, ESCAPE);
                    }
                    AppendInt32(buffer, value);
                    --length;
                }
                AppendInt32(buffer, ESCAPE);
                AppendInt32(buffer, length);
                AppendInt32(buffer, value); // Don't need to escape this value
            }
        }

        /// <summary>
        /// Encode a run, possibly a degenerate run (of &lt; 4 values).
        /// </summary>
        /// <param name="buffer"></param>
        /// <param name="value"></param>
        /// <param name="length">The length of the run; must be > 0 &amp;&amp; &lt;= 0xFFFF.</param>
        private static void EncodeRun(IAppendable buffer, int value, int length)
        {
            if (length < 4)
            {
                for (int j = 0; j < length; ++j)
                {
                    if (value == ESCAPE)
                    {
                        AppendInt32(buffer, value);
                    }
                    AppendInt32(buffer, value);
                }
            }
            else
            {
                if (length == ESCAPE)
                {
                    if (value == ESCAPE)
                    {
                        AppendInt32(buffer, ESCAPE);
                    }
                    AppendInt32(buffer, value);
                    --length;
                }
                AppendInt32(buffer, ESCAPE);
                AppendInt32(buffer, length);
                AppendInt32(buffer, value); // Don't need to escape this value
            }
        }

        private static void AppendInt32(StringBuilder buffer, int value)
        {
            try
            {
                buffer.Append((char)(value.TripleShift(16)));
                buffer.Append((char)(value & 0xFFFF));
            }
            catch (IOException e)
            {
                throw new IcuArgumentException(e);
            }
        }

        private static void AppendInt32(IAppendable buffer, int value)
        {
            try
            {
                buffer.Append((char)(value.TripleShift(16)));
                buffer.Append((char)(value & 0xFFFF));
            }
            catch (IOException e)
            {
                throw new IcuArgumentException(e);
            }
        }

        /// <summary>
        /// Encode a run, possibly a degenerate run (of &lt; 4 values).
        /// </summary>
        /// <param name="buffer"></param>
        /// <param name="value"></param>
        /// <param name="length">The length of the run; must be > 0 &amp;&amp; &lt;= 0xFFFF.</param>
        private static void EncodeRun(StringBuilder buffer, short value, int length)
        {
            try
            {
                char valueChar = (char)value;
                if (length < 4)
                {
                    for (int j = 0; j < length; ++j)
                    {
                        if (valueChar == ESCAPE)
                        {
                            buffer.Append(ESCAPE);
                        }
                        buffer.Append(valueChar);
                    }
                }
                else
                {
                    if (length == ESCAPE)
                    {
                        if (valueChar == ESCAPE)
                        {
                            buffer.Append(ESCAPE);
                        }
                        buffer.Append(valueChar);
                        --length;
                    }
                    buffer.Append(ESCAPE);
                    buffer.Append((char)length);
                    buffer.Append(valueChar); // Don't need to escape this value
                }
            }
            catch (IOException e)
            {
                throw new IcuArgumentException(e);
            }
        }

        /// <summary>
        /// Encode a run, possibly a degenerate run (of &lt; 4 values).
        /// </summary>
        /// <param name="buffer"></param>
        /// <param name="value"></param>
        /// <param name="length">The length of the run; must be > 0 &amp;&amp; &lt;= 0xFFFF.</param>
        private static void EncodeRun(IAppendable buffer, short value, int length)
        {
            try
            {
                char valueChar = (char)value;
                if (length < 4)
                {
                    for (int j = 0; j < length; ++j)
                    {
                        if (valueChar == ESCAPE)
                        {
                            buffer.Append(ESCAPE);
                        }
                        buffer.Append(valueChar);
                    }
                }
                else
                {
                    if (length == ESCAPE)
                    {
                        if (valueChar == ESCAPE)
                        {
                            buffer.Append(ESCAPE);
                        }
                        buffer.Append(valueChar);
                        --length;
                    }
                    buffer.Append(ESCAPE);
                    buffer.Append((char)length);
                    buffer.Append(valueChar); // Don't need to escape this value
                }
            }
            catch (IOException e)
            {
                throw new IcuArgumentException(e);
            }
        }

        /// <summary>
        /// Encode a run, possibly a degenerate run (of &lt; 4 values).
        /// </summary>
        /// <param name="buffer"></param>
        /// <param name="value"></param>
        /// <param name="length">The length of the run; must be > 0 &amp;&amp; &lt;= 0xFF.</param>
        /// <param name="state0"></param>
        /// <param name="state1"></param>
        // ICU4N: Changed state parameter from byte[] to ref byte state0 and refbyte state1
        private static void EncodeRun(StringBuilder buffer, byte value, int length,
            ref byte state0, ref byte state1)
        {
            if (length < 4)
            {
                for (int j = 0; j < length; ++j)
                {
                    if (value == ESCAPE_BYTE) AppendEncodedByte(buffer, ESCAPE_BYTE, ref state0, ref state1);
                    AppendEncodedByte(buffer, value, ref state0, ref state1);
                }
            }
            else
            {
                if ((byte)length == ESCAPE_BYTE)
                {
                    if (value == ESCAPE_BYTE) AppendEncodedByte(buffer, ESCAPE_BYTE, ref state0, ref state1);
                    AppendEncodedByte(buffer, value, ref state0, ref state1);
                    --length;
                }
                AppendEncodedByte(buffer, ESCAPE_BYTE, ref state0, ref state1);
                AppendEncodedByte(buffer, (byte)length, ref state0, ref state1);
                AppendEncodedByte(buffer, value, ref state0, ref state1); // Don't need to escape this value
            }
        }

        /// <summary>
        /// Encode a run, possibly a degenerate run (of &lt; 4 values).
        /// </summary>
        /// <param name="buffer"></param>
        /// <param name="value"></param>
        /// <param name="length">The length of the run; must be > 0 &amp;&amp; &lt;= 0xFF.</param>
        /// <param name="state0"></param>
        /// <param name="state1"></param>
        // ICU4N: Changed state parameter from byte[] to ref byte state0 and refbyte state1
        private static void EncodeRun(IAppendable buffer, byte value, int length,
            ref byte state0, ref byte state1)
        {
            if (length < 4)
            {
                for (int j = 0; j < length; ++j)
                {
                    if (value == ESCAPE_BYTE) AppendEncodedByte(buffer, ESCAPE_BYTE, ref state0, ref state1);
                    AppendEncodedByte(buffer, value, ref state0, ref state1);
                }
            }
            else
            {
                if ((byte)length == ESCAPE_BYTE)
                {
                    if (value == ESCAPE_BYTE) AppendEncodedByte(buffer, ESCAPE_BYTE, ref state0, ref state1);
                    AppendEncodedByte(buffer, value, ref state0, ref state1);
                    --length;
                }
                AppendEncodedByte(buffer, ESCAPE_BYTE, ref state0, ref state1);
                AppendEncodedByte(buffer, (byte)length, ref state0, ref state1);
                AppendEncodedByte(buffer, value, ref state0, ref state1); // Don't need to escape this value
            }
        }

        /// <summary>
        /// Append a byte to the given <see cref="StringBuilder"/>, packing two bytes into each
        /// character.  The <paramref name="state0"/> and <paramref name="state1"/> parameters
        /// maintain intermediary data between calls.
        /// </summary>
        /// <param name="buffer"></param>
        /// <param name="value"></param>
        /// <param name="state0">state0 == 0 if this is the first byte of a pair or
        /// state0 != 0 if this is the second byte of a pair,
        /// in which case <paramref name="state1"/> is the first byte.</param>
        /// <param name="state1"></param>
        // ICU4N: Changed state parameter from byte[] to ref byte state0 and refbyte state1
        private static void AppendEncodedByte(StringBuilder buffer, byte value,
            ref byte state0, ref byte state1)
        {
            try
            {
                if (state0 != 0)
                {
                    char c = (char)((state1 << 8) | ((value) & 0xFF));
                    buffer.Append(c);
                    state0 = 0;
                }
                else
                {
                    state0 = 1;
                    state1 = value;
                }
            }
            catch (IOException e)
            {
                throw new IcuArgumentException(e);
            }
        }

        /// <summary>
        /// Append a byte to the given <see cref="IAppendable"/>, packing two bytes into each
        /// character.  The <paramref name="state0"/> and <paramref name="state1"/> parameters
        /// maintain intermediary data between calls.
        /// </summary>
        /// <param name="buffer"></param>
        /// <param name="value"></param>
        /// <param name="state0">state0 == 0 if this is the first byte of a pair or
        /// state0 != 0 if this is the second byte of a pair,
        /// in which case <paramref name="state1"/> is the first byte.</param>
        /// <param name="state1"></param>
        // ICU4N: Changed state parameter from byte[] to ref byte state0 and refbyte state1
        private static void AppendEncodedByte(IAppendable buffer, byte value,
            ref byte state0, ref byte state1)
        {
            try
            {
                if (state0 != 0)
                {
                    char c = (char)((state1 << 8) | ((value) & 0xFF));
                    buffer.Append(c);
                    state0 = 0;
                }
                else
                {
                    state0 = 1;
                    state1 = value;
                }
            }
            catch (IOException e)
            {
                throw new IcuArgumentException(e);
            }
        }

        /// <summary>
        /// Append the digits of a positive integer to the given
        /// <see cref="StringBuilder"/> in the given radix. This is
        /// done recursively since it is easiest to generate the low-
        /// order digit first, but it must be appended last.
        /// </summary>
        /// <param name="result">The <see cref="StringBuilder"/> to append to.</param>
        /// <param name="n">The positive integer.</param>
        /// <param name="radix">The radix, from 2 to 36 inclusive.</param>
        /// <param name="minDigits">The minimum number of digits to append.</param>
        private static void RecursiveAppendNumber(StringBuilder result, int n,
            int radix, int minDigits)
        {
            try
            {
                int digit = n % radix;

                if (n >= radix || minDigits > 1)
                {
                    RecursiveAppendNumber(result, n / radix, radix, minDigits - 1);
                }
                result.Append(DIGITS[digit]);
            }
            catch (IOException e)
            {
                throw new IcuArgumentException(e);
            }
        }

        /// <summary>
        /// Append the digits of a positive integer to the given
        /// <see cref="IAppendable"/> in the given radix. This is
        /// done recursively since it is easiest to generate the low-
        /// order digit first, but it must be appended last.
        /// </summary>
        /// <param name="result">The <see cref="IAppendable"/> to append to.</param>
        /// <param name="n">The positive integer.</param>
        /// <param name="radix">The radix, from 2 to 36 inclusive.</param>
        /// <param name="minDigits">The minimum number of digits to append.</param>
        private static void RecursiveAppendNumber(IAppendable result, int n,
            int radix, int minDigits)
        {
            try
            {
                int digit = n % radix;

                if (n >= radix || minDigits > 1)
                {
                    RecursiveAppendNumber(result, n / radix, radix, minDigits - 1);
                }
                result.Append(DIGITS[digit]);
            }
            catch (IOException e)
            {
                throw new IcuArgumentException(e);
            }
        }

        /// <summary>
        /// Append a number to the given <see cref="StringBuilder"/> in the given radix.
        /// Standard digits '0'-'9' are used and letters 'A'-'Z' for
        /// radices 11 through 36.
        /// </summary>
        /// <param name="result">The digits of the number are appended here.</param>
        /// <param name="n">The number to be converted to digits; may be negative. If negative, a '-' is prepended to the digits.</param>
        /// <param name="radix">A radix from 2 to 36 inclusive.</param>
        /// <param name="minDigits">
        /// The minimum number of digits, not including
        /// any '-', to produce.  Values less than 2 have no effect.  One
        /// digit is always emitted regardless of this parameter.
        /// </param>
        /// <returns>A reference to result.</returns>
        public static StringBuilder AppendNumber(StringBuilder result, int n,
            int radix, int minDigits)
        {
            try
            {
                if (radix < 2 || radix > 36)
                {
                    throw new ArgumentException("Illegal radix " + radix);
                }


                int abs = n;

                if (n < 0)
                {
                    abs = -n;
                    result.Append("-");
                }

                RecursiveAppendNumber(result, abs, radix, minDigits);

                return result;
            }
            catch (IOException e)
            {
                throw new IcuArgumentException(e);
            }
        }

        /// <summary>
        /// Append a number to the given <see cref="IAppendable"/> in the given radix.
        /// Standard digits '0'-'9' are used and letters 'A'-'Z' for
        /// radices 11 through 36.
        /// </summary>
        /// <param name="result">The digits of the number are appended here.</param>
        /// <param name="n">The number to be converted to digits; may be negative. If negative, a '-' is prepended to the digits.</param>
        /// <param name="radix">A radix from 2 to 36 inclusive.</param>
        /// <param name="minDigits">
        /// The minimum number of digits, not including
        /// any '-', to produce.  Values less than 2 have no effect.  One
        /// digit is always emitted regardless of this parameter.
        /// </param>
        /// <returns>A reference to result.</returns>
        public static T AppendNumber<T>(T result, int n,
            int radix, int minDigits) where T : IAppendable
        {
            try
            {
                if (radix < 2 || radix > 36)
                {
                    throw new ArgumentException("Illegal radix " + radix);
                }


                int abs = n;

                if (n < 0)
                {
                    abs = -n;
                    result.Append("-");
                }

                RecursiveAppendNumber(result, abs, radix, minDigits);

                return result;
            }
            catch (IOException e)
            {
                throw new IcuArgumentException(e);
            }
        }
    }
}