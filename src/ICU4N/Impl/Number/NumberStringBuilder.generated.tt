<#@ output extension=".cs" #>
<#@ include file="../../../../codegen/FilterDeclarations.tt" #>
<#
AppendableFilter = (a) => a.Name != "ValueStringBuilder";
string codeGenerationRelativePath = @"../../../../codegen";
#><#@ include file="../../../../codegen/DataLoader.tt" #>//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using J2N.Text;
using System;
using System.Text;
using Field = ICU4N.Text.NumberFormatField;

namespace ICU4N.Numerics
{
    internal partial class NumberStringBuilder
    {
<# foreach (var charSequence in CharSequences) { #>
<#= GetBeginFeature(charSequence) #>
        /// <summary>
        /// Appends the specified <see cref="<#= charSequence.NameForDocAsLink #>"/> to the end of the string.
        /// </summary>
        /// <param name="sequence"></param>
        /// <param name="field"></param>
        /// <returns>The number of chars added, which is the length of <see cref="<#= charSequence.NameForDocAsLink #>"/>.</returns>
        <#=charSequence.Accessibility#> virtual int Append(<#=charSequence#> sequence, Field field)
        {
            return Insert(length, sequence, field);
        }
<#= GetEndFeature(charSequence) #>
<# } #>
<# foreach (var charSequence in CharSequences) { #>
<#= GetBeginFeature(charSequence) #>
        /// <summary>
        /// Inserts the specified <see cref="<#= charSequence.NameForDocAsLink #>"/> at the specified index in the string.
        /// </summary>
        /// <param name="index"></param>
        /// <param name="sequence"></param>
        /// <param name="field"></param>
        /// <returns>The number of chars added, which is the length of <see cref="<#= charSequence.NameForDocAsLink #>"/>.</returns>
        <#=charSequence.Accessibility#> virtual int Insert(int index, <#=charSequence#> sequence, Field field)
        {
            if (sequence.Length == 0)
            {
                // Nothing to insert.
                return 0;
            }
            else if (sequence.Length == 1)
            {
                // Fast path: on a single-char string, using insertCodePoint below is 70% faster than the
                // CharSequence method: 12.2 ns versus 41.9 ns for five operations on my Linux x86-64.
                return InsertCodePoint(index, sequence[0], field);
            }
            else
            {
                return Insert(index, sequence, 0, sequence.Length, field);
            }
        }
<#= GetEndFeature(charSequence) #>
<# } #>
<# foreach (var charSequence in CharSequences) { #>
<#= GetBeginFeature(charSequence) #>
        /// <summary>
        /// Inserts the specified <see cref="<#= charSequence.NameForDocAsLink #>"/> at the specified index in the string, reading from the
        /// <see cref="<#= charSequence.NameForDocAsLink #>"/> from <paramref name="startIndex"/> and including <paramref name="length"/> characters.
        /// </summary>
        /// <param name="index"></param>
        /// <param name="sequence"></param>
        /// <param name="startIndex"></param>
        /// <param name="length"></param>
        /// <param name="field"></param>
        /// <returns>The number of chars added, which is the length of <see cref="<#= charSequence.NameForDocAsLink #>"/>.</returns>
        <#=charSequence.Accessibility#> virtual int Insert(int index, <#=charSequence#> sequence, int startIndex, int length, Field field)
        {
            int position = PrepareForInsert(index, length);
            for (int i = 0; i < length; i++)
            {
                chars[position + i] = sequence[startIndex + i];
                fields[position + i] = field;
            }
            return length;
        }
<#= GetEndFeature(charSequence) #>
<# } #>
    }
}
<#@ include file="../../../../codegen/SharedObjects.tt" #>