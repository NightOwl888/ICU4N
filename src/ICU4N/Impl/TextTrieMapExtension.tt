<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="System.Xml.Linq" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Xml.Linq" #>
<#@ import namespace="System.Xml.XPath" #>
<#@ output extension=".cs" #>
<#
    // Load common settings from the XML file using relative path
    string settingsPath = System.IO.Path.GetFullPath(System.IO.Path.Combine(Host.ResolvePath(string.Empty), @"../../../src/CodeGenerationSettings.xml"));
    XDocument document = XDocument.Load(settingsPath);
    string[] charSequences = document.XPathSelectElements(@"//codeGen/charSequences/charSequence").Select(x => x.Value).ToArray();
    string charSequenceAccessibility = document.XPathSelectElement(@"//codeGen/charSequenceAccessibility").Value;
    string[] appendables = document.XPathSelectElements(@"//codeGen/appendables/appendable").Select(x => x.Value).ToArray();
#>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using J2N.Text;
using System;
using System.Collections.Generic;
using System.Text;

namespace ICU4N.Impl
{
    public partial class TextTrieMap<TValue>
    {
<# foreach (var charSequence in charSequences) { #>

        /// <summary>
        /// Adds the text key and its associated object in this object.
        /// </summary>
        /// <param name="text">The text.</param>
        /// <param name="val">The value object associated with the text.</param>
        /// <returns></returns>
        <#= charSequence=="ICharSequence" ? charSequenceAccessibility : "public"#> virtual TextTrieMap<TValue> Put(<#=charSequence#> text, TValue val)
        {
            if (text is null)
                throw new ArgumentNullException(nameof(text)); // ICU4N: Added guard clause.
<# if (charSequence=="ICharSequence") { #>
            CharEnumerator chitr = new CharEnumerator(text, 0, ignoreCase);
<# } else if (charSequence=="StringBuilder") { #>
            CharEnumerator chitr = new CharEnumerator(text.ToString().AsCharSequence(), 0, ignoreCase);
<# } else { #>
            CharEnumerator chitr = new CharEnumerator(text.AsCharSequence(), 0, ignoreCase);
<# } #>
            root.Add(chitr, val);
            return this;
        }
<# } #>
<# foreach (var charSequence in charSequences) { #>

        /// <summary>
        /// Gets an enumerator of the objects associated with the
        /// longest prefix matching string key starting at the
        /// specified position.
        /// </summary>
        /// <param name="text">The text to be matched with prefixes.</param>
        /// <param name="start">The start index of of the text.</param>
        /// <returns>
        /// An enumerator of the objects associated with the
        /// longest prefix matching matching key, or <c>null</c> if no
        /// matching entry is found.
        /// </returns>
        <#= charSequence=="ICharSequence" ? charSequenceAccessibility : "public"#> virtual IEnumerator<TValue> Get(<#=charSequence#> text, int start)
        {
            return Get(text, start, null);
        }
<# } #>
<# foreach (var charSequence in charSequences) { #>

        <#= charSequence=="ICharSequence" ? charSequenceAccessibility : "public"#> virtual IEnumerator<TValue> Get(<#=charSequence#> text, int start, int[] matchLen)
        {
            LongestMatchHandler<TValue> handler = new LongestMatchHandler<TValue>();
            Find(text, start, handler);
            if (matchLen != null && matchLen.Length > 0)
            {
                matchLen[0] = handler.MatchLength;
            }
            return handler.Matches;
        }
<# } #>
<# foreach (var charSequence in charSequences) { #>

        <#= charSequence=="ICharSequence" ? charSequenceAccessibility : "public"#> virtual void Find(<#=charSequence#> text, IResultHandler<TValue> handler)
        {
            Find(text, 0, handler);
        }
<# } #>
<# foreach (var charSequence in charSequences) { #>

        <#= charSequence=="ICharSequence" ? charSequenceAccessibility : "public"#> virtual void Find(<#=charSequence#> text, int offset, IResultHandler<TValue> handler)
        {
<# if (charSequence=="ICharSequence") { #>
            CharEnumerator chitr = new CharEnumerator(text, offset, ignoreCase);
<# } else if (charSequence=="StringBuilder") { #>
            CharEnumerator chitr = new CharEnumerator(text.ToString().AsCharSequence(), offset, ignoreCase);
<# } else { #>
            CharEnumerator chitr = new CharEnumerator(text.AsCharSequence(), offset, ignoreCase);
<# } #>
            Find(root, chitr, handler);
        }
<# } #>
    }
}