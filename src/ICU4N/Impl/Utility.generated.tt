<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="System.Xml.Linq" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Xml.Linq" #>
<#@ import namespace="System.Xml.XPath" #>
<#@ output extension=".cs" #>
<#
    // Load common settings from the XML file using relative path
    string settingsPath = System.IO.Path.GetFullPath(System.IO.Path.Combine(Host.ResolvePath(string.Empty), @"../../../src/CodeGenerationSettings.xml"));
    XDocument document = XDocument.Load(settingsPath);
    XElement[] charSequenceElements = document.XPathSelectElements(@"//codeGen/charSequences/charSequence").ToArray();
    string charSequenceAccessibility = document.XPathSelectElement(@"//codeGen/charSequenceAccessibility").Value;
    string[] appendables = document.XPathSelectElements(@"//codeGen/appendables/appendable").Where(x => x.Value != "ValueStringBuilder").Select(x => x.Value).ToArray();
    string appendableAccessibility = document.XPathSelectElement(@"//codeGen/appendableAccessibility").Value;

    string[] charSequences = new string[charSequenceElements.Length];
    string[] charSequenceForDocs = new string[charSequenceElements.Length];
    string[] charSequenceFeatures = new string[charSequenceElements.Length];

    for (int i = 0; i < charSequenceElements.Length; i++) {
        XElement charSequenceElement = charSequenceElements[i];
        charSequences[i] = charSequenceElement.Value;
        charSequenceForDocs[i] = charSequenceElement.Value.Replace("<", "{").Replace(">", "}");

        XAttribute[] featureAttributes = charSequenceElement.Attributes("feature").ToArray();
        charSequenceFeatures[i] = featureAttributes == null ? "" : (featureAttributes.Length > 0 ? featureAttributes[0].Value : "");
    }
#><#= "\uFEFF" #>//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using ICU4N.Support.Text;
using ICU4N.Text;
using J2N;
using J2N.Numerics;
using J2N.Text;
using System;
using System.IO;
using System.Text;

namespace ICU4N.Impl
{
    public static partial class Utility
    {
<# foreach (var appendable in appendables) { #>

        /// <summary>
        /// Append the digits of a positive integer to the given
        /// <see cref="<#=appendable#>"/> in the given radix. This is
        /// done recursively since it is easiest to generate the low-
        /// order digit first, but it must be appended last.
        /// </summary>
        /// <param name="result">The <see cref="<#=appendable#>"/> to append to.</param>
        /// <param name="n">The positive integer.</param>
        /// <param name="radix">The radix, from 2 to 36 inclusive.</param>
        /// <param name="minDigits">The minimum number of digits to append.</param>
        private static void RecursiveAppendNumber(<#=appendable#> result, int n,
            int radix, int minDigits)
        {
            try
            {
                int digit = n % radix;

                if (n >= radix || minDigits > 1)
                {
                    RecursiveAppendNumber(result, n / radix, radix, minDigits - 1);
                }
                result.Append(DIGITS[digit]);
            }
            catch (IOException e)
            {
                throw new IcuArgumentException(e);
            }
        }
<# } #>
<# foreach (var appendable in appendables) { #>

        /// <summary>
        /// Append a number to the given <see cref="<#=appendable#>"/> in the given radix.
        /// Standard digits '0'-'9' are used and letters 'A'-'Z' for
        /// radices 11 through 36.
        /// </summary>
        /// <param name="result">The digits of the number are appended here.</param>
        /// <param name="n">The number to be converted to digits; may be negative. If negative, a '-' is prepended to the digits.</param>
        /// <param name="radix">A radix from 2 to 36 inclusive.</param>
        /// <param name="minDigits">
        /// The minimum number of digits, not including
        /// any '-', to produce.  Values less than 2 have no effect.  One
        /// digit is always emitted regardless of this parameter.
        /// </param>
        /// <returns>A reference to result.</returns>
<# if (appendable == "IAppendable") { #>
        <#=appendableAccessibility#> static T AppendNumber<T>(T result, int n,
            int radix, int minDigits) where T : <#=appendable#>
<# } else { #>
        public static <#=appendable#> AppendNumber(<#=appendable#> result, int n,
            int radix, int minDigits)
<# } #>
        {
            try
            {
                if (radix < 2 || radix > 36)
                {
                    throw new ArgumentException("Illegal radix " + radix);
                }


                int abs = n;

                if (n < 0)
                {
                    abs = -n;
                    result.Append("-");
                }

                RecursiveAppendNumber(result, abs, radix, minDigits);

                return result;
            }
            catch (IOException e)
            {
                throw new IcuArgumentException(e);
            }
        }
<# } #>
    }
}