<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="System.Xml.Linq" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Xml.Linq" #>
<#@ import namespace="System.Xml.XPath" #>
<#@ output extension=".cs" #>
<#
    // Load common settings from the XML file using relative path
    string settingsPath = System.IO.Path.GetFullPath(System.IO.Path.Combine(Host.ResolvePath(string.Empty), @"../../../src/CodeGenerationSettings.xml"));
    XDocument document = XDocument.Load(settingsPath);
    XElement[] charSequenceElements = document.XPathSelectElements(@"//codeGen/charSequences/charSequence").ToArray();
    string charSequenceAccessibility = document.XPathSelectElement(@"//codeGen/charSequenceAccessibility").Value;
    string[] appendables = document.XPathSelectElements(@"//codeGen/appendables/appendable").Where(x => x.Value != "ValueStringBuilder").Select(x => x.Value).ToArray();

    string[] charSequences = new string[charSequenceElements.Length];
    string[] charSequenceForDocs = new string[charSequenceElements.Length];
    string[] charSequenceFeatures = new string[charSequenceElements.Length];

    for (int i = 0; i < charSequenceElements.Length; i++) {
        XElement charSequenceElement = charSequenceElements[i];
        charSequences[i] = charSequenceElement.Value;
        charSequenceForDocs[i] = charSequenceElement.Value.Replace("<", "{").Replace(">", "}");

        XAttribute[] featureAttributes = charSequenceElement.Attributes("feature").ToArray();
        charSequenceFeatures[i] = featureAttributes == null ? "" : (featureAttributes.Length > 0 ? featureAttributes[0].Value : "");
    }
#><#= "\uFEFF" #>//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using ICU4N.Support.Text;
using J2N.Text;
using System;
using System.Text;

namespace ICU4N.Impl
{
    // ICU4N TODO: API: Refactor this so it is a more sensible API
    public static partial class StandardPluralUtil
    {
<# for (int i = 0; i < charSequences.Length; i++) {
    string charSequence = charSequences[i];
    string charSequenceForDoc = charSequenceForDocs[i];
    string feature = charSequenceFeatures[i]; #>
<#=!string.IsNullOrEmpty(feature) ? "#if " + feature + Environment.NewLine: ""#>
        /// <summary>
        /// Returns the plural form corresponding to the keyword, or <c>null</c>.
        /// </summary>
        /// <param name="keyword">Keyword for example "few" or "other".</param>
        /// <returns>The plural form corresponding to the keyword, or null.</returns>
        <#= charSequence=="ICharSequence" ? charSequenceAccessibility : "public"#> static StandardPlural? OrNullFromString(<#=charSequence#> keyword)
        {
            switch (keyword.Length)
            {
                case 3:
                    if ("one".ContentEquals(keyword))
                    {
                        return StandardPlural.One;
                    }
                    else if ("two".ContentEquals(keyword))
                    {
                        return StandardPlural.Two;
                    }
                    else if ("few".ContentEquals(keyword))
                    {
                        return StandardPlural.Few;
                    }
                    break;
                case 4:
                    if ("many".ContentEquals(keyword))
                    {
                        return StandardPlural.Many;
                    }
                    else if ("zero".ContentEquals(keyword))
                    {
                        return StandardPlural.Zero;
                    }
                    break;
                case 5:
                    if ("other".ContentEquals(keyword))
                    {
                        return StandardPlural.Other;
                    }
                    break;
                default:
                    break;
            }
            return null;
        }
<#=!string.IsNullOrEmpty(feature) ? "#endif " + Environment.NewLine: ""#>
<# } #>
<# for (int i = 0; i < charSequences.Length; i++) {
    string charSequence = charSequences[i];
    string charSequenceForDoc = charSequenceForDocs[i];
    string feature = charSequenceFeatures[i]; #>
<#=!string.IsNullOrEmpty(feature) ? "#if " + feature + Environment.NewLine: ""#>
        /// <summary>
        /// Returns the plural form corresponding to the keyword, or <see cref="StandardPlural.Other"/>.
        /// </summary>
        /// <param name="keyword">Keyword for example "few" or "other".</param>
        /// <returns>The plural form corresponding to the keyword, or <see cref="StandardPlural.Other"/>.</returns>
        <#= charSequence=="ICharSequence" ? charSequenceAccessibility : "public"#> static StandardPlural OrOtherFromString(<#=charSequence#> keyword)
        {
            StandardPlural? p = OrNullFromString(keyword);
            return p != null ? p.Value : StandardPlural.Other;
        }
<#=!string.IsNullOrEmpty(feature) ? "#endif " + Environment.NewLine: ""#>
<# } #>
<# for (int i = 0; i < charSequences.Length; i++) {
    string charSequence = charSequences[i];
    string charSequenceForDoc = charSequenceForDocs[i];
    string feature = charSequenceFeatures[i]; #>
<#=!string.IsNullOrEmpty(feature) ? "#if " + feature + Environment.NewLine: ""#>
        /// <summary>
        /// Returns the plural form corresponding to the keyword.
        /// </summary>
        /// <param name="keyword">Keyword for example "few" or "other".</param>
        /// <param name="result">>When this method returns, contains the index of the plural form corresponding to the keyword, otherwise
        /// <see cref="T:default(StandardPlural)"/>. This parameter is passed uninitialized.</param>
        /// <returns><c>true</c> if the <paramref name="keyword"/> is valid; otherwise <c>false</c>.</returns>
        <#= charSequence=="ICharSequence" ? charSequenceAccessibility : "public"#> static bool TryFromString(<#=charSequence#> keyword, out StandardPlural result)
        {
            StandardPlural? p = OrNullFromString(keyword);
            if (p != null)
            {
                result = p.Value;
                return true;
            }
            else
            {
                result = default(StandardPlural);
                return false;
            }
        }
<#=!string.IsNullOrEmpty(feature) ? "#endif " + Environment.NewLine: ""#>
<# } #>
<# for (int i = 0; i < charSequences.Length; i++) {
    string charSequence = charSequences[i];
    string charSequenceForDoc = charSequenceForDocs[i];
    string feature = charSequenceFeatures[i]; #>
<#=!string.IsNullOrEmpty(feature) ? "#if " + feature + Environment.NewLine: ""#>
        /// <summary>
        /// Returns the index of the plural form corresponding to the keyword, or a negative value.
        /// </summary>
        /// <param name="keyword">Keyword for example "few" or "other".</param>
        /// <returns>The index of the plural form corresponding to the keyword, or a negative value.</returns>
        <#= charSequence=="ICharSequence" ? charSequenceAccessibility : "public"#> static int IndexOrNegativeFromString(<#=charSequence#> keyword)
        {
            StandardPlural? p = OrNullFromString(keyword);
            return p != null ? (int)p.Value : -1;
        }
<#=!string.IsNullOrEmpty(feature) ? "#endif " + Environment.NewLine: ""#>
<# } #>
<# for (int i = 0; i < charSequences.Length; i++) {
    string charSequence = charSequences[i];
    string charSequenceForDoc = charSequenceForDocs[i];
    string feature = charSequenceFeatures[i]; #>
<#=!string.IsNullOrEmpty(feature) ? "#if " + feature + Environment.NewLine: ""#>
        /// <summary>
        /// Returns the index of the plural form corresponding to the keyword, or <see cref="StandardPlural.Other"/>.
        /// </summary>
        /// <param name="keyword">Keyword for example "few" or "other".</param>
        /// <returns>The index of the plural form corresponding to the keyword, or <see cref="StandardPlural.Other"/>.</returns>
        <#= charSequence=="ICharSequence" ? charSequenceAccessibility : "public"#> static int IndexOrOtherIndexFromString(<#=charSequence#> keyword)
        {
            StandardPlural? p = OrNullFromString(keyword);
            return p != null ? (int)p.Value : (int)StandardPlural.Other;
        }
<#=!string.IsNullOrEmpty(feature) ? "#endif " + Environment.NewLine: ""#>
<# } #>
<# for (int i = 0; i < charSequences.Length; i++) {
    string charSequence = charSequences[i];
    string charSequenceForDoc = charSequenceForDocs[i];
    string feature = charSequenceFeatures[i]; #>
<#=!string.IsNullOrEmpty(feature) ? "#if " + feature + Environment.NewLine: ""#>
        /// <summary>
        /// Gets the index of the plural form corresponding to the keyword.
        /// </summary>
        /// <param name="keyword">Keyword for example "few" or "other".</param>
        /// <param name="result">When this method returns, contains the index of the plural form corresponding to the keyword, otherwise
        /// <see cref="T:default(int)"/>. This parameter is passed uninitialized.</param>
        /// <returns><c>true</c> if the <paramref name="keyword"/> is valid; otherwise <c>false</c>.</returns>
        public static bool TryIndexFromString(<#=charSequence#> keyword, out int result)
        {
            StandardPlural? p = OrNullFromString(keyword);
            if (p != null)
            {
                result = (int)p;
                return true;
            }
            else
            {
                result = default(int);
                return false;
            }
        }
<#=!string.IsNullOrEmpty(feature) ? "#endif " + Environment.NewLine: ""#>
<# } #>
    }
}