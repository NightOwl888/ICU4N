<#@ output extension=".cs" #>
<#@ include file="../../../codegen/FilterDeclarations.tt" #>
<#
AppendableFilter = (a) => a.Name != "ValueStringBuilder";
string codeGenerationRelativePath = @"../../../codegen";
#><#@ include file="../../../codegen/DataLoader.tt" #>//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using J2N.Text;
using System;
using System.Text;

namespace ICU4N.Impl
{
    public sealed partial class PatternProps
    {
<# foreach (var charSequence in CharSequences) { #>
<#= GetBeginFeature(charSequence) #>
        /// <summary>
        /// Skips over Pattern_White_Space starting at index i of the string.
        /// </summary>
        /// <returns>The smallest index at or after i with a non-white space character.</returns>
        <#=charSequence.Accessibility#> static int SkipWhiteSpace(<#=charSequence#> s, int i)
        {
            while (i < s.Length && IsWhiteSpace(s[i]))
            {
                ++i;
            }
            return i;
        }
<#= GetEndFeature(charSequence) #>
<# } #>
<# foreach (var charSequence in CharSequences) { #>
<#= GetBeginFeature(charSequence) #>
        /// <summary>
        /// Tests whether the string contains a "pattern identifier", that is,
        /// whether it contains only non-Pattern_White_Space, non-Pattern_Syntax characters.
        /// </summary>
        /// <param name="s"></param>
        /// <returns>true if there are no Pattern_White_Space or Pattern_Syntax characters in s.</returns>
        <#=charSequence.Accessibility#> static bool IsIdentifier(<#=charSequence#> s)
        {
            int limit = s.Length;
            if (limit == 0)
            {
                return false;
            }
            int start = 0;
            do
            {
                if (IsSyntaxOrWhiteSpace(s[start++]))
                {
                    return false;
                }
            } while (start < limit);
            return true;
        }
<#= GetEndFeature(charSequence) #>
<# } #>
<# foreach (var charSequence in CharSequences) { #>
<#= GetBeginFeature(charSequence) #>
        /// <summary>
        /// Tests whether the string contains a "pattern identifier", that is,
        /// whether it contains only non-Pattern_White_Space, non-Pattern_Syntax characters.
        /// </summary>
        /// <returns>
        /// true if there are no Pattern_White_Space or Pattern_Syntax characters
        /// in <paramref name="s"/> between <paramref name="start"/> and (exclusive) <paramref name="limit"/>.
        /// </returns>
        <#=charSequence.Accessibility#> static bool IsIdentifier(<#=charSequence#> s, int start, int limit) // ICU4N TODO: API - Convert limit to length (.NET Convention)
        {
            if (start >= limit)
            {
                return false;
            }
            do
            {
                if (IsSyntaxOrWhiteSpace(s[start++]))
                {
                    return false;
                }
            } while (start < limit);
            return true;
        }
<#= GetEndFeature(charSequence) #>
<# } #>
<# foreach (var charSequence in CharSequences) { #>
<#= GetBeginFeature(charSequence) #>
        /// <summary>
        /// Skips over a "pattern identifier" starting at index <paramref name="i"/> of the string.
        /// </summary>
        /// <returns>
        /// The smallest index at or after <paramref name="i"/> with
        /// a Pattern_White_Space or Pattern_Syntax character.
        /// </returns>
        <#=charSequence.Accessibility#> static int SkipIdentifier(<#=charSequence#> s, int i)
        {
            while (i < s.Length && !IsSyntaxOrWhiteSpace(s[i]))
            {
                ++i;
            }
            return i;
        }
<#= GetEndFeature(charSequence) #>
<# } #>
    }
}
<#@ include file="../../../codegen/SharedObjects.tt" #>