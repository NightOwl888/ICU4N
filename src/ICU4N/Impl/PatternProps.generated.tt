<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="System.Xml.Linq" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Xml.Linq" #>
<#@ import namespace="System.Xml.XPath" #>
<#@ output extension=".cs" #>
<#
    // Load common settings from the XML file using relative path
    string settingsPath = System.IO.Path.GetFullPath(System.IO.Path.Combine(Host.ResolvePath(string.Empty), @"../../../src/CodeGenerationSettings.xml"));
    XDocument document = XDocument.Load(settingsPath);
    XElement[] charSequenceElements = document.XPathSelectElements(@"//codeGen/charSequences/charSequence").ToArray();
    string charSequenceAccessibility = document.XPathSelectElement(@"//codeGen/charSequenceAccessibility").Value;
    string[] appendables = document.XPathSelectElements(@"//codeGen/appendables/appendable").Where(x => x.Value != "ValueStringBuilder").Select(x => x.Value).ToArray();

    string[] charSequences = new string[charSequenceElements.Length];
    string[] charSequenceForDocs = new string[charSequenceElements.Length];
    string[] charSequenceFeatures = new string[charSequenceElements.Length];

    for (int i = 0; i < charSequenceElements.Length; i++) {
        XElement charSequenceElement = charSequenceElements[i];
        charSequences[i] = charSequenceElement.Value;
        charSequenceForDocs[i] = charSequenceElement.Value.Replace("<", "{").Replace(">", "}");

        XAttribute[] featureAttributes = charSequenceElement.Attributes("feature").ToArray();
        charSequenceFeatures[i] = featureAttributes == null ? "" : (featureAttributes.Length > 0 ? featureAttributes[0].Value : "");
    }
#><#= "\uFEFF" #>//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using J2N.Text;
using System;
using System.Text;

namespace ICU4N.Impl
{
    public sealed partial class PatternProps
    {
<# for (int i = 0; i < charSequences.Length; i++) {
    string charSequence = charSequences[i];
    string charSequenceForDoc = charSequenceForDocs[i];
    string feature = charSequenceFeatures[i]; #>
<#=!string.IsNullOrEmpty(feature) ? "#if " + feature + Environment.NewLine: ""#>        /// <summary>
        /// Skips over Pattern_White_Space starting at index i of the string.
        /// </summary>
        /// <returns>The smallest index at or after i with a non-white space character.</returns>
        <#= charSequence=="ICharSequence" ? charSequenceAccessibility : "public"#> static int SkipWhiteSpace(<#=charSequence#> s, int i)
        {
            while (i < s.Length && IsWhiteSpace(s[i]))
            {
                ++i;
            }
            return i;
        }
<#=!string.IsNullOrEmpty(feature) ? "#endif " + Environment.NewLine: ""#>
<# } #>
<# for (int i = 0; i < charSequences.Length; i++) {
    string charSequence = charSequences[i];
    string charSequenceForDoc = charSequenceForDocs[i];
    string feature = charSequenceFeatures[i]; #>
<#=!string.IsNullOrEmpty(feature) ? "#if " + feature + Environment.NewLine: ""#>        /// <summary>
        /// Tests whether the string contains a "pattern identifier", that is,
        /// whether it contains only non-Pattern_White_Space, non-Pattern_Syntax characters.
        /// </summary>
        /// <param name="s"></param>
        /// <returns>true if there are no Pattern_White_Space or Pattern_Syntax characters in s.</returns>
        <#= charSequence=="ICharSequence" ? charSequenceAccessibility : "public"#> static bool IsIdentifier(<#=charSequence#> s)
        {
            int limit = s.Length;
            if (limit == 0)
            {
                return false;
            }
            int start = 0;
            do
            {
                if (IsSyntaxOrWhiteSpace(s[start++]))
                {
                    return false;
                }
            } while (start < limit);
            return true;
        }
<#=!string.IsNullOrEmpty(feature) ? "#endif " + Environment.NewLine: ""#>
<# } #>
<# for (int i = 0; i < charSequences.Length; i++) {
    string charSequence = charSequences[i];
    string charSequenceForDoc = charSequenceForDocs[i];
    string feature = charSequenceFeatures[i]; #>
<#=!string.IsNullOrEmpty(feature) ? "#if " + feature + Environment.NewLine: ""#>        /// <summary>
        /// Tests whether the string contains a "pattern identifier", that is,
        /// whether it contains only non-Pattern_White_Space, non-Pattern_Syntax characters.
        /// </summary>
        /// <returns>
        /// true if there are no Pattern_White_Space or Pattern_Syntax characters
        /// in <paramref name="s"/> between <paramref name="start"/> and (exclusive) <paramref name="limit"/>.
        /// </returns>
        <#= charSequence=="ICharSequence" ? charSequenceAccessibility : "public"#> static bool IsIdentifier(<#=charSequence#> s, int start, int limit) // ICU4N TODO: API - Convert limit to length (.NET Convention)
        {
            if (start >= limit)
            {
                return false;
            }
            do
            {
                if (IsSyntaxOrWhiteSpace(s[start++]))
                {
                    return false;
                }
            } while (start < limit);
            return true;
        }
<#=!string.IsNullOrEmpty(feature) ? "#endif " + Environment.NewLine: ""#>
<# } #>
<# for (int i = 0; i < charSequences.Length; i++) {
    string charSequence = charSequences[i];
    string charSequenceForDoc = charSequenceForDocs[i];
    string feature = charSequenceFeatures[i]; #>
<#=!string.IsNullOrEmpty(feature) ? "#if " + feature + Environment.NewLine: ""#>        /// <summary>
        /// Skips over a "pattern identifier" starting at index <paramref name="i"/> of the string.
        /// </summary>
        /// <returns>
        /// The smallest index at or after <paramref name="i"/> with
        /// a Pattern_White_Space or Pattern_Syntax character.
        /// </returns>
        <#= charSequence=="ICharSequence" ? charSequenceAccessibility : "public"#> static int SkipIdentifier(<#=charSequence#> s, int i)
        {
            while (i < s.Length && !IsSyntaxOrWhiteSpace(s[i]))
            {
                ++i;
            }
            return i;
        }
<#=!string.IsNullOrEmpty(feature) ? "#endif " + Environment.NewLine: ""#>
<# } #>
    }
}