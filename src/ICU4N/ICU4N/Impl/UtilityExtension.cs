//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using ICU4N.Support;
using ICU4N.Support.Text;
using ICU4N.Text;
using System;
using System.IO;
using System.Text;

namespace ICU4N.Impl
{
    public static partial class Utility
    {

	    /// <summary>
        /// Encode a run, possibly a degenerate run (of &lt; 4 values).
        /// </summary>
        /// <param name="buffer"></param>
        /// <param name="value"></param>
        /// <param name="length">The length of the run; must be > 0 && &lt;= 0xFFFF.</param>
        private static void EncodeRun(StringBuilder buffer, int value, int length)
        {
            if (length < 4)
            {
                for (int j = 0; j < length; ++j)
                {
                    if (value == ESCAPE)
                    {
                        AppendInt32(buffer, value);
                    }
                    AppendInt32(buffer, value);
                }
            }
            else
            {
                if (length == ESCAPE)
                {
                    if (value == ESCAPE)
                    {
                        AppendInt32(buffer, ESCAPE);
                    }
                    AppendInt32(buffer, value);
                    --length;
                }
                AppendInt32(buffer, ESCAPE);
                AppendInt32(buffer, length);
                AppendInt32(buffer, value); // Don't need to escape this value
            }
        }

	    /// <summary>
        /// Encode a run, possibly a degenerate run (of &lt; 4 values).
        /// </summary>
        /// <param name="buffer"></param>
        /// <param name="value"></param>
        /// <param name="length">The length of the run; must be > 0 && &lt;= 0xFFFF.</param>
        private static void EncodeRun(IAppendable buffer, int value, int length)
        {
            if (length < 4)
            {
                for (int j = 0; j < length; ++j)
                {
                    if (value == ESCAPE)
                    {
                        AppendInt32(buffer, value);
                    }
                    AppendInt32(buffer, value);
                }
            }
            else
            {
                if (length == ESCAPE)
                {
                    if (value == ESCAPE)
                    {
                        AppendInt32(buffer, ESCAPE);
                    }
                    AppendInt32(buffer, value);
                    --length;
                }
                AppendInt32(buffer, ESCAPE);
                AppendInt32(buffer, length);
                AppendInt32(buffer, value); // Don't need to escape this value
            }
        }

        private static void AppendInt32(StringBuilder buffer, int value)
        {
            try
            {
                buffer.Append((char)(value.TripleShift(16)));
                buffer.Append((char)(value & 0xFFFF));
            }
            catch (IOException e)
            {
                throw new IcuArgumentException(e);
            }
        }

        private static void AppendInt32(IAppendable buffer, int value)
        {
            try
            {
                buffer.Append((char)(value.TripleShift(16)));
                buffer.Append((char)(value & 0xFFFF));
            }
            catch (IOException e)
            {
                throw new IcuArgumentException(e);
            }
        }

        /// <summary>
        /// Encode a run, possibly a degenerate run (of &lt; 4 values).
        /// </summary>
        /// <param name="buffer"></param>
        /// <param name="value"></param>
        /// <param name="length">The length of the run; must be > 0 && &lt;= 0xFFFF.</param>
        private static void EncodeRun(StringBuilder buffer, short value, int length)
        {
            try
            {
                char valueChar = (char)value;
                if (length < 4)
                {
                    for (int j = 0; j < length; ++j)
                    {
                        if (valueChar == ESCAPE)
                        {
                            buffer.Append(ESCAPE);
                        }
                        buffer.Append(valueChar);
                    }
                }
                else
                {
                    if (length == ESCAPE)
                    {
                        if (valueChar == ESCAPE)
                        {
                            buffer.Append(ESCAPE);
                        }
                        buffer.Append(valueChar);
                        --length;
                    }
                    buffer.Append(ESCAPE);
                    buffer.Append((char)length);
                    buffer.Append(valueChar); // Don't need to escape this value
                }
            }
            catch (IOException e)
            {
                throw new IcuArgumentException(e);
            }
        }

        /// <summary>
        /// Encode a run, possibly a degenerate run (of &lt; 4 values).
        /// </summary>
        /// <param name="buffer"></param>
        /// <param name="value"></param>
        /// <param name="length">The length of the run; must be > 0 && &lt;= 0xFFFF.</param>
        private static void EncodeRun(IAppendable buffer, short value, int length)
        {
            try
            {
                char valueChar = (char)value;
                if (length < 4)
                {
                    for (int j = 0; j < length; ++j)
                    {
                        if (valueChar == ESCAPE)
                        {
                            buffer.Append(ESCAPE);
                        }
                        buffer.Append(valueChar);
                    }
                }
                else
                {
                    if (length == ESCAPE)
                    {
                        if (valueChar == ESCAPE)
                        {
                            buffer.Append(ESCAPE);
                        }
                        buffer.Append(valueChar);
                        --length;
                    }
                    buffer.Append(ESCAPE);
                    buffer.Append((char)length);
                    buffer.Append(valueChar); // Don't need to escape this value
                }
            }
            catch (IOException e)
            {
                throw new IcuArgumentException(e);
            }
        }

	    /// <summary>
        /// Encode a run, possibly a degenerate run (of &lt; 4 values).
        /// </summary>
        /// <param name="buffer"></param>
        /// <param name="value"></param>
        /// <param name="length">The length of the run; must be > 0 && &lt;= 0xFF.</param>
        /// <param name="state"></param>
        private static void EncodeRun(StringBuilder buffer, byte value, int length,
            byte[] state)
        {
            if (length < 4)
            {
                for (int j = 0; j < length; ++j)
                {
                    if (value == ESCAPE_BYTE) AppendEncodedByte(buffer, ESCAPE_BYTE, state);
                    AppendEncodedByte(buffer, value, state);
                }
            }
            else
            {
                if ((byte)length == ESCAPE_BYTE)
                {
                    if (value == ESCAPE_BYTE) AppendEncodedByte(buffer, ESCAPE_BYTE, state);
                    AppendEncodedByte(buffer, value, state);
                    --length;
                }
                AppendEncodedByte(buffer, ESCAPE_BYTE, state);
                AppendEncodedByte(buffer, (byte)length, state);
                AppendEncodedByte(buffer, value, state); // Don't need to escape this value
            }
        }

	    /// <summary>
        /// Encode a run, possibly a degenerate run (of &lt; 4 values).
        /// </summary>
        /// <param name="buffer"></param>
        /// <param name="value"></param>
        /// <param name="length">The length of the run; must be > 0 && &lt;= 0xFF.</param>
        /// <param name="state"></param>
        private static void EncodeRun(IAppendable buffer, byte value, int length,
            byte[] state)
        {
            if (length < 4)
            {
                for (int j = 0; j < length; ++j)
                {
                    if (value == ESCAPE_BYTE) AppendEncodedByte(buffer, ESCAPE_BYTE, state);
                    AppendEncodedByte(buffer, value, state);
                }
            }
            else
            {
                if ((byte)length == ESCAPE_BYTE)
                {
                    if (value == ESCAPE_BYTE) AppendEncodedByte(buffer, ESCAPE_BYTE, state);
                    AppendEncodedByte(buffer, value, state);
                    --length;
                }
                AppendEncodedByte(buffer, ESCAPE_BYTE, state);
                AppendEncodedByte(buffer, (byte)length, state);
                AppendEncodedByte(buffer, value, state); // Don't need to escape this value
            }
        }

        /// <summary>
        /// Append a byte to the given <see cref="StringBuilder"/>, packing two bytes into each
        /// character.  The state parameter maintains intermediary data between
        /// calls.
        /// </summary>
        /// <param name="buffer"></param>
        /// <param name="value"></param>
        /// <param name="state">A two-element array, with state[0] == 0 if this is the
        /// first byte of a pair, or state[0] != 0 if this is the second byte
        /// of a pair, in which case state[1] is the first byte.</param>
        private static void AppendEncodedByte(StringBuilder buffer, byte value,
            byte[] state)
        {
            try
            {
                if (state[0] != 0)
                {
                    char c = (char)((state[1] << 8) | ((value) & 0xFF));
                    buffer.Append(c);
                    state[0] = 0;
                }
                else
                {
                    state[0] = 1;
                    state[1] = value;
                }
            }
            catch (IOException e)
            {
                throw new IcuArgumentException(e);
            }
        }

        /// <summary>
        /// Append a byte to the given <see cref="IAppendable"/>, packing two bytes into each
        /// character.  The state parameter maintains intermediary data between
        /// calls.
        /// </summary>
        /// <param name="buffer"></param>
        /// <param name="value"></param>
        /// <param name="state">A two-element array, with state[0] == 0 if this is the
        /// first byte of a pair, or state[0] != 0 if this is the second byte
        /// of a pair, in which case state[1] is the first byte.</param>
        private static void AppendEncodedByte(IAppendable buffer, byte value,
            byte[] state)
        {
            try
            {
                if (state[0] != 0)
                {
                    char c = (char)((state[1] << 8) | ((value) & 0xFF));
                    buffer.Append(c);
                    state[0] = 0;
                }
                else
                {
                    state[0] = 1;
                    state[1] = value;
                }
            }
            catch (IOException e)
            {
                throw new IcuArgumentException(e);
            }
        }

        /// <summary>
        /// Convert a string to comma-separated groups of 4 hex uppercase
        /// digits.  E.g., hex('ab') => "0041,0042".
        /// </summary>
        public static string Hex(string s)
        {
            return Hex(s, 4, ",", true, new StringBuilder()).ToString();
        }

        /// <summary>
        /// Convert a string to comma-separated groups of 4 hex uppercase
        /// digits.  E.g., hex('ab') => "0041,0042".
        /// </summary>
        public static string Hex(StringBuilder s)
        {
            return Hex(s, 4, ",", true, new StringBuilder()).ToString();
        }

        /// <summary>
        /// Convert a string to comma-separated groups of 4 hex uppercase
        /// digits.  E.g., hex('ab') => "0041,0042".
        /// </summary>
        public static string Hex(char[] s)
        {
            return Hex(s, 4, ",", true, new StringBuilder()).ToString();
        }

        /// <summary>
        /// Convert a string to comma-separated groups of 4 hex uppercase
        /// digits.  E.g., hex('ab') => "0041,0042".
        /// </summary>
        internal static string Hex(ICharSequence s)
        {
            return Hex(s, 4, ",", true, new StringBuilder()).ToString();
        }
			
        /// <summary>
        /// Convert a string to separated groups of hex uppercase
        /// digits.  E.g., hex('ab'...) => "0041,0042".  Append the output
        /// to the given <see cref="StringBuilder"/>.
        /// </summary>
        public static StringBuilder Hex(string s, int width, string separator, bool useCodePoints, StringBuilder result)
        {
            try
            {
                if (useCodePoints)
                {
                    int cp;
                    for (int i = 0; i < s.Length; i += UTF16.GetCharCount(cp))
                    {
                        cp = Character.CodePointAt(s, i);
                        if (i != 0)
                        {
                            result.Append(separator);
                        }
                        result.Append(Hex(cp, width));
                    }
                }
                else
                {
                    for (int i = 0; i < s.Length; ++i)
                    {
                        if (i != 0)
                        {
                            result.Append(separator);
                        }
                        result.Append(Hex(s[i], width));
                    }
                }
                return result;
            }
            catch (IOException e)
            {
                throw new IcuArgumentException(e);
            }
		}
		
        /// <summary>
        /// Convert a string to separated groups of hex uppercase
        /// digits.  E.g., hex('ab'...) => "0041,0042".  Append the output
        /// to the given <see cref="StringBuilder"/>.
        /// </summary>
        public static StringBuilder Hex(string s, int width, StringBuilder separator, bool useCodePoints, StringBuilder result)
        {
            try
            {
                if (useCodePoints)
                {
                    int cp;
                    for (int i = 0; i < s.Length; i += UTF16.GetCharCount(cp))
                    {
                        cp = Character.CodePointAt(s, i);
                        if (i != 0)
                        {
                            result.Append(separator);
                        }
                        result.Append(Hex(cp, width));
                    }
                }
                else
                {
                    for (int i = 0; i < s.Length; ++i)
                    {
                        if (i != 0)
                        {
                            result.Append(separator);
                        }
                        result.Append(Hex(s[i], width));
                    }
                }
                return result;
            }
            catch (IOException e)
            {
                throw new IcuArgumentException(e);
            }
		}
		
        /// <summary>
        /// Convert a string to separated groups of hex uppercase
        /// digits.  E.g., hex('ab'...) => "0041,0042".  Append the output
        /// to the given <see cref="StringBuilder"/>.
        /// </summary>
        public static StringBuilder Hex(string s, int width, char[] separator, bool useCodePoints, StringBuilder result)
        {
            try
            {
                if (useCodePoints)
                {
                    int cp;
                    for (int i = 0; i < s.Length; i += UTF16.GetCharCount(cp))
                    {
                        cp = Character.CodePointAt(s, i);
                        if (i != 0)
                        {
                            result.Append(separator);
                        }
                        result.Append(Hex(cp, width));
                    }
                }
                else
                {
                    for (int i = 0; i < s.Length; ++i)
                    {
                        if (i != 0)
                        {
                            result.Append(separator);
                        }
                        result.Append(Hex(s[i], width));
                    }
                }
                return result;
            }
            catch (IOException e)
            {
                throw new IcuArgumentException(e);
            }
		}
		
        /// <summary>
        /// Convert a string to separated groups of hex uppercase
        /// digits.  E.g., hex('ab'...) => "0041,0042".  Append the output
        /// to the given <see cref="StringBuilder"/>.
        /// </summary>
        internal static StringBuilder Hex(string s, int width, ICharSequence separator, bool useCodePoints, StringBuilder result)
        {
            try
            {
                if (useCodePoints)
                {
                    int cp;
                    for (int i = 0; i < s.Length; i += UTF16.GetCharCount(cp))
                    {
                        cp = Character.CodePointAt(s, i);
                        if (i != 0)
                        {
                            result.Append(separator);
                        }
                        result.Append(Hex(cp, width));
                    }
                }
                else
                {
                    for (int i = 0; i < s.Length; ++i)
                    {
                        if (i != 0)
                        {
                            result.Append(separator);
                        }
                        result.Append(Hex(s[i], width));
                    }
                }
                return result;
            }
            catch (IOException e)
            {
                throw new IcuArgumentException(e);
            }
		}
					
        /// <summary>
        /// Convert a string to separated groups of hex uppercase
        /// digits.  E.g., hex('ab'...) => "0041,0042".  Append the output
        /// to the given <see cref="StringBuilder"/>.
        /// </summary>
        public static StringBuilder Hex(StringBuilder s, int width, string separator, bool useCodePoints, StringBuilder result)
        {
            try
            {
                if (useCodePoints)
                {
                    int cp;
                    for (int i = 0; i < s.Length; i += UTF16.GetCharCount(cp))
                    {
                        cp = Character.CodePointAt(s, i);
                        if (i != 0)
                        {
                            result.Append(separator);
                        }
                        result.Append(Hex(cp, width));
                    }
                }
                else
                {
                    for (int i = 0; i < s.Length; ++i)
                    {
                        if (i != 0)
                        {
                            result.Append(separator);
                        }
                        result.Append(Hex(s[i], width));
                    }
                }
                return result;
            }
            catch (IOException e)
            {
                throw new IcuArgumentException(e);
            }
		}
		
        /// <summary>
        /// Convert a string to separated groups of hex uppercase
        /// digits.  E.g., hex('ab'...) => "0041,0042".  Append the output
        /// to the given <see cref="StringBuilder"/>.
        /// </summary>
        public static StringBuilder Hex(StringBuilder s, int width, StringBuilder separator, bool useCodePoints, StringBuilder result)
        {
            try
            {
                if (useCodePoints)
                {
                    int cp;
                    for (int i = 0; i < s.Length; i += UTF16.GetCharCount(cp))
                    {
                        cp = Character.CodePointAt(s, i);
                        if (i != 0)
                        {
                            result.Append(separator);
                        }
                        result.Append(Hex(cp, width));
                    }
                }
                else
                {
                    for (int i = 0; i < s.Length; ++i)
                    {
                        if (i != 0)
                        {
                            result.Append(separator);
                        }
                        result.Append(Hex(s[i], width));
                    }
                }
                return result;
            }
            catch (IOException e)
            {
                throw new IcuArgumentException(e);
            }
		}
		
        /// <summary>
        /// Convert a string to separated groups of hex uppercase
        /// digits.  E.g., hex('ab'...) => "0041,0042".  Append the output
        /// to the given <see cref="StringBuilder"/>.
        /// </summary>
        public static StringBuilder Hex(StringBuilder s, int width, char[] separator, bool useCodePoints, StringBuilder result)
        {
            try
            {
                if (useCodePoints)
                {
                    int cp;
                    for (int i = 0; i < s.Length; i += UTF16.GetCharCount(cp))
                    {
                        cp = Character.CodePointAt(s, i);
                        if (i != 0)
                        {
                            result.Append(separator);
                        }
                        result.Append(Hex(cp, width));
                    }
                }
                else
                {
                    for (int i = 0; i < s.Length; ++i)
                    {
                        if (i != 0)
                        {
                            result.Append(separator);
                        }
                        result.Append(Hex(s[i], width));
                    }
                }
                return result;
            }
            catch (IOException e)
            {
                throw new IcuArgumentException(e);
            }
		}
		
        /// <summary>
        /// Convert a string to separated groups of hex uppercase
        /// digits.  E.g., hex('ab'...) => "0041,0042".  Append the output
        /// to the given <see cref="StringBuilder"/>.
        /// </summary>
        internal static StringBuilder Hex(StringBuilder s, int width, ICharSequence separator, bool useCodePoints, StringBuilder result)
        {
            try
            {
                if (useCodePoints)
                {
                    int cp;
                    for (int i = 0; i < s.Length; i += UTF16.GetCharCount(cp))
                    {
                        cp = Character.CodePointAt(s, i);
                        if (i != 0)
                        {
                            result.Append(separator);
                        }
                        result.Append(Hex(cp, width));
                    }
                }
                else
                {
                    for (int i = 0; i < s.Length; ++i)
                    {
                        if (i != 0)
                        {
                            result.Append(separator);
                        }
                        result.Append(Hex(s[i], width));
                    }
                }
                return result;
            }
            catch (IOException e)
            {
                throw new IcuArgumentException(e);
            }
		}
					
        /// <summary>
        /// Convert a string to separated groups of hex uppercase
        /// digits.  E.g., hex('ab'...) => "0041,0042".  Append the output
        /// to the given <see cref="StringBuilder"/>.
        /// </summary>
        public static StringBuilder Hex(char[] s, int width, string separator, bool useCodePoints, StringBuilder result)
        {
            try
            {
                if (useCodePoints)
                {
                    int cp;
                    for (int i = 0; i < s.Length; i += UTF16.GetCharCount(cp))
                    {
                        cp = Character.CodePointAt(s, i);
                        if (i != 0)
                        {
                            result.Append(separator);
                        }
                        result.Append(Hex(cp, width));
                    }
                }
                else
                {
                    for (int i = 0; i < s.Length; ++i)
                    {
                        if (i != 0)
                        {
                            result.Append(separator);
                        }
                        result.Append(Hex(s[i], width));
                    }
                }
                return result;
            }
            catch (IOException e)
            {
                throw new IcuArgumentException(e);
            }
		}
		
        /// <summary>
        /// Convert a string to separated groups of hex uppercase
        /// digits.  E.g., hex('ab'...) => "0041,0042".  Append the output
        /// to the given <see cref="StringBuilder"/>.
        /// </summary>
        public static StringBuilder Hex(char[] s, int width, StringBuilder separator, bool useCodePoints, StringBuilder result)
        {
            try
            {
                if (useCodePoints)
                {
                    int cp;
                    for (int i = 0; i < s.Length; i += UTF16.GetCharCount(cp))
                    {
                        cp = Character.CodePointAt(s, i);
                        if (i != 0)
                        {
                            result.Append(separator);
                        }
                        result.Append(Hex(cp, width));
                    }
                }
                else
                {
                    for (int i = 0; i < s.Length; ++i)
                    {
                        if (i != 0)
                        {
                            result.Append(separator);
                        }
                        result.Append(Hex(s[i], width));
                    }
                }
                return result;
            }
            catch (IOException e)
            {
                throw new IcuArgumentException(e);
            }
		}
		
        /// <summary>
        /// Convert a string to separated groups of hex uppercase
        /// digits.  E.g., hex('ab'...) => "0041,0042".  Append the output
        /// to the given <see cref="StringBuilder"/>.
        /// </summary>
        public static StringBuilder Hex(char[] s, int width, char[] separator, bool useCodePoints, StringBuilder result)
        {
            try
            {
                if (useCodePoints)
                {
                    int cp;
                    for (int i = 0; i < s.Length; i += UTF16.GetCharCount(cp))
                    {
                        cp = Character.CodePointAt(s, i);
                        if (i != 0)
                        {
                            result.Append(separator);
                        }
                        result.Append(Hex(cp, width));
                    }
                }
                else
                {
                    for (int i = 0; i < s.Length; ++i)
                    {
                        if (i != 0)
                        {
                            result.Append(separator);
                        }
                        result.Append(Hex(s[i], width));
                    }
                }
                return result;
            }
            catch (IOException e)
            {
                throw new IcuArgumentException(e);
            }
		}
		
        /// <summary>
        /// Convert a string to separated groups of hex uppercase
        /// digits.  E.g., hex('ab'...) => "0041,0042".  Append the output
        /// to the given <see cref="StringBuilder"/>.
        /// </summary>
        internal static StringBuilder Hex(char[] s, int width, ICharSequence separator, bool useCodePoints, StringBuilder result)
        {
            try
            {
                if (useCodePoints)
                {
                    int cp;
                    for (int i = 0; i < s.Length; i += UTF16.GetCharCount(cp))
                    {
                        cp = Character.CodePointAt(s, i);
                        if (i != 0)
                        {
                            result.Append(separator);
                        }
                        result.Append(Hex(cp, width));
                    }
                }
                else
                {
                    for (int i = 0; i < s.Length; ++i)
                    {
                        if (i != 0)
                        {
                            result.Append(separator);
                        }
                        result.Append(Hex(s[i], width));
                    }
                }
                return result;
            }
            catch (IOException e)
            {
                throw new IcuArgumentException(e);
            }
		}
					
        /// <summary>
        /// Convert a string to separated groups of hex uppercase
        /// digits.  E.g., hex('ab'...) => "0041,0042".  Append the output
        /// to the given <see cref="StringBuilder"/>.
        /// </summary>
        internal static StringBuilder Hex(ICharSequence s, int width, string separator, bool useCodePoints, StringBuilder result)
        {
            try
            {
                if (useCodePoints)
                {
                    int cp;
                    for (int i = 0; i < s.Length; i += UTF16.GetCharCount(cp))
                    {
                        cp = Character.CodePointAt(s, i);
                        if (i != 0)
                        {
                            result.Append(separator);
                        }
                        result.Append(Hex(cp, width));
                    }
                }
                else
                {
                    for (int i = 0; i < s.Length; ++i)
                    {
                        if (i != 0)
                        {
                            result.Append(separator);
                        }
                        result.Append(Hex(s[i], width));
                    }
                }
                return result;
            }
            catch (IOException e)
            {
                throw new IcuArgumentException(e);
            }
		}
		
        /// <summary>
        /// Convert a string to separated groups of hex uppercase
        /// digits.  E.g., hex('ab'...) => "0041,0042".  Append the output
        /// to the given <see cref="StringBuilder"/>.
        /// </summary>
        internal static StringBuilder Hex(ICharSequence s, int width, StringBuilder separator, bool useCodePoints, StringBuilder result)
        {
            try
            {
                if (useCodePoints)
                {
                    int cp;
                    for (int i = 0; i < s.Length; i += UTF16.GetCharCount(cp))
                    {
                        cp = Character.CodePointAt(s, i);
                        if (i != 0)
                        {
                            result.Append(separator);
                        }
                        result.Append(Hex(cp, width));
                    }
                }
                else
                {
                    for (int i = 0; i < s.Length; ++i)
                    {
                        if (i != 0)
                        {
                            result.Append(separator);
                        }
                        result.Append(Hex(s[i], width));
                    }
                }
                return result;
            }
            catch (IOException e)
            {
                throw new IcuArgumentException(e);
            }
		}
		
        /// <summary>
        /// Convert a string to separated groups of hex uppercase
        /// digits.  E.g., hex('ab'...) => "0041,0042".  Append the output
        /// to the given <see cref="StringBuilder"/>.
        /// </summary>
        internal static StringBuilder Hex(ICharSequence s, int width, char[] separator, bool useCodePoints, StringBuilder result)
        {
            try
            {
                if (useCodePoints)
                {
                    int cp;
                    for (int i = 0; i < s.Length; i += UTF16.GetCharCount(cp))
                    {
                        cp = Character.CodePointAt(s, i);
                        if (i != 0)
                        {
                            result.Append(separator);
                        }
                        result.Append(Hex(cp, width));
                    }
                }
                else
                {
                    for (int i = 0; i < s.Length; ++i)
                    {
                        if (i != 0)
                        {
                            result.Append(separator);
                        }
                        result.Append(Hex(s[i], width));
                    }
                }
                return result;
            }
            catch (IOException e)
            {
                throw new IcuArgumentException(e);
            }
		}
		
        /// <summary>
        /// Convert a string to separated groups of hex uppercase
        /// digits.  E.g., hex('ab'...) => "0041,0042".  Append the output
        /// to the given <see cref="StringBuilder"/>.
        /// </summary>
        internal static StringBuilder Hex(ICharSequence s, int width, ICharSequence separator, bool useCodePoints, StringBuilder result)
        {
            try
            {
                if (useCodePoints)
                {
                    int cp;
                    for (int i = 0; i < s.Length; i += UTF16.GetCharCount(cp))
                    {
                        cp = Character.CodePointAt(s, i);
                        if (i != 0)
                        {
                            result.Append(separator);
                        }
                        result.Append(Hex(cp, width));
                    }
                }
                else
                {
                    for (int i = 0; i < s.Length; ++i)
                    {
                        if (i != 0)
                        {
                            result.Append(separator);
                        }
                        result.Append(Hex(s[i], width));
                    }
                }
                return result;
            }
            catch (IOException e)
            {
                throw new IcuArgumentException(e);
            }
		}
						
        /// <summary>
        /// Convert a string to separated groups of hex uppercase
        /// digits.  E.g., hex('ab'...) => "0041,0042".  Append the output
        /// to the given <see cref="IAppendable"/>.
        /// </summary>
        internal static T Hex<T>(string s, int width, string separator, bool useCodePoints, T result) where T : IAppendable
        {
            try
            {
                if (useCodePoints)
                {
                    int cp;
                    for (int i = 0; i < s.Length; i += UTF16.GetCharCount(cp))
                    {
                        cp = Character.CodePointAt(s, i);
                        if (i != 0)
                        {
                            result.Append(separator);
                        }
                        result.Append(Hex(cp, width));
                    }
                }
                else
                {
                    for (int i = 0; i < s.Length; ++i)
                    {
                        if (i != 0)
                        {
                            result.Append(separator);
                        }
                        result.Append(Hex(s[i], width));
                    }
                }
                return result;
            }
            catch (IOException e)
            {
                throw new IcuArgumentException(e);
            }
		}
		
        /// <summary>
        /// Convert a string to separated groups of hex uppercase
        /// digits.  E.g., hex('ab'...) => "0041,0042".  Append the output
        /// to the given <see cref="IAppendable"/>.
        /// </summary>
        internal static T Hex<T>(string s, int width, StringBuilder separator, bool useCodePoints, T result) where T : IAppendable
        {
            try
            {
                if (useCodePoints)
                {
                    int cp;
                    for (int i = 0; i < s.Length; i += UTF16.GetCharCount(cp))
                    {
                        cp = Character.CodePointAt(s, i);
                        if (i != 0)
                        {
                            result.Append(separator);
                        }
                        result.Append(Hex(cp, width));
                    }
                }
                else
                {
                    for (int i = 0; i < s.Length; ++i)
                    {
                        if (i != 0)
                        {
                            result.Append(separator);
                        }
                        result.Append(Hex(s[i], width));
                    }
                }
                return result;
            }
            catch (IOException e)
            {
                throw new IcuArgumentException(e);
            }
		}
		
        /// <summary>
        /// Convert a string to separated groups of hex uppercase
        /// digits.  E.g., hex('ab'...) => "0041,0042".  Append the output
        /// to the given <see cref="IAppendable"/>.
        /// </summary>
        internal static T Hex<T>(string s, int width, char[] separator, bool useCodePoints, T result) where T : IAppendable
        {
            try
            {
                if (useCodePoints)
                {
                    int cp;
                    for (int i = 0; i < s.Length; i += UTF16.GetCharCount(cp))
                    {
                        cp = Character.CodePointAt(s, i);
                        if (i != 0)
                        {
                            result.Append(separator);
                        }
                        result.Append(Hex(cp, width));
                    }
                }
                else
                {
                    for (int i = 0; i < s.Length; ++i)
                    {
                        if (i != 0)
                        {
                            result.Append(separator);
                        }
                        result.Append(Hex(s[i], width));
                    }
                }
                return result;
            }
            catch (IOException e)
            {
                throw new IcuArgumentException(e);
            }
		}
		
        /// <summary>
        /// Convert a string to separated groups of hex uppercase
        /// digits.  E.g., hex('ab'...) => "0041,0042".  Append the output
        /// to the given <see cref="IAppendable"/>.
        /// </summary>
        internal static T Hex<T>(string s, int width, ICharSequence separator, bool useCodePoints, T result) where T : IAppendable
        {
            try
            {
                if (useCodePoints)
                {
                    int cp;
                    for (int i = 0; i < s.Length; i += UTF16.GetCharCount(cp))
                    {
                        cp = Character.CodePointAt(s, i);
                        if (i != 0)
                        {
                            result.Append(separator);
                        }
                        result.Append(Hex(cp, width));
                    }
                }
                else
                {
                    for (int i = 0; i < s.Length; ++i)
                    {
                        if (i != 0)
                        {
                            result.Append(separator);
                        }
                        result.Append(Hex(s[i], width));
                    }
                }
                return result;
            }
            catch (IOException e)
            {
                throw new IcuArgumentException(e);
            }
		}
					
        /// <summary>
        /// Convert a string to separated groups of hex uppercase
        /// digits.  E.g., hex('ab'...) => "0041,0042".  Append the output
        /// to the given <see cref="IAppendable"/>.
        /// </summary>
        internal static T Hex<T>(StringBuilder s, int width, string separator, bool useCodePoints, T result) where T : IAppendable
        {
            try
            {
                if (useCodePoints)
                {
                    int cp;
                    for (int i = 0; i < s.Length; i += UTF16.GetCharCount(cp))
                    {
                        cp = Character.CodePointAt(s, i);
                        if (i != 0)
                        {
                            result.Append(separator);
                        }
                        result.Append(Hex(cp, width));
                    }
                }
                else
                {
                    for (int i = 0; i < s.Length; ++i)
                    {
                        if (i != 0)
                        {
                            result.Append(separator);
                        }
                        result.Append(Hex(s[i], width));
                    }
                }
                return result;
            }
            catch (IOException e)
            {
                throw new IcuArgumentException(e);
            }
		}
		
        /// <summary>
        /// Convert a string to separated groups of hex uppercase
        /// digits.  E.g., hex('ab'...) => "0041,0042".  Append the output
        /// to the given <see cref="IAppendable"/>.
        /// </summary>
        internal static T Hex<T>(StringBuilder s, int width, StringBuilder separator, bool useCodePoints, T result) where T : IAppendable
        {
            try
            {
                if (useCodePoints)
                {
                    int cp;
                    for (int i = 0; i < s.Length; i += UTF16.GetCharCount(cp))
                    {
                        cp = Character.CodePointAt(s, i);
                        if (i != 0)
                        {
                            result.Append(separator);
                        }
                        result.Append(Hex(cp, width));
                    }
                }
                else
                {
                    for (int i = 0; i < s.Length; ++i)
                    {
                        if (i != 0)
                        {
                            result.Append(separator);
                        }
                        result.Append(Hex(s[i], width));
                    }
                }
                return result;
            }
            catch (IOException e)
            {
                throw new IcuArgumentException(e);
            }
		}
		
        /// <summary>
        /// Convert a string to separated groups of hex uppercase
        /// digits.  E.g., hex('ab'...) => "0041,0042".  Append the output
        /// to the given <see cref="IAppendable"/>.
        /// </summary>
        internal static T Hex<T>(StringBuilder s, int width, char[] separator, bool useCodePoints, T result) where T : IAppendable
        {
            try
            {
                if (useCodePoints)
                {
                    int cp;
                    for (int i = 0; i < s.Length; i += UTF16.GetCharCount(cp))
                    {
                        cp = Character.CodePointAt(s, i);
                        if (i != 0)
                        {
                            result.Append(separator);
                        }
                        result.Append(Hex(cp, width));
                    }
                }
                else
                {
                    for (int i = 0; i < s.Length; ++i)
                    {
                        if (i != 0)
                        {
                            result.Append(separator);
                        }
                        result.Append(Hex(s[i], width));
                    }
                }
                return result;
            }
            catch (IOException e)
            {
                throw new IcuArgumentException(e);
            }
		}
		
        /// <summary>
        /// Convert a string to separated groups of hex uppercase
        /// digits.  E.g., hex('ab'...) => "0041,0042".  Append the output
        /// to the given <see cref="IAppendable"/>.
        /// </summary>
        internal static T Hex<T>(StringBuilder s, int width, ICharSequence separator, bool useCodePoints, T result) where T : IAppendable
        {
            try
            {
                if (useCodePoints)
                {
                    int cp;
                    for (int i = 0; i < s.Length; i += UTF16.GetCharCount(cp))
                    {
                        cp = Character.CodePointAt(s, i);
                        if (i != 0)
                        {
                            result.Append(separator);
                        }
                        result.Append(Hex(cp, width));
                    }
                }
                else
                {
                    for (int i = 0; i < s.Length; ++i)
                    {
                        if (i != 0)
                        {
                            result.Append(separator);
                        }
                        result.Append(Hex(s[i], width));
                    }
                }
                return result;
            }
            catch (IOException e)
            {
                throw new IcuArgumentException(e);
            }
		}
					
        /// <summary>
        /// Convert a string to separated groups of hex uppercase
        /// digits.  E.g., hex('ab'...) => "0041,0042".  Append the output
        /// to the given <see cref="IAppendable"/>.
        /// </summary>
        internal static T Hex<T>(char[] s, int width, string separator, bool useCodePoints, T result) where T : IAppendable
        {
            try
            {
                if (useCodePoints)
                {
                    int cp;
                    for (int i = 0; i < s.Length; i += UTF16.GetCharCount(cp))
                    {
                        cp = Character.CodePointAt(s, i);
                        if (i != 0)
                        {
                            result.Append(separator);
                        }
                        result.Append(Hex(cp, width));
                    }
                }
                else
                {
                    for (int i = 0; i < s.Length; ++i)
                    {
                        if (i != 0)
                        {
                            result.Append(separator);
                        }
                        result.Append(Hex(s[i], width));
                    }
                }
                return result;
            }
            catch (IOException e)
            {
                throw new IcuArgumentException(e);
            }
		}
		
        /// <summary>
        /// Convert a string to separated groups of hex uppercase
        /// digits.  E.g., hex('ab'...) => "0041,0042".  Append the output
        /// to the given <see cref="IAppendable"/>.
        /// </summary>
        internal static T Hex<T>(char[] s, int width, StringBuilder separator, bool useCodePoints, T result) where T : IAppendable
        {
            try
            {
                if (useCodePoints)
                {
                    int cp;
                    for (int i = 0; i < s.Length; i += UTF16.GetCharCount(cp))
                    {
                        cp = Character.CodePointAt(s, i);
                        if (i != 0)
                        {
                            result.Append(separator);
                        }
                        result.Append(Hex(cp, width));
                    }
                }
                else
                {
                    for (int i = 0; i < s.Length; ++i)
                    {
                        if (i != 0)
                        {
                            result.Append(separator);
                        }
                        result.Append(Hex(s[i], width));
                    }
                }
                return result;
            }
            catch (IOException e)
            {
                throw new IcuArgumentException(e);
            }
		}
		
        /// <summary>
        /// Convert a string to separated groups of hex uppercase
        /// digits.  E.g., hex('ab'...) => "0041,0042".  Append the output
        /// to the given <see cref="IAppendable"/>.
        /// </summary>
        internal static T Hex<T>(char[] s, int width, char[] separator, bool useCodePoints, T result) where T : IAppendable
        {
            try
            {
                if (useCodePoints)
                {
                    int cp;
                    for (int i = 0; i < s.Length; i += UTF16.GetCharCount(cp))
                    {
                        cp = Character.CodePointAt(s, i);
                        if (i != 0)
                        {
                            result.Append(separator);
                        }
                        result.Append(Hex(cp, width));
                    }
                }
                else
                {
                    for (int i = 0; i < s.Length; ++i)
                    {
                        if (i != 0)
                        {
                            result.Append(separator);
                        }
                        result.Append(Hex(s[i], width));
                    }
                }
                return result;
            }
            catch (IOException e)
            {
                throw new IcuArgumentException(e);
            }
		}
		
        /// <summary>
        /// Convert a string to separated groups of hex uppercase
        /// digits.  E.g., hex('ab'...) => "0041,0042".  Append the output
        /// to the given <see cref="IAppendable"/>.
        /// </summary>
        internal static T Hex<T>(char[] s, int width, ICharSequence separator, bool useCodePoints, T result) where T : IAppendable
        {
            try
            {
                if (useCodePoints)
                {
                    int cp;
                    for (int i = 0; i < s.Length; i += UTF16.GetCharCount(cp))
                    {
                        cp = Character.CodePointAt(s, i);
                        if (i != 0)
                        {
                            result.Append(separator);
                        }
                        result.Append(Hex(cp, width));
                    }
                }
                else
                {
                    for (int i = 0; i < s.Length; ++i)
                    {
                        if (i != 0)
                        {
                            result.Append(separator);
                        }
                        result.Append(Hex(s[i], width));
                    }
                }
                return result;
            }
            catch (IOException e)
            {
                throw new IcuArgumentException(e);
            }
		}
					
        /// <summary>
        /// Convert a string to separated groups of hex uppercase
        /// digits.  E.g., hex('ab'...) => "0041,0042".  Append the output
        /// to the given <see cref="IAppendable"/>.
        /// </summary>
        internal static T Hex<T>(ICharSequence s, int width, string separator, bool useCodePoints, T result) where T : IAppendable
        {
            try
            {
                if (useCodePoints)
                {
                    int cp;
                    for (int i = 0; i < s.Length; i += UTF16.GetCharCount(cp))
                    {
                        cp = Character.CodePointAt(s, i);
                        if (i != 0)
                        {
                            result.Append(separator);
                        }
                        result.Append(Hex(cp, width));
                    }
                }
                else
                {
                    for (int i = 0; i < s.Length; ++i)
                    {
                        if (i != 0)
                        {
                            result.Append(separator);
                        }
                        result.Append(Hex(s[i], width));
                    }
                }
                return result;
            }
            catch (IOException e)
            {
                throw new IcuArgumentException(e);
            }
		}
		
        /// <summary>
        /// Convert a string to separated groups of hex uppercase
        /// digits.  E.g., hex('ab'...) => "0041,0042".  Append the output
        /// to the given <see cref="IAppendable"/>.
        /// </summary>
        internal static T Hex<T>(ICharSequence s, int width, StringBuilder separator, bool useCodePoints, T result) where T : IAppendable
        {
            try
            {
                if (useCodePoints)
                {
                    int cp;
                    for (int i = 0; i < s.Length; i += UTF16.GetCharCount(cp))
                    {
                        cp = Character.CodePointAt(s, i);
                        if (i != 0)
                        {
                            result.Append(separator);
                        }
                        result.Append(Hex(cp, width));
                    }
                }
                else
                {
                    for (int i = 0; i < s.Length; ++i)
                    {
                        if (i != 0)
                        {
                            result.Append(separator);
                        }
                        result.Append(Hex(s[i], width));
                    }
                }
                return result;
            }
            catch (IOException e)
            {
                throw new IcuArgumentException(e);
            }
		}
		
        /// <summary>
        /// Convert a string to separated groups of hex uppercase
        /// digits.  E.g., hex('ab'...) => "0041,0042".  Append the output
        /// to the given <see cref="IAppendable"/>.
        /// </summary>
        internal static T Hex<T>(ICharSequence s, int width, char[] separator, bool useCodePoints, T result) where T : IAppendable
        {
            try
            {
                if (useCodePoints)
                {
                    int cp;
                    for (int i = 0; i < s.Length; i += UTF16.GetCharCount(cp))
                    {
                        cp = Character.CodePointAt(s, i);
                        if (i != 0)
                        {
                            result.Append(separator);
                        }
                        result.Append(Hex(cp, width));
                    }
                }
                else
                {
                    for (int i = 0; i < s.Length; ++i)
                    {
                        if (i != 0)
                        {
                            result.Append(separator);
                        }
                        result.Append(Hex(s[i], width));
                    }
                }
                return result;
            }
            catch (IOException e)
            {
                throw new IcuArgumentException(e);
            }
		}
		
        /// <summary>
        /// Convert a string to separated groups of hex uppercase
        /// digits.  E.g., hex('ab'...) => "0041,0042".  Append the output
        /// to the given <see cref="IAppendable"/>.
        /// </summary>
        internal static T Hex<T>(ICharSequence s, int width, ICharSequence separator, bool useCodePoints, T result) where T : IAppendable
        {
            try
            {
                if (useCodePoints)
                {
                    int cp;
                    for (int i = 0; i < s.Length; i += UTF16.GetCharCount(cp))
                    {
                        cp = Character.CodePointAt(s, i);
                        if (i != 0)
                        {
                            result.Append(separator);
                        }
                        result.Append(Hex(cp, width));
                    }
                }
                else
                {
                    for (int i = 0; i < s.Length; ++i)
                    {
                        if (i != 0)
                        {
                            result.Append(separator);
                        }
                        result.Append(Hex(s[i], width));
                    }
                }
                return result;
            }
            catch (IOException e)
            {
                throw new IcuArgumentException(e);
            }
		}
				
        /// <summary>
        /// Convert a string to comma-separated groups of 4 hex uppercase
        /// digits.  E.g., hex('ab') => "0041,0042".
        /// </summary>
        public static string Hex(string s, int width, string separator)
        {
            return Hex(s, width, separator, true, new StringBuilder()).ToString();
        }
	
        /// <summary>
        /// Convert a string to comma-separated groups of 4 hex uppercase
        /// digits.  E.g., hex('ab') => "0041,0042".
        /// </summary>
        public static string Hex(string s, int width, StringBuilder separator)
        {
            return Hex(s, width, separator, true, new StringBuilder()).ToString();
        }
	
        /// <summary>
        /// Convert a string to comma-separated groups of 4 hex uppercase
        /// digits.  E.g., hex('ab') => "0041,0042".
        /// </summary>
        public static string Hex(string s, int width, char[] separator)
        {
            return Hex(s, width, separator, true, new StringBuilder()).ToString();
        }
	
        /// <summary>
        /// Convert a string to comma-separated groups of 4 hex uppercase
        /// digits.  E.g., hex('ab') => "0041,0042".
        /// </summary>
        internal static string Hex(string s, int width, ICharSequence separator)
        {
            return Hex(s, width, separator, true, new StringBuilder()).ToString();
        }
		
        /// <summary>
        /// Convert a string to comma-separated groups of 4 hex uppercase
        /// digits.  E.g., hex('ab') => "0041,0042".
        /// </summary>
        public static string Hex(StringBuilder s, int width, string separator)
        {
            return Hex(s, width, separator, true, new StringBuilder()).ToString();
        }
	
        /// <summary>
        /// Convert a string to comma-separated groups of 4 hex uppercase
        /// digits.  E.g., hex('ab') => "0041,0042".
        /// </summary>
        public static string Hex(StringBuilder s, int width, StringBuilder separator)
        {
            return Hex(s, width, separator, true, new StringBuilder()).ToString();
        }
	
        /// <summary>
        /// Convert a string to comma-separated groups of 4 hex uppercase
        /// digits.  E.g., hex('ab') => "0041,0042".
        /// </summary>
        public static string Hex(StringBuilder s, int width, char[] separator)
        {
            return Hex(s, width, separator, true, new StringBuilder()).ToString();
        }
	
        /// <summary>
        /// Convert a string to comma-separated groups of 4 hex uppercase
        /// digits.  E.g., hex('ab') => "0041,0042".
        /// </summary>
        internal static string Hex(StringBuilder s, int width, ICharSequence separator)
        {
            return Hex(s, width, separator, true, new StringBuilder()).ToString();
        }
		
        /// <summary>
        /// Convert a string to comma-separated groups of 4 hex uppercase
        /// digits.  E.g., hex('ab') => "0041,0042".
        /// </summary>
        public static string Hex(char[] s, int width, string separator)
        {
            return Hex(s, width, separator, true, new StringBuilder()).ToString();
        }
	
        /// <summary>
        /// Convert a string to comma-separated groups of 4 hex uppercase
        /// digits.  E.g., hex('ab') => "0041,0042".
        /// </summary>
        public static string Hex(char[] s, int width, StringBuilder separator)
        {
            return Hex(s, width, separator, true, new StringBuilder()).ToString();
        }
	
        /// <summary>
        /// Convert a string to comma-separated groups of 4 hex uppercase
        /// digits.  E.g., hex('ab') => "0041,0042".
        /// </summary>
        public static string Hex(char[] s, int width, char[] separator)
        {
            return Hex(s, width, separator, true, new StringBuilder()).ToString();
        }
	
        /// <summary>
        /// Convert a string to comma-separated groups of 4 hex uppercase
        /// digits.  E.g., hex('ab') => "0041,0042".
        /// </summary>
        internal static string Hex(char[] s, int width, ICharSequence separator)
        {
            return Hex(s, width, separator, true, new StringBuilder()).ToString();
        }
		
        /// <summary>
        /// Convert a string to comma-separated groups of 4 hex uppercase
        /// digits.  E.g., hex('ab') => "0041,0042".
        /// </summary>
        internal static string Hex(ICharSequence s, int width, string separator)
        {
            return Hex(s, width, separator, true, new StringBuilder()).ToString();
        }
	
        /// <summary>
        /// Convert a string to comma-separated groups of 4 hex uppercase
        /// digits.  E.g., hex('ab') => "0041,0042".
        /// </summary>
        internal static string Hex(ICharSequence s, int width, StringBuilder separator)
        {
            return Hex(s, width, separator, true, new StringBuilder()).ToString();
        }
	
        /// <summary>
        /// Convert a string to comma-separated groups of 4 hex uppercase
        /// digits.  E.g., hex('ab') => "0041,0042".
        /// </summary>
        internal static string Hex(ICharSequence s, int width, char[] separator)
        {
            return Hex(s, width, separator, true, new StringBuilder()).ToString();
        }
	
        /// <summary>
        /// Convert a string to comma-separated groups of 4 hex uppercase
        /// digits.  E.g., hex('ab') => "0041,0042".
        /// </summary>
        internal static string Hex(ICharSequence s, int width, ICharSequence separator)
        {
            return Hex(s, width, separator, true, new StringBuilder()).ToString();
        }
	
        /// <summary>
        /// Append the digits of a positive integer to the given
        /// <see cref="StringBuilder"/> in the given radix. This is
        /// done recursively since it is easiest to generate the low-
        /// order digit first, but it must be appended last.
        /// </summary>
        /// <param name="result">The <see cref="StringBuilder"/> to append to.</param>
        /// <param name="n">The positive integer.</param>
        /// <param name="radix">The radix, from 2 to 36 inclusive.</param>
        /// <param name="minDigits">The minimum number of digits to append.</param>
        private static void RecursiveAppendNumber(StringBuilder result, int n,
            int radix, int minDigits)
        {
            try
            {
                int digit = n % radix;

                if (n >= radix || minDigits > 1)
                {
                    RecursiveAppendNumber(result, n / radix, radix, minDigits - 1);
                }
                result.Append(DIGITS[digit]);
            }
            catch (IOException e)
            {
                throw new IcuArgumentException(e);
            }
        }

        /// <summary>
        /// Append the digits of a positive integer to the given
        /// <see cref="IAppendable"/> in the given radix. This is
        /// done recursively since it is easiest to generate the low-
        /// order digit first, but it must be appended last.
        /// </summary>
        /// <param name="result">The <see cref="IAppendable"/> to append to.</param>
        /// <param name="n">The positive integer.</param>
        /// <param name="radix">The radix, from 2 to 36 inclusive.</param>
        /// <param name="minDigits">The minimum number of digits to append.</param>
        private static void RecursiveAppendNumber(IAppendable result, int n,
            int radix, int minDigits)
        {
            try
            {
                int digit = n % radix;

                if (n >= radix || minDigits > 1)
                {
                    RecursiveAppendNumber(result, n / radix, radix, minDigits - 1);
                }
                result.Append(DIGITS[digit]);
            }
            catch (IOException e)
            {
                throw new IcuArgumentException(e);
            }
        }

        /// <summary>
        /// Append a number to the given <see cref="StringBuilder"/> in the given radix.
        /// Standard digits '0'-'9' are used and letters 'A'-'Z' for
        /// radices 11 through 36.
        /// </summary>
        /// <param name="result">The digits of the number are appended here.</param>
        /// <param name="n">The number to be converted to digits; may be negative. If negative, a '-' is prepended to the digits.</param>
        /// <param name="radix">A radix from 2 to 36 inclusive.</param>
        /// <param name="minDigits">
        /// The minimum number of digits, not including
        /// any '-', to produce.  Values less than 2 have no effect.  One
        /// digit is always emitted regardless of this parameter.
        /// </param>
        /// <returns>A reference to result.</returns>
        public static StringBuilder AppendNumber(StringBuilder result, int n,
            int radix, int minDigits)
        {
            try
            {
                if (radix < 2 || radix > 36)
                {
                    throw new ArgumentException("Illegal radix " + radix);
                }


                int abs = n;

                if (n < 0)
                {
                    abs = -n;
                    result.Append("-");
                }

                RecursiveAppendNumber(result, abs, radix, minDigits);

                return result;
            }
            catch (IOException e)
            {
                throw new IcuArgumentException(e);
            }
        }

        /// <summary>
        /// Append a number to the given <see cref="IAppendable"/> in the given radix.
        /// Standard digits '0'-'9' are used and letters 'A'-'Z' for
        /// radices 11 through 36.
        /// </summary>
        /// <param name="result">The digits of the number are appended here.</param>
        /// <param name="n">The number to be converted to digits; may be negative. If negative, a '-' is prepended to the digits.</param>
        /// <param name="radix">A radix from 2 to 36 inclusive.</param>
        /// <param name="minDigits">
        /// The minimum number of digits, not including
        /// any '-', to produce.  Values less than 2 have no effect.  One
        /// digit is always emitted regardless of this parameter.
        /// </param>
        /// <returns>A reference to result.</returns>
        internal static T AppendNumber<T>(T result, int n,
            int radix, int minDigits) where T : IAppendable
        {
            try
            {
                if (radix < 2 || radix > 36)
                {
                    throw new ArgumentException("Illegal radix " + radix);
                }


                int abs = n;

                if (n < 0)
                {
                    abs = -n;
                    result.Append("-");
                }

                RecursiveAppendNumber(result, abs, radix, minDigits);

                return result;
            }
            catch (IOException e)
            {
                throw new IcuArgumentException(e);
            }
        }

        /// <summary>
        /// Escape unprintable characters using \uxxxx notation
        /// for U+0000 to U+FFFF and \Uxxxxxxxx for U+10000 and
        /// above. If the character is printable ASCII, then do nothing
        /// and return FALSE. Otherwise, append the escaped notation and
        /// return TRUE.
        /// </summary>
        public static bool EscapeUnprintable(StringBuilder result, int c)
        {
            try
            {
                if (IsUnprintable(c))
                {
                    result.Append('\\');
                    if ((c & ~0xFFFF) != 0)
                    {
                        result.Append('U');
                        result.Append(DIGITS[0xF & (c >> 28)]);
                        result.Append(DIGITS[0xF & (c >> 24)]);
                        result.Append(DIGITS[0xF & (c >> 20)]);
                        result.Append(DIGITS[0xF & (c >> 16)]);
                    }
                    else
                    {
                        result.Append('u');
                    }
                    result.Append(DIGITS[0xF & (c >> 12)]);
                    result.Append(DIGITS[0xF & (c >> 8)]);
                    result.Append(DIGITS[0xF & (c >> 4)]);
                    result.Append(DIGITS[0xF & c]);
                    return true;
                }
                return false;
            }
            catch (IOException e)
            {
                throw new IcuArgumentException(e);
            }
        }

        /// <summary>
        /// Escape unprintable characters using \uxxxx notation
        /// for U+0000 to U+FFFF and \Uxxxxxxxx for U+10000 and
        /// above. If the character is printable ASCII, then do nothing
        /// and return FALSE. Otherwise, append the escaped notation and
        /// return TRUE.
        /// </summary>
        internal static bool EscapeUnprintable(IAppendable result, int c)
        {
            try
            {
                if (IsUnprintable(c))
                {
                    result.Append('\\');
                    if ((c & ~0xFFFF) != 0)
                    {
                        result.Append('U');
                        result.Append(DIGITS[0xF & (c >> 28)]);
                        result.Append(DIGITS[0xF & (c >> 24)]);
                        result.Append(DIGITS[0xF & (c >> 20)]);
                        result.Append(DIGITS[0xF & (c >> 16)]);
                    }
                    else
                    {
                        result.Append('u');
                    }
                    result.Append(DIGITS[0xF & (c >> 12)]);
                    result.Append(DIGITS[0xF & (c >> 8)]);
                    result.Append(DIGITS[0xF & (c >> 4)]);
                    result.Append(DIGITS[0xF & c]);
                    return true;
                }
                return false;
            }
            catch (IOException e)
            {
                throw new IcuArgumentException(e);
            }
        }
	}
}