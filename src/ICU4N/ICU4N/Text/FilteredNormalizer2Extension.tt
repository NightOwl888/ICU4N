<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="System.Xml.Linq" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Xml.Linq" #>
<#@ import namespace="System.Xml.XPath" #>
<#@ output extension=".cs" #>
<#
	// Load common settings from the XML file
	string settingsPath = System.IO.Path.Combine(Host.ResolveAssemblyReference("$(SolutionDir)"), "CodeGenerationSettings.xml");
	XDocument document = XDocument.Load(settingsPath);
    string[] charSequences = document.XPathSelectElements(@"//codeGen/charSequences/charSequence").Select(x => x.Value).ToArray();
	string charSequenceAccessibility = document.XPathSelectElement(@"//codeGen/charSequenceAccessibility").Value;
	string[] appendables = document.XPathSelectElements(@"//codeGen/appendables/appendable").Select(x => x.Value).ToArray();
#>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using ICU4N.Support.Text;
using ICU4N.Util;
using System;
using System.IO;
using System.Text;

namespace ICU4N.Text
{
    public partial class FilteredNormalizer2 : Normalizer2
    {
<# foreach (var charSequence in charSequences) { #>

        /// <summary>
        /// Writes the normalized form of the source string to the destination string
        /// (replacing its contents) and returns the destination string.
        /// </summary>
        /// <param name="src">Source string.</param>
        /// <param name="dest">Destination string; its contents is replaced with normalized <paramref name="src"/>.</param>
        /// <returns><paramref name="dest"/></returns>
        /// <stable>ICU 4.4</stable>
        <#=charSequence=="ICharSequence" ? charSequenceAccessibility : "public"#> override StringBuilder Normalize(<#=charSequence#> src, StringBuilder dest)
        {
<# if (charSequence == "ICharSequence") { #>
            if (src is StringBuilderCharSequence && ((StringBuilderCharSequence)src).StringBuilder == dest)
            {
                throw new ArgumentException("'src' cannot be the same StringBuilder instance as 'dest'");
            }
<# } else if (charSequence == "StringBuilder") { #>
			if (src == dest)
            {
                throw new ArgumentException("'src' cannot be the same StringBuilder instance as 'dest'");
            }
<# } #>
            dest.Length = 0;
            Normalize(src, dest, SpanCondition.Simple);
            return dest;
        }
<# } #>
<# foreach (var charSequence in charSequences) { #>

        /// <summary>
        /// Appends the normalized form of the second string to the first string
        /// (merging them at the boundary) and returns the first string.
        /// The result is normalized if the first string was normalized.
        /// The first and second strings must be different objects.
        /// </summary>
        /// <param name="first">First string, should be normalized.</param>
        /// <param name="second">Second string, will be normalized.</param>
        /// <returns><paramref name="first"/></returns>
        <#=charSequence=="ICharSequence" ? charSequenceAccessibility : "public"#> override StringBuilder NormalizeSecondAndAppend(
            StringBuilder first, <#=charSequence#> second)
        {
            return NormalizeSecondAndAppend(first, second, true);
        }
<# } #>
<# foreach (var charSequence in charSequences) { #>

        /// <summary>
        /// Appends the second string to the first string
        /// (merging them at the boundary) and returns the first string.
        /// The result is normalized if both the strings were normalized.
        /// The first and second strings must be different objects.
        /// </summary>
        /// <param name="first">First string, should be normalized.</param>
        /// <param name="second">Second string, should be normalized.</param>
        /// <returns><paramref name="first"/></returns>
        /// <stable>ICU 4.4</stable>
        <#=charSequence=="ICharSequence" ? charSequenceAccessibility : "public"#> override StringBuilder Append(StringBuilder first, <#=charSequence#> second)
        {
            return NormalizeSecondAndAppend(first, second, false);
        }
<# } #>
<# foreach (var charSequence in charSequences) { #>

        /// <summary>
        /// Tests if the string is normalized.
        /// Internally, in cases where the <see cref="QuickCheck(<#=charSequence#>)"/> method would return "maybe"
        /// (which is only possible for the two COMPOSE modes) this method
        /// resolves to "yes" or "no" to provide a definitive result,
        /// at the cost of doing more work in those cases.
        /// </summary>
        /// <param name="s">Input string.</param>
        /// <returns>true if s is normalized.</returns>
        /// <stable>ICU 4.4</stable>
        <#=charSequence=="ICharSequence" ? charSequenceAccessibility : "public"#> override bool IsNormalized(<#=charSequence#> s)
        {
            SpanCondition spanCondition = SpanCondition.Simple;
            for (int prevSpanLimit = 0; prevSpanLimit < s.Length;)
            {
                int spanLimit = set.Span(s, prevSpanLimit, spanCondition);
                if (spanCondition == SpanCondition.NotContained)
                {
                    spanCondition = SpanCondition.Simple;
                }
                else
                {
                    if (!norm2.IsNormalized(s.SubSequence(prevSpanLimit, spanLimit)))
                    {
                        return false;
                    }
                    spanCondition = SpanCondition.NotContained;
                }
                prevSpanLimit = spanLimit;
            }
            return true;
        }
<# } #>
<# foreach (var charSequence in charSequences) { #>

        /// <summary>
        /// Tests if the string is normalized.
        /// For the two COMPOSE modes, the result could be "maybe" in cases that
        /// would take a little more work to resolve definitively.
        /// Use <see cref="SpanQuickCheckYes(<#=charSequence#>)"/> and
        /// <see cref="NormalizeSecondAndAppend(StringBuilder, <#=charSequence#>)"/> for a faster
        /// combination of quick check + normalization, to avoid
        /// re-checking the "yes" prefix.
        /// </summary>
        /// <param name="s">Input string.</param>
        /// <returns>The quick check result.</returns>
        /// <stable>ICU 4.4</stable>
        <#=charSequence=="ICharSequence" ? charSequenceAccessibility : "public"#> override NormalizerQuickCheckResult QuickCheck(<#=charSequence#> s)
        {
            NormalizerQuickCheckResult result = NormalizerQuickCheckResult.Yes;
            SpanCondition spanCondition = SpanCondition.Simple;
            for (int prevSpanLimit = 0; prevSpanLimit < s.Length;)
            {
                int spanLimit = set.Span(s, prevSpanLimit, spanCondition);
                if (spanCondition == SpanCondition.NotContained)
                {
                    spanCondition = SpanCondition.Simple;
                }
                else
                {
                    NormalizerQuickCheckResult qcResult =
                        norm2.QuickCheck(s.SubSequence(prevSpanLimit, spanLimit));
                    if (qcResult == NormalizerQuickCheckResult.No)
                    {
                        return qcResult;
                    }
                    else if (qcResult == NormalizerQuickCheckResult.Maybe)
                    {
                        result = qcResult;
                    }
                    spanCondition = SpanCondition.NotContained;
                }
                prevSpanLimit = spanLimit;
            }
            return result;
        }
<# } #>
<# foreach (var charSequence in charSequences) { #>

        /// <summary>
        /// Returns the end of the normalized substring of the input string.
        /// In other words, with <c>end=SpanQuickCheckYes(s);</c>
        /// the substring <c>s.SubString(0, end)</c>
        /// will pass the quick check with a "yes" result.
        /// </summary>
        /// <remarks>
        /// The returned end index is usually one or more characters before the
        /// "no" or "maybe" character: The end index is at a normalization boundary.
        /// (See the class documentation for more about normalization boundaries.)
        /// <para/>
        /// When the goal is a normalized string and most input strings are expected
        /// to be normalized already, then call this method,
        /// and if it returns a prefix shorter than the input string,
        /// copy that prefix and use <see cref="NormalizeSecondAndAppend(StringBuilder, <#=charSequence#>)"/> for the remainder.
        /// </remarks>
        /// <param name="s">Input string.</param>
        /// <returns>"yes" span end index.</returns>
        /// <stable>ICU 4.4</stable>
        <#=charSequence=="ICharSequence" ? charSequenceAccessibility : "public"#> override int SpanQuickCheckYes(<#=charSequence#> s)
        {
            SpanCondition spanCondition = SpanCondition.Simple;
            for (int prevSpanLimit = 0; prevSpanLimit < s.Length;)
            {
                int spanLimit = set.Span(s, prevSpanLimit, spanCondition);
                if (spanCondition == SpanCondition.NotContained)
                {
                    spanCondition = SpanCondition.Simple;
                }
                else
                {
                    int yesLimit =
                        prevSpanLimit +
                        norm2.SpanQuickCheckYes(s.SubSequence(prevSpanLimit, spanLimit));
                    if (yesLimit < spanLimit)
                    {
                        return yesLimit;
                    }
                    spanCondition = SpanCondition.NotContained;
                }
                prevSpanLimit = spanLimit;
            }
            return s.Length;
        }
<# } #>
<# foreach (var appendable in appendables) { #>
	<# foreach (var charSequence in charSequences) { #>

        // Internal: No argument checking, and appends to dest.
        // Pass as input spanCondition the one that is likely to yield a non-zero
        // span length at the start of src.
        // For set=[:age=3.2:], since almost all common characters were in Unicode 3.2,
        // <see cref="SpanCondition.Simple"/> should be passed in for the start of src
        // and <see cref="SpanCondition.NotContained"/> should be passed in if we continue after
        // an in-filter prefix.
        private <#=appendable#> Normalize(<#=charSequence#> src, <#=appendable#> dest,
                                     SpanCondition spanCondition)
        {
            // Don't throw away destination buffer between iterations.
            StringBuilder tempDest = new StringBuilder();
            try
            {
                for (int prevSpanLimit = 0; prevSpanLimit < src.Length;)
                {
                    int spanLimit = set.Span(src, prevSpanLimit, spanCondition);
                    int spanLength = spanLimit - prevSpanLimit;
                    if (spanCondition == SpanCondition.NotContained)
                    {
                        if (spanLength != 0)
                        {
<# if (appendable == "IAppendable") { #>
							dest.Append(src, prevSpanLimit, spanLimit);
<# } else { #>
                            dest.Append(src, prevSpanLimit, spanLimit - prevSpanLimit); // ICU4N: Changed 3rd parameter
<# } #>
                        }
                        spanCondition = SpanCondition.Simple;
                    }
                    else
                    {
                        if (spanLength != 0)
                        {
                            // Not norm2.normalizeSecondAndAppend() because we do not want
                            // to modify the non-filter part of dest.
                            dest.Append(norm2.Normalize(src.SubSequence(prevSpanLimit, spanLimit), tempDest));
                        }
                        spanCondition = SpanCondition.NotContained;
                    }
                    prevSpanLimit = spanLimit;
                }
            }
            catch (IOException e)
            {
                throw new ICUUncheckedIOException(e);
            }
            return dest;
        }
	<# } #>
<# } #>
<# foreach (var charSequence in charSequences) { #>

        private StringBuilder NormalizeSecondAndAppend(StringBuilder first, <#=charSequence#> second,
                                                       bool doNormalize)
        {
<# if (charSequence == "ICharSequence") { #>
            if (second is StringBuilderCharSequence && ((StringBuilderCharSequence)second).StringBuilder == first)
            {
                throw new ArgumentException("'first' cannot be the same StringBuilder instance as 'second'");
            }
<# } else if (charSequence == "StringBuilder") { #>
			if (first == second)
            {
                throw new ArgumentException("'first' cannot be the same StringBuilder instance as 'second'");
            }
<# } #>
            if (first.Length == 0)
            {
                if (doNormalize)
                {
                    return Normalize(second, first);
                }
                else
                {
                    return first.Append(second);
                }
            }
            // merge the in-filter suffix of the first string with the in-filter prefix of the second
            int prefixLimit = set.Span(second, 0, SpanCondition.Simple);
            if (prefixLimit != 0)
            {
                ICharSequence prefix = second.SubSequence(0, prefixLimit);
                int suffixStart = set.SpanBack(first, 0x7fffffff, SpanCondition.Simple);
                if (suffixStart == 0)
                {
                    if (doNormalize)
                    {
                        norm2.NormalizeSecondAndAppend(first, prefix);
                    }
                    else
                    {
                        norm2.Append(first, prefix);
                    }
                }
                else
                {
                    StringBuilder middle = new StringBuilder(
                            first.ToString(suffixStart, first.Length - suffixStart));
                    if (doNormalize)
                    {
                        norm2.NormalizeSecondAndAppend(middle, prefix);
                    }
                    else
                    {
                        norm2.Append(middle, prefix);
                    }
                    first.Delete(suffixStart, 0x7fffffff).Append(middle);
                }
            }
            if (prefixLimit < second.Length)
            {
                ICharSequence rest = second.SubSequence(prefixLimit, second.Length);
                if (doNormalize)
                {
                    Normalize(rest, first.ToAppendable(), SpanCondition.NotContained);
                }
                else
                {
                    first.Append(rest);
                }
            }
            return first;
        }
<# } #>

	}
}