//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using ICU4N.Impl;
using ICU4N.Support.Text;
using System.Text;

namespace ICU4N.Text
{
    public sealed partial class Normalizer
    {
        private sealed partial class CharsAppendable : IAppendable
        {

            public IAppendable Append(string s)
            {
                return Append(s, 0, s.Length);
            }

            public IAppendable Append(string s, int sStart, int sLimit)
            {
                int len = sLimit - sStart;
                if (len <= (limit - offset))
                {
                    while (sStart < sLimit)
                    {  // TODO: Is there a better way to copy the characters?
                        chars[offset++] = s[sStart++];
                    }
                }
                else
                {
                    offset += len;
                }
                return this;
            }

            public IAppendable Append(StringBuilder s)
            {
                return Append(s, 0, s.Length);
            }

            public IAppendable Append(StringBuilder s, int sStart, int sLimit)
            {
                int len = sLimit - sStart;
                if (len <= (limit - offset))
                {
                    while (sStart < sLimit)
                    {  // TODO: Is there a better way to copy the characters?
                        chars[offset++] = s[sStart++];
                    }
                }
                else
                {
                    offset += len;
                }
                return this;
            }

            public IAppendable Append(char[] s)
            {
                return Append(s, 0, s.Length);
            }

            public IAppendable Append(char[] s, int sStart, int sLimit)
            {
                int len = sLimit - sStart;
                if (len <= (limit - offset))
                {
                    while (sStart < sLimit)
                    {  // TODO: Is there a better way to copy the characters?
                        chars[offset++] = s[sStart++];
                    }
                }
                else
                {
                    offset += len;
                }
                return this;
            }

            public IAppendable Append(ICharSequence s)
            {
                return Append(s, 0, s.Length);
            }

            public IAppendable Append(ICharSequence s, int sStart, int sLimit)
            {
                int len = sLimit - sStart;
                if (len <= (limit - offset))
                {
                    while (sStart < sLimit)
                    {  // TODO: Is there a better way to copy the characters?
                        chars[offset++] = s[sStart++];
                    }
                }
                else
                {
                    offset += len;
                }
                return this;
            }

        }
    }
}