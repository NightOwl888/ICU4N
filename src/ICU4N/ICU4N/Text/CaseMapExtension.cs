//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using ICU4N.Impl;
using ICU4N.Support.Text;
using System.Globalization;
using System.Text;

namespace ICU4N.Text
{
    public abstract partial class CaseMap
    {
        public sealed partial class Lower : CaseMap
        {

            // ICU4N specific overload for convenience
            /// <summary>
            /// Lowercases a string.
            /// Casing is locale-dependent and context-sensitive.
            /// The result may be longer or shorter than the original.
            /// </summary>
            /// <param name="src">The original string.</param>
            /// <returns>The result string.</returns>
            /// <seealso cref="Lang.UCharacter.ToLower(CultureInfo, string)"/>
            /// <draft>ICU4N 60.1.0</draft>
            /// <provisional>This API might change or be removed in a future release.</provisional>
            public string Apply(string src)
            {
                return CaseMapImpl.ToLower(GetCaseLocale(null), internalOptions, src);
            }

            // ICU4N specific overload for convenience
            /// <summary>
            /// Lowercases a string.
            /// Casing is locale-dependent and context-sensitive.
            /// The result may be longer or shorter than the original.
            /// </summary>
            /// <param name="src">The original string.</param>
            /// <returns>The result string.</returns>
            /// <seealso cref="Lang.UCharacter.ToLower(CultureInfo, string)"/>
            /// <draft>ICU4N 60.1.0</draft>
            /// <provisional>This API might change or be removed in a future release.</provisional>
            public string Apply(StringBuilder src)
            {
                return CaseMapImpl.ToLower(GetCaseLocale(null), internalOptions, src);
            }

            // ICU4N specific overload for convenience
            /// <summary>
            /// Lowercases a string.
            /// Casing is locale-dependent and context-sensitive.
            /// The result may be longer or shorter than the original.
            /// </summary>
            /// <param name="src">The original string.</param>
            /// <returns>The result string.</returns>
            /// <seealso cref="Lang.UCharacter.ToLower(CultureInfo, string)"/>
            /// <draft>ICU4N 60.1.0</draft>
            /// <provisional>This API might change or be removed in a future release.</provisional>
            public string Apply(char[] src)
            {
                return CaseMapImpl.ToLower(GetCaseLocale(null), internalOptions, src);
            }

            // ICU4N specific overload for convenience
            /// <summary>
            /// Lowercases a string.
            /// Casing is locale-dependent and context-sensitive.
            /// The result may be longer or shorter than the original.
            /// </summary>
            /// <param name="src">The original string.</param>
            /// <returns>The result string.</returns>
            /// <seealso cref="Lang.UCharacter.ToLower(CultureInfo, string)"/>
            /// <draft>ICU4N 60.1.0</draft>
            /// <provisional>This API might change or be removed in a future release.</provisional>
            internal string Apply(ICharSequence src)
            {
                return CaseMapImpl.ToLower(GetCaseLocale(null), internalOptions, src);
            }

            /// <summary>
            /// Lowercases a string.
            /// Casing is locale-dependent and context-sensitive.
            /// The result may be longer or shorter than the original.
            /// </summary>
            /// <param name="locale">The locale ID. Can be null for <see cref="CultureInfo.CurrentCulture"/>.</param>
            /// <param name="src">The original string.</param>
            /// <returns>The result string.</returns>
            /// <seealso cref="Lang.UCharacter.ToLower(CultureInfo, string)"/>
            /// <draft>ICU 60</draft>
            /// <provisional>This API might change or be removed in a future release.</provisional>
            public string Apply(CultureInfo locale, string src)
            {
                return CaseMapImpl.ToLower(GetCaseLocale(locale), internalOptions, src);
            }

            /// <summary>
            /// Lowercases a string.
            /// Casing is locale-dependent and context-sensitive.
            /// The result may be longer or shorter than the original.
            /// </summary>
            /// <param name="locale">The locale ID. Can be null for <see cref="CultureInfo.CurrentCulture"/>.</param>
            /// <param name="src">The original string.</param>
            /// <returns>The result string.</returns>
            /// <seealso cref="Lang.UCharacter.ToLower(CultureInfo, string)"/>
            /// <draft>ICU 60</draft>
            /// <provisional>This API might change or be removed in a future release.</provisional>
            public string Apply(CultureInfo locale, StringBuilder src)
            {
                return CaseMapImpl.ToLower(GetCaseLocale(locale), internalOptions, src);
            }

            /// <summary>
            /// Lowercases a string.
            /// Casing is locale-dependent and context-sensitive.
            /// The result may be longer or shorter than the original.
            /// </summary>
            /// <param name="locale">The locale ID. Can be null for <see cref="CultureInfo.CurrentCulture"/>.</param>
            /// <param name="src">The original string.</param>
            /// <returns>The result string.</returns>
            /// <seealso cref="Lang.UCharacter.ToLower(CultureInfo, string)"/>
            /// <draft>ICU 60</draft>
            /// <provisional>This API might change or be removed in a future release.</provisional>
            public string Apply(CultureInfo locale, char[] src)
            {
                return CaseMapImpl.ToLower(GetCaseLocale(locale), internalOptions, src);
            }

            /// <summary>
            /// Lowercases a string.
            /// Casing is locale-dependent and context-sensitive.
            /// The result may be longer or shorter than the original.
            /// </summary>
            /// <param name="locale">The locale ID. Can be null for <see cref="CultureInfo.CurrentCulture"/>.</param>
            /// <param name="src">The original string.</param>
            /// <returns>The result string.</returns>
            /// <seealso cref="Lang.UCharacter.ToLower(CultureInfo, string)"/>
            /// <draft>ICU 60</draft>
            /// <provisional>This API might change or be removed in a future release.</provisional>
            internal string Apply(CultureInfo locale, ICharSequence src)
            {
                return CaseMapImpl.ToLower(GetCaseLocale(locale), internalOptions, src);
            }
    
            // ICU4N specific overload for convenience
            /// <summary>
            /// Lowercases a string and optionally records edits (see <see cref="OmitUnchangedText"/>).
            /// Casing is locale-dependent and context-sensitive.
            /// The result may be longer or shorter than the original.
            /// </summary>
            /// <param name="src">The original string.</param>
            /// <param name="dest">A buffer for the result string. Must not be null.</param>
            /// <param name="edits">Records edits for index mapping, working with styled text,
            /// and getting only changes (if any).
            /// This function calls <see cref="Edits.Reset()"/> first. <paramref name="edits"/> can be null.
            /// </param>
            /// <returns><paramref name="dest"/> with the result string (or only changes) appended.</returns>
            /// <seealso cref="Lang.UCharacter.ToLower(CultureInfo, string)"/>
            /// <draft>ICU4N 60.1.0</draft>
            /// <provisional>This API might change or be removed in a future release.</provisional>
            public StringBuilder Apply(
                string src, StringBuilder dest, Edits edits)
            {
                return CaseMapImpl.ToLower(GetCaseLocale(null), internalOptions, src, dest, edits);
            }
    
            // ICU4N specific overload for convenience
            /// <summary>
            /// Lowercases a string and optionally records edits (see <see cref="OmitUnchangedText"/>).
            /// Casing is locale-dependent and context-sensitive.
            /// The result may be longer or shorter than the original.
            /// </summary>
            /// <param name="src">The original string.</param>
            /// <param name="dest">A buffer for the result string. Must not be null.</param>
            /// <param name="edits">Records edits for index mapping, working with styled text,
            /// and getting only changes (if any).
            /// This function calls <see cref="Edits.Reset()"/> first. <paramref name="edits"/> can be null.
            /// </param>
            /// <returns><paramref name="dest"/> with the result string (or only changes) appended.</returns>
            /// <seealso cref="Lang.UCharacter.ToLower(CultureInfo, string)"/>
            /// <draft>ICU4N 60.1.0</draft>
            /// <provisional>This API might change or be removed in a future release.</provisional>
            public StringBuilder Apply(
                StringBuilder src, StringBuilder dest, Edits edits)
            {
                return CaseMapImpl.ToLower(GetCaseLocale(null), internalOptions, src, dest, edits);
            }
    
            // ICU4N specific overload for convenience
            /// <summary>
            /// Lowercases a string and optionally records edits (see <see cref="OmitUnchangedText"/>).
            /// Casing is locale-dependent and context-sensitive.
            /// The result may be longer or shorter than the original.
            /// </summary>
            /// <param name="src">The original string.</param>
            /// <param name="dest">A buffer for the result string. Must not be null.</param>
            /// <param name="edits">Records edits for index mapping, working with styled text,
            /// and getting only changes (if any).
            /// This function calls <see cref="Edits.Reset()"/> first. <paramref name="edits"/> can be null.
            /// </param>
            /// <returns><paramref name="dest"/> with the result string (or only changes) appended.</returns>
            /// <seealso cref="Lang.UCharacter.ToLower(CultureInfo, string)"/>
            /// <draft>ICU4N 60.1.0</draft>
            /// <provisional>This API might change or be removed in a future release.</provisional>
            public StringBuilder Apply(
                char[] src, StringBuilder dest, Edits edits)
            {
                return CaseMapImpl.ToLower(GetCaseLocale(null), internalOptions, src, dest, edits);
            }
    
            // ICU4N specific overload for convenience
            /// <summary>
            /// Lowercases a string and optionally records edits (see <see cref="OmitUnchangedText"/>).
            /// Casing is locale-dependent and context-sensitive.
            /// The result may be longer or shorter than the original.
            /// </summary>
            /// <param name="src">The original string.</param>
            /// <param name="dest">A buffer for the result string. Must not be null.</param>
            /// <param name="edits">Records edits for index mapping, working with styled text,
            /// and getting only changes (if any).
            /// This function calls <see cref="Edits.Reset()"/> first. <paramref name="edits"/> can be null.
            /// </param>
            /// <returns><paramref name="dest"/> with the result string (or only changes) appended.</returns>
            /// <seealso cref="Lang.UCharacter.ToLower(CultureInfo, string)"/>
            /// <draft>ICU4N 60.1.0</draft>
            /// <provisional>This API might change or be removed in a future release.</provisional>
            internal StringBuilder Apply(
                ICharSequence src, StringBuilder dest, Edits edits)
            {
                return CaseMapImpl.ToLower(GetCaseLocale(null), internalOptions, src, dest, edits);
            }
        
            // ICU4N specific overload for convenience
            /// <summary>
            /// Lowercases a string and optionally records edits (see <see cref="OmitUnchangedText"/>).
            /// Casing is locale-dependent and context-sensitive.
            /// The result may be longer or shorter than the original.
            /// </summary>
            /// <param name="src">The original string.</param>
            /// <param name="dest">A buffer for the result string. Must not be null.</param>
            /// <param name="edits">Records edits for index mapping, working with styled text,
            /// and getting only changes (if any).
            /// This function calls <see cref="Edits.Reset()"/> first. <paramref name="edits"/> can be null.
            /// </param>
            /// <returns><paramref name="dest"/> with the result string (or only changes) appended.</returns>
            /// <seealso cref="Lang.UCharacter.ToLower(CultureInfo, string)"/>
            /// <draft>ICU4N 60.1.0</draft>
            /// <provisional>This API might change or be removed in a future release.</provisional>
            internal T Apply<T>(
                string src, T dest, Edits edits) where T : IAppendable
            {
                return CaseMapImpl.ToLower(GetCaseLocale(null), internalOptions, src, dest, edits);
            }
    
            // ICU4N specific overload for convenience
            /// <summary>
            /// Lowercases a string and optionally records edits (see <see cref="OmitUnchangedText"/>).
            /// Casing is locale-dependent and context-sensitive.
            /// The result may be longer or shorter than the original.
            /// </summary>
            /// <param name="src">The original string.</param>
            /// <param name="dest">A buffer for the result string. Must not be null.</param>
            /// <param name="edits">Records edits for index mapping, working with styled text,
            /// and getting only changes (if any).
            /// This function calls <see cref="Edits.Reset()"/> first. <paramref name="edits"/> can be null.
            /// </param>
            /// <returns><paramref name="dest"/> with the result string (or only changes) appended.</returns>
            /// <seealso cref="Lang.UCharacter.ToLower(CultureInfo, string)"/>
            /// <draft>ICU4N 60.1.0</draft>
            /// <provisional>This API might change or be removed in a future release.</provisional>
            internal T Apply<T>(
                StringBuilder src, T dest, Edits edits) where T : IAppendable
            {
                return CaseMapImpl.ToLower(GetCaseLocale(null), internalOptions, src, dest, edits);
            }
    
            // ICU4N specific overload for convenience
            /// <summary>
            /// Lowercases a string and optionally records edits (see <see cref="OmitUnchangedText"/>).
            /// Casing is locale-dependent and context-sensitive.
            /// The result may be longer or shorter than the original.
            /// </summary>
            /// <param name="src">The original string.</param>
            /// <param name="dest">A buffer for the result string. Must not be null.</param>
            /// <param name="edits">Records edits for index mapping, working with styled text,
            /// and getting only changes (if any).
            /// This function calls <see cref="Edits.Reset()"/> first. <paramref name="edits"/> can be null.
            /// </param>
            /// <returns><paramref name="dest"/> with the result string (or only changes) appended.</returns>
            /// <seealso cref="Lang.UCharacter.ToLower(CultureInfo, string)"/>
            /// <draft>ICU4N 60.1.0</draft>
            /// <provisional>This API might change or be removed in a future release.</provisional>
            internal T Apply<T>(
                char[] src, T dest, Edits edits) where T : IAppendable
            {
                return CaseMapImpl.ToLower(GetCaseLocale(null), internalOptions, src, dest, edits);
            }
    
            // ICU4N specific overload for convenience
            /// <summary>
            /// Lowercases a string and optionally records edits (see <see cref="OmitUnchangedText"/>).
            /// Casing is locale-dependent and context-sensitive.
            /// The result may be longer or shorter than the original.
            /// </summary>
            /// <param name="src">The original string.</param>
            /// <param name="dest">A buffer for the result string. Must not be null.</param>
            /// <param name="edits">Records edits for index mapping, working with styled text,
            /// and getting only changes (if any).
            /// This function calls <see cref="Edits.Reset()"/> first. <paramref name="edits"/> can be null.
            /// </param>
            /// <returns><paramref name="dest"/> with the result string (or only changes) appended.</returns>
            /// <seealso cref="Lang.UCharacter.ToLower(CultureInfo, string)"/>
            /// <draft>ICU4N 60.1.0</draft>
            /// <provisional>This API might change or be removed in a future release.</provisional>
            internal T Apply<T>(
                ICharSequence src, T dest, Edits edits) where T : IAppendable
            {
                return CaseMapImpl.ToLower(GetCaseLocale(null), internalOptions, src, dest, edits);
            }
        
            /// <summary>
            /// Lowercases a string and optionally records edits (see <see cref="OmitUnchangedText"/>).
            /// Casing is locale-dependent and context-sensitive.
            /// The result may be longer or shorter than the original.
            /// </summary>
            /// <param name="locale">The locale ID. Can be null for <see cref="CultureInfo.CurrentCulture"/>.</param>
            /// <param name="src">The original string.</param>
            /// <param name="dest">A buffer for the result string. Must not be null.</param>
            /// <param name="edits">Records edits for index mapping, working with styled text,
            /// and getting only changes (if any).
            /// This function calls <see cref="Edits.Reset()"/> first. <paramref name="edits"/> can be null.
            /// </param>
            /// <returns><paramref name="dest"/> with the result string (or only changes) appended.</returns>
            /// <seealso cref="Lang.UCharacter.ToLower(CultureInfo, string)"/>
            /// <draft>ICU 60</draft>
            /// <provisional>This API might change or be removed in a future release.</provisional>
            public StringBuilder Apply(
                CultureInfo locale, string src, StringBuilder dest, Edits edits)
            {
                return CaseMapImpl.ToLower(GetCaseLocale(locale), internalOptions, src, dest, edits);
            }
    
            /// <summary>
            /// Lowercases a string and optionally records edits (see <see cref="OmitUnchangedText"/>).
            /// Casing is locale-dependent and context-sensitive.
            /// The result may be longer or shorter than the original.
            /// </summary>
            /// <param name="locale">The locale ID. Can be null for <see cref="CultureInfo.CurrentCulture"/>.</param>
            /// <param name="src">The original string.</param>
            /// <param name="dest">A buffer for the result string. Must not be null.</param>
            /// <param name="edits">Records edits for index mapping, working with styled text,
            /// and getting only changes (if any).
            /// This function calls <see cref="Edits.Reset()"/> first. <paramref name="edits"/> can be null.
            /// </param>
            /// <returns><paramref name="dest"/> with the result string (or only changes) appended.</returns>
            /// <seealso cref="Lang.UCharacter.ToLower(CultureInfo, string)"/>
            /// <draft>ICU 60</draft>
            /// <provisional>This API might change or be removed in a future release.</provisional>
            public StringBuilder Apply(
                CultureInfo locale, StringBuilder src, StringBuilder dest, Edits edits)
            {
                return CaseMapImpl.ToLower(GetCaseLocale(locale), internalOptions, src, dest, edits);
            }
    
            /// <summary>
            /// Lowercases a string and optionally records edits (see <see cref="OmitUnchangedText"/>).
            /// Casing is locale-dependent and context-sensitive.
            /// The result may be longer or shorter than the original.
            /// </summary>
            /// <param name="locale">The locale ID. Can be null for <see cref="CultureInfo.CurrentCulture"/>.</param>
            /// <param name="src">The original string.</param>
            /// <param name="dest">A buffer for the result string. Must not be null.</param>
            /// <param name="edits">Records edits for index mapping, working with styled text,
            /// and getting only changes (if any).
            /// This function calls <see cref="Edits.Reset()"/> first. <paramref name="edits"/> can be null.
            /// </param>
            /// <returns><paramref name="dest"/> with the result string (or only changes) appended.</returns>
            /// <seealso cref="Lang.UCharacter.ToLower(CultureInfo, string)"/>
            /// <draft>ICU 60</draft>
            /// <provisional>This API might change or be removed in a future release.</provisional>
            public StringBuilder Apply(
                CultureInfo locale, char[] src, StringBuilder dest, Edits edits)
            {
                return CaseMapImpl.ToLower(GetCaseLocale(locale), internalOptions, src, dest, edits);
            }
    
            /// <summary>
            /// Lowercases a string and optionally records edits (see <see cref="OmitUnchangedText"/>).
            /// Casing is locale-dependent and context-sensitive.
            /// The result may be longer or shorter than the original.
            /// </summary>
            /// <param name="locale">The locale ID. Can be null for <see cref="CultureInfo.CurrentCulture"/>.</param>
            /// <param name="src">The original string.</param>
            /// <param name="dest">A buffer for the result string. Must not be null.</param>
            /// <param name="edits">Records edits for index mapping, working with styled text,
            /// and getting only changes (if any).
            /// This function calls <see cref="Edits.Reset()"/> first. <paramref name="edits"/> can be null.
            /// </param>
            /// <returns><paramref name="dest"/> with the result string (or only changes) appended.</returns>
            /// <seealso cref="Lang.UCharacter.ToLower(CultureInfo, string)"/>
            /// <draft>ICU 60</draft>
            /// <provisional>This API might change or be removed in a future release.</provisional>
            internal StringBuilder Apply(
                CultureInfo locale, ICharSequence src, StringBuilder dest, Edits edits)
            {
                return CaseMapImpl.ToLower(GetCaseLocale(locale), internalOptions, src, dest, edits);
            }
        
            /// <summary>
            /// Lowercases a string and optionally records edits (see <see cref="OmitUnchangedText"/>).
            /// Casing is locale-dependent and context-sensitive.
            /// The result may be longer or shorter than the original.
            /// </summary>
            /// <param name="locale">The locale ID. Can be null for <see cref="CultureInfo.CurrentCulture"/>.</param>
            /// <param name="src">The original string.</param>
            /// <param name="dest">A buffer for the result string. Must not be null.</param>
            /// <param name="edits">Records edits for index mapping, working with styled text,
            /// and getting only changes (if any).
            /// This function calls <see cref="Edits.Reset()"/> first. <paramref name="edits"/> can be null.
            /// </param>
            /// <returns><paramref name="dest"/> with the result string (or only changes) appended.</returns>
            /// <seealso cref="Lang.UCharacter.ToLower(CultureInfo, string)"/>
            /// <draft>ICU 60</draft>
            /// <provisional>This API might change or be removed in a future release.</provisional>
            internal T Apply<T>(
                CultureInfo locale, string src, T dest, Edits edits) where T : IAppendable
            {
                return CaseMapImpl.ToLower(GetCaseLocale(locale), internalOptions, src, dest, edits);
            }
    
            /// <summary>
            /// Lowercases a string and optionally records edits (see <see cref="OmitUnchangedText"/>).
            /// Casing is locale-dependent and context-sensitive.
            /// The result may be longer or shorter than the original.
            /// </summary>
            /// <param name="locale">The locale ID. Can be null for <see cref="CultureInfo.CurrentCulture"/>.</param>
            /// <param name="src">The original string.</param>
            /// <param name="dest">A buffer for the result string. Must not be null.</param>
            /// <param name="edits">Records edits for index mapping, working with styled text,
            /// and getting only changes (if any).
            /// This function calls <see cref="Edits.Reset()"/> first. <paramref name="edits"/> can be null.
            /// </param>
            /// <returns><paramref name="dest"/> with the result string (or only changes) appended.</returns>
            /// <seealso cref="Lang.UCharacter.ToLower(CultureInfo, string)"/>
            /// <draft>ICU 60</draft>
            /// <provisional>This API might change or be removed in a future release.</provisional>
            internal T Apply<T>(
                CultureInfo locale, StringBuilder src, T dest, Edits edits) where T : IAppendable
            {
                return CaseMapImpl.ToLower(GetCaseLocale(locale), internalOptions, src, dest, edits);
            }
    
            /// <summary>
            /// Lowercases a string and optionally records edits (see <see cref="OmitUnchangedText"/>).
            /// Casing is locale-dependent and context-sensitive.
            /// The result may be longer or shorter than the original.
            /// </summary>
            /// <param name="locale">The locale ID. Can be null for <see cref="CultureInfo.CurrentCulture"/>.</param>
            /// <param name="src">The original string.</param>
            /// <param name="dest">A buffer for the result string. Must not be null.</param>
            /// <param name="edits">Records edits for index mapping, working with styled text,
            /// and getting only changes (if any).
            /// This function calls <see cref="Edits.Reset()"/> first. <paramref name="edits"/> can be null.
            /// </param>
            /// <returns><paramref name="dest"/> with the result string (or only changes) appended.</returns>
            /// <seealso cref="Lang.UCharacter.ToLower(CultureInfo, string)"/>
            /// <draft>ICU 60</draft>
            /// <provisional>This API might change or be removed in a future release.</provisional>
            internal T Apply<T>(
                CultureInfo locale, char[] src, T dest, Edits edits) where T : IAppendable
            {
                return CaseMapImpl.ToLower(GetCaseLocale(locale), internalOptions, src, dest, edits);
            }
    
            /// <summary>
            /// Lowercases a string and optionally records edits (see <see cref="OmitUnchangedText"/>).
            /// Casing is locale-dependent and context-sensitive.
            /// The result may be longer or shorter than the original.
            /// </summary>
            /// <param name="locale">The locale ID. Can be null for <see cref="CultureInfo.CurrentCulture"/>.</param>
            /// <param name="src">The original string.</param>
            /// <param name="dest">A buffer for the result string. Must not be null.</param>
            /// <param name="edits">Records edits for index mapping, working with styled text,
            /// and getting only changes (if any).
            /// This function calls <see cref="Edits.Reset()"/> first. <paramref name="edits"/> can be null.
            /// </param>
            /// <returns><paramref name="dest"/> with the result string (or only changes) appended.</returns>
            /// <seealso cref="Lang.UCharacter.ToLower(CultureInfo, string)"/>
            /// <draft>ICU 60</draft>
            /// <provisional>This API might change or be removed in a future release.</provisional>
            internal T Apply<T>(
                CultureInfo locale, ICharSequence src, T dest, Edits edits) where T : IAppendable
            {
                return CaseMapImpl.ToLower(GetCaseLocale(locale), internalOptions, src, dest, edits);
            }
            }

        public sealed partial class Upper : CaseMap
        {

            // ICU4N specific overload for convenience
            /// <summary>
            /// Uppercases a string.
            /// Casing is locale-dependent and context-sensitive.
            /// The result may be longer or shorter than the original.
            /// </summary>
            /// <param name="src">The original string.</param>
            /// <returns>The result string.</returns>
            /// <seealso cref="Lang.UCharacter.ToUpper(CultureInfo, string)"/>
            /// <draft>ICU4N 60.1.0</draft>
            /// <provisional>This API might change or be removed in a future release.</provisional>
            public string Apply(string src)
            {
                return CaseMapImpl.ToUpper(GetCaseLocale(null), internalOptions, src);
            }

            // ICU4N specific overload for convenience
            /// <summary>
            /// Uppercases a string.
            /// Casing is locale-dependent and context-sensitive.
            /// The result may be longer or shorter than the original.
            /// </summary>
            /// <param name="src">The original string.</param>
            /// <returns>The result string.</returns>
            /// <seealso cref="Lang.UCharacter.ToUpper(CultureInfo, string)"/>
            /// <draft>ICU4N 60.1.0</draft>
            /// <provisional>This API might change or be removed in a future release.</provisional>
            public string Apply(StringBuilder src)
            {
                return CaseMapImpl.ToUpper(GetCaseLocale(null), internalOptions, src);
            }

            // ICU4N specific overload for convenience
            /// <summary>
            /// Uppercases a string.
            /// Casing is locale-dependent and context-sensitive.
            /// The result may be longer or shorter than the original.
            /// </summary>
            /// <param name="src">The original string.</param>
            /// <returns>The result string.</returns>
            /// <seealso cref="Lang.UCharacter.ToUpper(CultureInfo, string)"/>
            /// <draft>ICU4N 60.1.0</draft>
            /// <provisional>This API might change or be removed in a future release.</provisional>
            public string Apply(char[] src)
            {
                return CaseMapImpl.ToUpper(GetCaseLocale(null), internalOptions, src);
            }

            // ICU4N specific overload for convenience
            /// <summary>
            /// Uppercases a string.
            /// Casing is locale-dependent and context-sensitive.
            /// The result may be longer or shorter than the original.
            /// </summary>
            /// <param name="src">The original string.</param>
            /// <returns>The result string.</returns>
            /// <seealso cref="Lang.UCharacter.ToUpper(CultureInfo, string)"/>
            /// <draft>ICU4N 60.1.0</draft>
            /// <provisional>This API might change or be removed in a future release.</provisional>
            internal string Apply(ICharSequence src)
            {
                return CaseMapImpl.ToUpper(GetCaseLocale(null), internalOptions, src);
            }

            /// <summary>
            /// Uppercases a string.
            /// Casing is locale-dependent and context-sensitive.
            /// The result may be longer or shorter than the original.
            /// </summary>
            /// <param name="locale">The locale ID. Can be null for <see cref="CultureInfo.CurrentCulture"/>.</param>
            /// <param name="src">The original string.</param>
            /// <returns>The result string.</returns>
            /// <seealso cref="Lang.UCharacter.ToUpper(CultureInfo, string)"/>
            /// <draft>ICU 60</draft>
            /// <provisional>This API might change or be removed in a future release.</provisional>
            public string Apply(CultureInfo locale, string src)
            {
                return CaseMapImpl.ToUpper(GetCaseLocale(locale), internalOptions, src);
            }

            /// <summary>
            /// Uppercases a string.
            /// Casing is locale-dependent and context-sensitive.
            /// The result may be longer or shorter than the original.
            /// </summary>
            /// <param name="locale">The locale ID. Can be null for <see cref="CultureInfo.CurrentCulture"/>.</param>
            /// <param name="src">The original string.</param>
            /// <returns>The result string.</returns>
            /// <seealso cref="Lang.UCharacter.ToUpper(CultureInfo, string)"/>
            /// <draft>ICU 60</draft>
            /// <provisional>This API might change or be removed in a future release.</provisional>
            public string Apply(CultureInfo locale, StringBuilder src)
            {
                return CaseMapImpl.ToUpper(GetCaseLocale(locale), internalOptions, src);
            }

            /// <summary>
            /// Uppercases a string.
            /// Casing is locale-dependent and context-sensitive.
            /// The result may be longer or shorter than the original.
            /// </summary>
            /// <param name="locale">The locale ID. Can be null for <see cref="CultureInfo.CurrentCulture"/>.</param>
            /// <param name="src">The original string.</param>
            /// <returns>The result string.</returns>
            /// <seealso cref="Lang.UCharacter.ToUpper(CultureInfo, string)"/>
            /// <draft>ICU 60</draft>
            /// <provisional>This API might change or be removed in a future release.</provisional>
            public string Apply(CultureInfo locale, char[] src)
            {
                return CaseMapImpl.ToUpper(GetCaseLocale(locale), internalOptions, src);
            }

            /// <summary>
            /// Uppercases a string.
            /// Casing is locale-dependent and context-sensitive.
            /// The result may be longer or shorter than the original.
            /// </summary>
            /// <param name="locale">The locale ID. Can be null for <see cref="CultureInfo.CurrentCulture"/>.</param>
            /// <param name="src">The original string.</param>
            /// <returns>The result string.</returns>
            /// <seealso cref="Lang.UCharacter.ToUpper(CultureInfo, string)"/>
            /// <draft>ICU 60</draft>
            /// <provisional>This API might change or be removed in a future release.</provisional>
            internal string Apply(CultureInfo locale, ICharSequence src)
            {
                return CaseMapImpl.ToUpper(GetCaseLocale(locale), internalOptions, src);
            }
    
            // ICU4N specific overload for convenience
            /// <summary>
            /// Uppercases a string and optionally records edits (see <see cref="OmitUnchangedText"/>).
            /// Casing is locale-dependent and context-sensitive.
            /// The result may be longer or shorter than the original.
            /// </summary>
            /// <param name="src">The original string.</param>
            /// <param name="dest">A buffer for the result string. Must not be null.</param>
            /// <param name="edits">Records edits for index mapping, working with styled text,
            /// and getting only changes (if any).
            /// This function calls <see cref="Edits.Reset()"/> first. <paramref name="dest"/> can be null.
            /// </param>
            /// <returns><paramref name="dest"/> with the result string (or only changes) appended.</returns>
            /// <seealso cref="Lang.UCharacter.ToUpper(CultureInfo, string)"/>
            /// <draft>ICU4N 60.1.0</draft>
            /// <provisional>This API might change or be removed in a future release.</provisional>
            public StringBuilder Apply(
                string src, StringBuilder dest, Edits edits)
            {
                return CaseMapImpl.ToUpper(GetCaseLocale(null), internalOptions, src, dest, edits);
            }
    
            // ICU4N specific overload for convenience
            /// <summary>
            /// Uppercases a string and optionally records edits (see <see cref="OmitUnchangedText"/>).
            /// Casing is locale-dependent and context-sensitive.
            /// The result may be longer or shorter than the original.
            /// </summary>
            /// <param name="src">The original string.</param>
            /// <param name="dest">A buffer for the result string. Must not be null.</param>
            /// <param name="edits">Records edits for index mapping, working with styled text,
            /// and getting only changes (if any).
            /// This function calls <see cref="Edits.Reset()"/> first. <paramref name="dest"/> can be null.
            /// </param>
            /// <returns><paramref name="dest"/> with the result string (or only changes) appended.</returns>
            /// <seealso cref="Lang.UCharacter.ToUpper(CultureInfo, string)"/>
            /// <draft>ICU4N 60.1.0</draft>
            /// <provisional>This API might change or be removed in a future release.</provisional>
            public StringBuilder Apply(
                StringBuilder src, StringBuilder dest, Edits edits)
            {
                return CaseMapImpl.ToUpper(GetCaseLocale(null), internalOptions, src, dest, edits);
            }
    
            // ICU4N specific overload for convenience
            /// <summary>
            /// Uppercases a string and optionally records edits (see <see cref="OmitUnchangedText"/>).
            /// Casing is locale-dependent and context-sensitive.
            /// The result may be longer or shorter than the original.
            /// </summary>
            /// <param name="src">The original string.</param>
            /// <param name="dest">A buffer for the result string. Must not be null.</param>
            /// <param name="edits">Records edits for index mapping, working with styled text,
            /// and getting only changes (if any).
            /// This function calls <see cref="Edits.Reset()"/> first. <paramref name="dest"/> can be null.
            /// </param>
            /// <returns><paramref name="dest"/> with the result string (or only changes) appended.</returns>
            /// <seealso cref="Lang.UCharacter.ToUpper(CultureInfo, string)"/>
            /// <draft>ICU4N 60.1.0</draft>
            /// <provisional>This API might change or be removed in a future release.</provisional>
            public StringBuilder Apply(
                char[] src, StringBuilder dest, Edits edits)
            {
                return CaseMapImpl.ToUpper(GetCaseLocale(null), internalOptions, src, dest, edits);
            }
    
            // ICU4N specific overload for convenience
            /// <summary>
            /// Uppercases a string and optionally records edits (see <see cref="OmitUnchangedText"/>).
            /// Casing is locale-dependent and context-sensitive.
            /// The result may be longer or shorter than the original.
            /// </summary>
            /// <param name="src">The original string.</param>
            /// <param name="dest">A buffer for the result string. Must not be null.</param>
            /// <param name="edits">Records edits for index mapping, working with styled text,
            /// and getting only changes (if any).
            /// This function calls <see cref="Edits.Reset()"/> first. <paramref name="dest"/> can be null.
            /// </param>
            /// <returns><paramref name="dest"/> with the result string (or only changes) appended.</returns>
            /// <seealso cref="Lang.UCharacter.ToUpper(CultureInfo, string)"/>
            /// <draft>ICU4N 60.1.0</draft>
            /// <provisional>This API might change or be removed in a future release.</provisional>
            internal StringBuilder Apply(
                ICharSequence src, StringBuilder dest, Edits edits)
            {
                return CaseMapImpl.ToUpper(GetCaseLocale(null), internalOptions, src, dest, edits);
            }
        
            // ICU4N specific overload for convenience
            /// <summary>
            /// Uppercases a string and optionally records edits (see <see cref="OmitUnchangedText"/>).
            /// Casing is locale-dependent and context-sensitive.
            /// The result may be longer or shorter than the original.
            /// </summary>
            /// <param name="src">The original string.</param>
            /// <param name="dest">A buffer for the result string. Must not be null.</param>
            /// <param name="edits">Records edits for index mapping, working with styled text,
            /// and getting only changes (if any).
            /// This function calls <see cref="Edits.Reset()"/> first. <paramref name="dest"/> can be null.
            /// </param>
            /// <returns><paramref name="dest"/> with the result string (or only changes) appended.</returns>
            /// <seealso cref="Lang.UCharacter.ToUpper(CultureInfo, string)"/>
            /// <draft>ICU4N 60.1.0</draft>
            /// <provisional>This API might change or be removed in a future release.</provisional>
            internal T Apply<T>(
                string src, T dest, Edits edits) where T : IAppendable
            {
                return CaseMapImpl.ToUpper(GetCaseLocale(null), internalOptions, src, dest, edits);
            }
    
            // ICU4N specific overload for convenience
            /// <summary>
            /// Uppercases a string and optionally records edits (see <see cref="OmitUnchangedText"/>).
            /// Casing is locale-dependent and context-sensitive.
            /// The result may be longer or shorter than the original.
            /// </summary>
            /// <param name="src">The original string.</param>
            /// <param name="dest">A buffer for the result string. Must not be null.</param>
            /// <param name="edits">Records edits for index mapping, working with styled text,
            /// and getting only changes (if any).
            /// This function calls <see cref="Edits.Reset()"/> first. <paramref name="dest"/> can be null.
            /// </param>
            /// <returns><paramref name="dest"/> with the result string (or only changes) appended.</returns>
            /// <seealso cref="Lang.UCharacter.ToUpper(CultureInfo, string)"/>
            /// <draft>ICU4N 60.1.0</draft>
            /// <provisional>This API might change or be removed in a future release.</provisional>
            internal T Apply<T>(
                StringBuilder src, T dest, Edits edits) where T : IAppendable
            {
                return CaseMapImpl.ToUpper(GetCaseLocale(null), internalOptions, src, dest, edits);
            }
    
            // ICU4N specific overload for convenience
            /// <summary>
            /// Uppercases a string and optionally records edits (see <see cref="OmitUnchangedText"/>).
            /// Casing is locale-dependent and context-sensitive.
            /// The result may be longer or shorter than the original.
            /// </summary>
            /// <param name="src">The original string.</param>
            /// <param name="dest">A buffer for the result string. Must not be null.</param>
            /// <param name="edits">Records edits for index mapping, working with styled text,
            /// and getting only changes (if any).
            /// This function calls <see cref="Edits.Reset()"/> first. <paramref name="dest"/> can be null.
            /// </param>
            /// <returns><paramref name="dest"/> with the result string (or only changes) appended.</returns>
            /// <seealso cref="Lang.UCharacter.ToUpper(CultureInfo, string)"/>
            /// <draft>ICU4N 60.1.0</draft>
            /// <provisional>This API might change or be removed in a future release.</provisional>
            internal T Apply<T>(
                char[] src, T dest, Edits edits) where T : IAppendable
            {
                return CaseMapImpl.ToUpper(GetCaseLocale(null), internalOptions, src, dest, edits);
            }
    
            // ICU4N specific overload for convenience
            /// <summary>
            /// Uppercases a string and optionally records edits (see <see cref="OmitUnchangedText"/>).
            /// Casing is locale-dependent and context-sensitive.
            /// The result may be longer or shorter than the original.
            /// </summary>
            /// <param name="src">The original string.</param>
            /// <param name="dest">A buffer for the result string. Must not be null.</param>
            /// <param name="edits">Records edits for index mapping, working with styled text,
            /// and getting only changes (if any).
            /// This function calls <see cref="Edits.Reset()"/> first. <paramref name="dest"/> can be null.
            /// </param>
            /// <returns><paramref name="dest"/> with the result string (or only changes) appended.</returns>
            /// <seealso cref="Lang.UCharacter.ToUpper(CultureInfo, string)"/>
            /// <draft>ICU4N 60.1.0</draft>
            /// <provisional>This API might change or be removed in a future release.</provisional>
            internal T Apply<T>(
                ICharSequence src, T dest, Edits edits) where T : IAppendable
            {
                return CaseMapImpl.ToUpper(GetCaseLocale(null), internalOptions, src, dest, edits);
            }
        
            /// <summary>
            /// Uppercases a string and optionally records edits (see <see cref="OmitUnchangedText"/>).
            /// Casing is locale-dependent and context-sensitive.
            /// The result may be longer or shorter than the original.
            /// </summary>
            /// <param name="locale">The locale ID. Can be null for <see cref="CultureInfo.CurrentCulture"/>.</param>
            /// <param name="src">The original string.</param>
            /// <param name="dest">A buffer for the result string. Must not be null.</param>
            /// <param name="edits">Records edits for index mapping, working with styled text,
            /// and getting only changes (if any).
            /// This function calls <see cref="Edits.Reset()"/> first. <paramref name="dest"/> can be null.
            /// </param>
            /// <returns><paramref name="dest"/> with the result string (or only changes) appended.</returns>
            /// <seealso cref="Lang.UCharacter.ToUpper(CultureInfo, string)"/>
            /// <draft>ICU 60</draft>
            /// <provisional>This API might change or be removed in a future release.</provisional>
            public StringBuilder Apply(
                CultureInfo locale, string src, StringBuilder dest, Edits edits)
            {
                return CaseMapImpl.ToUpper(GetCaseLocale(locale), internalOptions, src, dest, edits);
            }
    
            /// <summary>
            /// Uppercases a string and optionally records edits (see <see cref="OmitUnchangedText"/>).
            /// Casing is locale-dependent and context-sensitive.
            /// The result may be longer or shorter than the original.
            /// </summary>
            /// <param name="locale">The locale ID. Can be null for <see cref="CultureInfo.CurrentCulture"/>.</param>
            /// <param name="src">The original string.</param>
            /// <param name="dest">A buffer for the result string. Must not be null.</param>
            /// <param name="edits">Records edits for index mapping, working with styled text,
            /// and getting only changes (if any).
            /// This function calls <see cref="Edits.Reset()"/> first. <paramref name="dest"/> can be null.
            /// </param>
            /// <returns><paramref name="dest"/> with the result string (or only changes) appended.</returns>
            /// <seealso cref="Lang.UCharacter.ToUpper(CultureInfo, string)"/>
            /// <draft>ICU 60</draft>
            /// <provisional>This API might change or be removed in a future release.</provisional>
            public StringBuilder Apply(
                CultureInfo locale, StringBuilder src, StringBuilder dest, Edits edits)
            {
                return CaseMapImpl.ToUpper(GetCaseLocale(locale), internalOptions, src, dest, edits);
            }
    
            /// <summary>
            /// Uppercases a string and optionally records edits (see <see cref="OmitUnchangedText"/>).
            /// Casing is locale-dependent and context-sensitive.
            /// The result may be longer or shorter than the original.
            /// </summary>
            /// <param name="locale">The locale ID. Can be null for <see cref="CultureInfo.CurrentCulture"/>.</param>
            /// <param name="src">The original string.</param>
            /// <param name="dest">A buffer for the result string. Must not be null.</param>
            /// <param name="edits">Records edits for index mapping, working with styled text,
            /// and getting only changes (if any).
            /// This function calls <see cref="Edits.Reset()"/> first. <paramref name="dest"/> can be null.
            /// </param>
            /// <returns><paramref name="dest"/> with the result string (or only changes) appended.</returns>
            /// <seealso cref="Lang.UCharacter.ToUpper(CultureInfo, string)"/>
            /// <draft>ICU 60</draft>
            /// <provisional>This API might change or be removed in a future release.</provisional>
            public StringBuilder Apply(
                CultureInfo locale, char[] src, StringBuilder dest, Edits edits)
            {
                return CaseMapImpl.ToUpper(GetCaseLocale(locale), internalOptions, src, dest, edits);
            }
    
            /// <summary>
            /// Uppercases a string and optionally records edits (see <see cref="OmitUnchangedText"/>).
            /// Casing is locale-dependent and context-sensitive.
            /// The result may be longer or shorter than the original.
            /// </summary>
            /// <param name="locale">The locale ID. Can be null for <see cref="CultureInfo.CurrentCulture"/>.</param>
            /// <param name="src">The original string.</param>
            /// <param name="dest">A buffer for the result string. Must not be null.</param>
            /// <param name="edits">Records edits for index mapping, working with styled text,
            /// and getting only changes (if any).
            /// This function calls <see cref="Edits.Reset()"/> first. <paramref name="dest"/> can be null.
            /// </param>
            /// <returns><paramref name="dest"/> with the result string (or only changes) appended.</returns>
            /// <seealso cref="Lang.UCharacter.ToUpper(CultureInfo, string)"/>
            /// <draft>ICU 60</draft>
            /// <provisional>This API might change or be removed in a future release.</provisional>
            internal StringBuilder Apply(
                CultureInfo locale, ICharSequence src, StringBuilder dest, Edits edits)
            {
                return CaseMapImpl.ToUpper(GetCaseLocale(locale), internalOptions, src, dest, edits);
            }
        
            /// <summary>
            /// Uppercases a string and optionally records edits (see <see cref="OmitUnchangedText"/>).
            /// Casing is locale-dependent and context-sensitive.
            /// The result may be longer or shorter than the original.
            /// </summary>
            /// <param name="locale">The locale ID. Can be null for <see cref="CultureInfo.CurrentCulture"/>.</param>
            /// <param name="src">The original string.</param>
            /// <param name="dest">A buffer for the result string. Must not be null.</param>
            /// <param name="edits">Records edits for index mapping, working with styled text,
            /// and getting only changes (if any).
            /// This function calls <see cref="Edits.Reset()"/> first. <paramref name="dest"/> can be null.
            /// </param>
            /// <returns><paramref name="dest"/> with the result string (or only changes) appended.</returns>
            /// <seealso cref="Lang.UCharacter.ToUpper(CultureInfo, string)"/>
            /// <draft>ICU 60</draft>
            /// <provisional>This API might change or be removed in a future release.</provisional>
            internal T Apply<T>(
                CultureInfo locale, string src, T dest, Edits edits) where T : IAppendable
            {
                return CaseMapImpl.ToUpper(GetCaseLocale(locale), internalOptions, src, dest, edits);
            }
    
            /// <summary>
            /// Uppercases a string and optionally records edits (see <see cref="OmitUnchangedText"/>).
            /// Casing is locale-dependent and context-sensitive.
            /// The result may be longer or shorter than the original.
            /// </summary>
            /// <param name="locale">The locale ID. Can be null for <see cref="CultureInfo.CurrentCulture"/>.</param>
            /// <param name="src">The original string.</param>
            /// <param name="dest">A buffer for the result string. Must not be null.</param>
            /// <param name="edits">Records edits for index mapping, working with styled text,
            /// and getting only changes (if any).
            /// This function calls <see cref="Edits.Reset()"/> first. <paramref name="dest"/> can be null.
            /// </param>
            /// <returns><paramref name="dest"/> with the result string (or only changes) appended.</returns>
            /// <seealso cref="Lang.UCharacter.ToUpper(CultureInfo, string)"/>
            /// <draft>ICU 60</draft>
            /// <provisional>This API might change or be removed in a future release.</provisional>
            internal T Apply<T>(
                CultureInfo locale, StringBuilder src, T dest, Edits edits) where T : IAppendable
            {
                return CaseMapImpl.ToUpper(GetCaseLocale(locale), internalOptions, src, dest, edits);
            }
    
            /// <summary>
            /// Uppercases a string and optionally records edits (see <see cref="OmitUnchangedText"/>).
            /// Casing is locale-dependent and context-sensitive.
            /// The result may be longer or shorter than the original.
            /// </summary>
            /// <param name="locale">The locale ID. Can be null for <see cref="CultureInfo.CurrentCulture"/>.</param>
            /// <param name="src">The original string.</param>
            /// <param name="dest">A buffer for the result string. Must not be null.</param>
            /// <param name="edits">Records edits for index mapping, working with styled text,
            /// and getting only changes (if any).
            /// This function calls <see cref="Edits.Reset()"/> first. <paramref name="dest"/> can be null.
            /// </param>
            /// <returns><paramref name="dest"/> with the result string (or only changes) appended.</returns>
            /// <seealso cref="Lang.UCharacter.ToUpper(CultureInfo, string)"/>
            /// <draft>ICU 60</draft>
            /// <provisional>This API might change or be removed in a future release.</provisional>
            internal T Apply<T>(
                CultureInfo locale, char[] src, T dest, Edits edits) where T : IAppendable
            {
                return CaseMapImpl.ToUpper(GetCaseLocale(locale), internalOptions, src, dest, edits);
            }
    
            /// <summary>
            /// Uppercases a string and optionally records edits (see <see cref="OmitUnchangedText"/>).
            /// Casing is locale-dependent and context-sensitive.
            /// The result may be longer or shorter than the original.
            /// </summary>
            /// <param name="locale">The locale ID. Can be null for <see cref="CultureInfo.CurrentCulture"/>.</param>
            /// <param name="src">The original string.</param>
            /// <param name="dest">A buffer for the result string. Must not be null.</param>
            /// <param name="edits">Records edits for index mapping, working with styled text,
            /// and getting only changes (if any).
            /// This function calls <see cref="Edits.Reset()"/> first. <paramref name="dest"/> can be null.
            /// </param>
            /// <returns><paramref name="dest"/> with the result string (or only changes) appended.</returns>
            /// <seealso cref="Lang.UCharacter.ToUpper(CultureInfo, string)"/>
            /// <draft>ICU 60</draft>
            /// <provisional>This API might change or be removed in a future release.</provisional>
            internal T Apply<T>(
                CultureInfo locale, ICharSequence src, T dest, Edits edits) where T : IAppendable
            {
                return CaseMapImpl.ToUpper(GetCaseLocale(locale), internalOptions, src, dest, edits);
            }
            }

        public sealed partial class Title : CaseMap
        {

            // ICU4N specific overload for convenience
            /// <summary>
            /// Titlecases a string.
            /// Casing is locale-dependent and context-sensitive.
            /// The result may be longer or shorter than the original.
            /// </summary>
            /// <remarks>
            /// Titlecasing uses a break iterator to find the first characters of words
            /// that are to be titlecased. It titlecases those characters and lowercases
            /// all others. (This can be modified with options bits.)
            /// </remarks>
            /// <param name="iter">
            /// A break iterator to find the first characters of words that are to be titlecased.
            /// It is set to the source string (SetText())
            /// and used one or more times for iteration (First() and Next()).
            /// If null, then a word break iterator for the locale is used
            /// (or something equivalent).
            /// </param>
            /// <param name="src">The original string.</param>
            /// <returns>The result string.</returns>
            /// <seealso cref="Lang.UCharacter.ToTitleCase(CultureInfo, string, BreakIterator, int)"/>
            /// <draft>ICU4N 60.1.0</draft>
            /// <provisional>This API might change or be removed in a future release.</provisional>
            public string Apply(BreakIterator iter, string src)
            {
                CultureInfo locale = CultureInfo.CurrentCulture;
                iter = CaseMapImpl.GetTitleBreakIterator(locale, internalOptions, iter);
                iter.SetText(src);
                return CaseMapImpl.ToTitle(GetCaseLocale(locale), internalOptions, iter, src);
            }

            // ICU4N specific overload for convenience
            /// <summary>
            /// Titlecases a string.
            /// Casing is locale-dependent and context-sensitive.
            /// The result may be longer or shorter than the original.
            /// </summary>
            /// <remarks>
            /// Titlecasing uses a break iterator to find the first characters of words
            /// that are to be titlecased. It titlecases those characters and lowercases
            /// all others. (This can be modified with options bits.)
            /// </remarks>
            /// <param name="iter">
            /// A break iterator to find the first characters of words that are to be titlecased.
            /// It is set to the source string (SetText())
            /// and used one or more times for iteration (First() and Next()).
            /// If null, then a word break iterator for the locale is used
            /// (or something equivalent).
            /// </param>
            /// <param name="src">The original string.</param>
            /// <returns>The result string.</returns>
            /// <seealso cref="Lang.UCharacter.ToTitleCase(CultureInfo, string, BreakIterator, int)"/>
            /// <draft>ICU4N 60.1.0</draft>
            /// <provisional>This API might change or be removed in a future release.</provisional>
            public string Apply(BreakIterator iter, StringBuilder src)
            {
                CultureInfo locale = CultureInfo.CurrentCulture;
                iter = CaseMapImpl.GetTitleBreakIterator(locale, internalOptions, iter);
                iter.SetText(src);
                return CaseMapImpl.ToTitle(GetCaseLocale(locale), internalOptions, iter, src);
            }

            // ICU4N specific overload for convenience
            /// <summary>
            /// Titlecases a string.
            /// Casing is locale-dependent and context-sensitive.
            /// The result may be longer or shorter than the original.
            /// </summary>
            /// <remarks>
            /// Titlecasing uses a break iterator to find the first characters of words
            /// that are to be titlecased. It titlecases those characters and lowercases
            /// all others. (This can be modified with options bits.)
            /// </remarks>
            /// <param name="iter">
            /// A break iterator to find the first characters of words that are to be titlecased.
            /// It is set to the source string (SetText())
            /// and used one or more times for iteration (First() and Next()).
            /// If null, then a word break iterator for the locale is used
            /// (or something equivalent).
            /// </param>
            /// <param name="src">The original string.</param>
            /// <returns>The result string.</returns>
            /// <seealso cref="Lang.UCharacter.ToTitleCase(CultureInfo, string, BreakIterator, int)"/>
            /// <draft>ICU4N 60.1.0</draft>
            /// <provisional>This API might change or be removed in a future release.</provisional>
            public string Apply(BreakIterator iter, char[] src)
            {
                CultureInfo locale = CultureInfo.CurrentCulture;
                iter = CaseMapImpl.GetTitleBreakIterator(locale, internalOptions, iter);
                iter.SetText(src);
                return CaseMapImpl.ToTitle(GetCaseLocale(locale), internalOptions, iter, src);
            }

            // ICU4N specific overload for convenience
            /// <summary>
            /// Titlecases a string.
            /// Casing is locale-dependent and context-sensitive.
            /// The result may be longer or shorter than the original.
            /// </summary>
            /// <remarks>
            /// Titlecasing uses a break iterator to find the first characters of words
            /// that are to be titlecased. It titlecases those characters and lowercases
            /// all others. (This can be modified with options bits.)
            /// </remarks>
            /// <param name="iter">
            /// A break iterator to find the first characters of words that are to be titlecased.
            /// It is set to the source string (SetText())
            /// and used one or more times for iteration (First() and Next()).
            /// If null, then a word break iterator for the locale is used
            /// (or something equivalent).
            /// </param>
            /// <param name="src">The original string.</param>
            /// <returns>The result string.</returns>
            /// <seealso cref="Lang.UCharacter.ToTitleCase(CultureInfo, string, BreakIterator, int)"/>
            /// <draft>ICU4N 60.1.0</draft>
            /// <provisional>This API might change or be removed in a future release.</provisional>
            internal string Apply(BreakIterator iter, ICharSequence src)
            {
                CultureInfo locale = CultureInfo.CurrentCulture;
                iter = CaseMapImpl.GetTitleBreakIterator(locale, internalOptions, iter);
                iter.SetText(src);
                return CaseMapImpl.ToTitle(GetCaseLocale(locale), internalOptions, iter, src);
            }

            /// <summary>
            /// Titlecases a string.
            /// Casing is locale-dependent and context-sensitive.
            /// The result may be longer or shorter than the original.
            /// </summary>
            /// <remarks>
            /// Titlecasing uses a break iterator to find the first characters of words
            /// that are to be titlecased. It titlecases those characters and lowercases
            /// all others. (This can be modified with options bits.)
            /// </remarks>
            /// <param name="locale">The locale ID. Can be null for <see cref="CultureInfo.CurrentCulture"/>.</param>
            /// <param name="iter">
            /// A break iterator to find the first characters of words that are to be titlecased.
            /// It is set to the source string (SetText())
            /// and used one or more times for iteration (First() and Next()).
            /// If null, then a word break iterator for the locale is used
            /// (or something equivalent).
            /// </param>
            /// <param name="src">The original string.</param>
            /// <returns>The result string.</returns>
            /// <seealso cref="Lang.UCharacter.ToTitleCase(CultureInfo, string, BreakIterator, int)"/>
            /// <draft>ICU 60</draft>
            /// <provisional>This API might change or be removed in a future release.</provisional>
            public string Apply(CultureInfo locale, BreakIterator iter, string src)
            {
                if (iter == null && locale == null)
                {
                    locale = CultureInfo.CurrentCulture;
                }
                iter = CaseMapImpl.GetTitleBreakIterator(locale, internalOptions, iter);
                iter.SetText(src);
                return CaseMapImpl.ToTitle(GetCaseLocale(locale), internalOptions, iter, src);
            }

            /// <summary>
            /// Titlecases a string.
            /// Casing is locale-dependent and context-sensitive.
            /// The result may be longer or shorter than the original.
            /// </summary>
            /// <remarks>
            /// Titlecasing uses a break iterator to find the first characters of words
            /// that are to be titlecased. It titlecases those characters and lowercases
            /// all others. (This can be modified with options bits.)
            /// </remarks>
            /// <param name="locale">The locale ID. Can be null for <see cref="CultureInfo.CurrentCulture"/>.</param>
            /// <param name="iter">
            /// A break iterator to find the first characters of words that are to be titlecased.
            /// It is set to the source string (SetText())
            /// and used one or more times for iteration (First() and Next()).
            /// If null, then a word break iterator for the locale is used
            /// (or something equivalent).
            /// </param>
            /// <param name="src">The original string.</param>
            /// <returns>The result string.</returns>
            /// <seealso cref="Lang.UCharacter.ToTitleCase(CultureInfo, string, BreakIterator, int)"/>
            /// <draft>ICU 60</draft>
            /// <provisional>This API might change or be removed in a future release.</provisional>
            public string Apply(CultureInfo locale, BreakIterator iter, StringBuilder src)
            {
                if (iter == null && locale == null)
                {
                    locale = CultureInfo.CurrentCulture;
                }
                iter = CaseMapImpl.GetTitleBreakIterator(locale, internalOptions, iter);
                iter.SetText(src);
                return CaseMapImpl.ToTitle(GetCaseLocale(locale), internalOptions, iter, src);
            }

            /// <summary>
            /// Titlecases a string.
            /// Casing is locale-dependent and context-sensitive.
            /// The result may be longer or shorter than the original.
            /// </summary>
            /// <remarks>
            /// Titlecasing uses a break iterator to find the first characters of words
            /// that are to be titlecased. It titlecases those characters and lowercases
            /// all others. (This can be modified with options bits.)
            /// </remarks>
            /// <param name="locale">The locale ID. Can be null for <see cref="CultureInfo.CurrentCulture"/>.</param>
            /// <param name="iter">
            /// A break iterator to find the first characters of words that are to be titlecased.
            /// It is set to the source string (SetText())
            /// and used one or more times for iteration (First() and Next()).
            /// If null, then a word break iterator for the locale is used
            /// (or something equivalent).
            /// </param>
            /// <param name="src">The original string.</param>
            /// <returns>The result string.</returns>
            /// <seealso cref="Lang.UCharacter.ToTitleCase(CultureInfo, string, BreakIterator, int)"/>
            /// <draft>ICU 60</draft>
            /// <provisional>This API might change or be removed in a future release.</provisional>
            public string Apply(CultureInfo locale, BreakIterator iter, char[] src)
            {
                if (iter == null && locale == null)
                {
                    locale = CultureInfo.CurrentCulture;
                }
                iter = CaseMapImpl.GetTitleBreakIterator(locale, internalOptions, iter);
                iter.SetText(src);
                return CaseMapImpl.ToTitle(GetCaseLocale(locale), internalOptions, iter, src);
            }

            /// <summary>
            /// Titlecases a string.
            /// Casing is locale-dependent and context-sensitive.
            /// The result may be longer or shorter than the original.
            /// </summary>
            /// <remarks>
            /// Titlecasing uses a break iterator to find the first characters of words
            /// that are to be titlecased. It titlecases those characters and lowercases
            /// all others. (This can be modified with options bits.)
            /// </remarks>
            /// <param name="locale">The locale ID. Can be null for <see cref="CultureInfo.CurrentCulture"/>.</param>
            /// <param name="iter">
            /// A break iterator to find the first characters of words that are to be titlecased.
            /// It is set to the source string (SetText())
            /// and used one or more times for iteration (First() and Next()).
            /// If null, then a word break iterator for the locale is used
            /// (or something equivalent).
            /// </param>
            /// <param name="src">The original string.</param>
            /// <returns>The result string.</returns>
            /// <seealso cref="Lang.UCharacter.ToTitleCase(CultureInfo, string, BreakIterator, int)"/>
            /// <draft>ICU 60</draft>
            /// <provisional>This API might change or be removed in a future release.</provisional>
            internal string Apply(CultureInfo locale, BreakIterator iter, ICharSequence src)
            {
                if (iter == null && locale == null)
                {
                    locale = CultureInfo.CurrentCulture;
                }
                iter = CaseMapImpl.GetTitleBreakIterator(locale, internalOptions, iter);
                iter.SetText(src);
                return CaseMapImpl.ToTitle(GetCaseLocale(locale), internalOptions, iter, src);
            }
    
            // ICU4N specific overload for convenience
            /// <summary>
            /// Titlecases a string and optionally records edits (see <see cref="OmitUnchangedText"/>).
            /// Casing is locale-dependent and context-sensitive.
            /// The result may be longer or shorter than the original.
            /// </summary>
            /// <remarks>
            /// Titlecasing uses a break iterator to find the first characters of words
            /// that are to be titlecased. It titlecases those characters and lowercases
            /// all others. (This can be modified with options bits.)
            /// </remarks>
            /// <param name="iter">
            /// A break iterator to find the first characters of words that are to be titlecased.
            /// It is set to the source string (SetText())
            /// and used one or more times for iteration (First() and Next()).
            /// If null, then a word break iterator for the locale is used
            /// (or something equivalent).
            /// </param>
            /// <param name="src">The original string.</param>
            /// <param name="dest">A buffer for the result string. Must not be null.</param>
            /// <param name="edits">
            /// Records edits for index mapping, working with styled text,
            /// and getting only changes (if any).
            /// This function calls <see cref="Edits.Reset()"/> first. <paramref name="edits"/> can be null.
            /// </param>
            /// <returns><paramref name="dest"/> with the result string (or only changes) appended.</returns>
            /// <seealso cref="Lang.UCharacter.ToTitleCase(CultureInfo, string, BreakIterator, int)"/>
            /// <draft>ICU4N 60.1.0</draft>
            /// <provisional>This API might change or be removed in a future release.</provisional>
            public StringBuilder Apply(
                BreakIterator iter, string src, StringBuilder dest, Edits edits)
            {
                CultureInfo locale = CultureInfo.CurrentCulture;
                iter = CaseMapImpl.GetTitleBreakIterator(locale, internalOptions, iter);
                iter.SetText(src);
                return CaseMapImpl.ToTitle(
                        GetCaseLocale(locale), internalOptions, iter, src, dest, edits);
            }

    
            // ICU4N specific overload for convenience
            /// <summary>
            /// Titlecases a string and optionally records edits (see <see cref="OmitUnchangedText"/>).
            /// Casing is locale-dependent and context-sensitive.
            /// The result may be longer or shorter than the original.
            /// </summary>
            /// <remarks>
            /// Titlecasing uses a break iterator to find the first characters of words
            /// that are to be titlecased. It titlecases those characters and lowercases
            /// all others. (This can be modified with options bits.)
            /// </remarks>
            /// <param name="iter">
            /// A break iterator to find the first characters of words that are to be titlecased.
            /// It is set to the source string (SetText())
            /// and used one or more times for iteration (First() and Next()).
            /// If null, then a word break iterator for the locale is used
            /// (or something equivalent).
            /// </param>
            /// <param name="src">The original string.</param>
            /// <param name="dest">A buffer for the result string. Must not be null.</param>
            /// <param name="edits">
            /// Records edits for index mapping, working with styled text,
            /// and getting only changes (if any).
            /// This function calls <see cref="Edits.Reset()"/> first. <paramref name="edits"/> can be null.
            /// </param>
            /// <returns><paramref name="dest"/> with the result string (or only changes) appended.</returns>
            /// <seealso cref="Lang.UCharacter.ToTitleCase(CultureInfo, string, BreakIterator, int)"/>
            /// <draft>ICU4N 60.1.0</draft>
            /// <provisional>This API might change or be removed in a future release.</provisional>
            public StringBuilder Apply(
                BreakIterator iter, StringBuilder src, StringBuilder dest, Edits edits)
            {
                CultureInfo locale = CultureInfo.CurrentCulture;
                iter = CaseMapImpl.GetTitleBreakIterator(locale, internalOptions, iter);
                iter.SetText(src);
                return CaseMapImpl.ToTitle(
                        GetCaseLocale(locale), internalOptions, iter, src, dest, edits);
            }

    
            // ICU4N specific overload for convenience
            /// <summary>
            /// Titlecases a string and optionally records edits (see <see cref="OmitUnchangedText"/>).
            /// Casing is locale-dependent and context-sensitive.
            /// The result may be longer or shorter than the original.
            /// </summary>
            /// <remarks>
            /// Titlecasing uses a break iterator to find the first characters of words
            /// that are to be titlecased. It titlecases those characters and lowercases
            /// all others. (This can be modified with options bits.)
            /// </remarks>
            /// <param name="iter">
            /// A break iterator to find the first characters of words that are to be titlecased.
            /// It is set to the source string (SetText())
            /// and used one or more times for iteration (First() and Next()).
            /// If null, then a word break iterator for the locale is used
            /// (or something equivalent).
            /// </param>
            /// <param name="src">The original string.</param>
            /// <param name="dest">A buffer for the result string. Must not be null.</param>
            /// <param name="edits">
            /// Records edits for index mapping, working with styled text,
            /// and getting only changes (if any).
            /// This function calls <see cref="Edits.Reset()"/> first. <paramref name="edits"/> can be null.
            /// </param>
            /// <returns><paramref name="dest"/> with the result string (or only changes) appended.</returns>
            /// <seealso cref="Lang.UCharacter.ToTitleCase(CultureInfo, string, BreakIterator, int)"/>
            /// <draft>ICU4N 60.1.0</draft>
            /// <provisional>This API might change or be removed in a future release.</provisional>
            public StringBuilder Apply(
                BreakIterator iter, char[] src, StringBuilder dest, Edits edits)
            {
                CultureInfo locale = CultureInfo.CurrentCulture;
                iter = CaseMapImpl.GetTitleBreakIterator(locale, internalOptions, iter);
                iter.SetText(src);
                return CaseMapImpl.ToTitle(
                        GetCaseLocale(locale), internalOptions, iter, src, dest, edits);
            }

    
            // ICU4N specific overload for convenience
            /// <summary>
            /// Titlecases a string and optionally records edits (see <see cref="OmitUnchangedText"/>).
            /// Casing is locale-dependent and context-sensitive.
            /// The result may be longer or shorter than the original.
            /// </summary>
            /// <remarks>
            /// Titlecasing uses a break iterator to find the first characters of words
            /// that are to be titlecased. It titlecases those characters and lowercases
            /// all others. (This can be modified with options bits.)
            /// </remarks>
            /// <param name="iter">
            /// A break iterator to find the first characters of words that are to be titlecased.
            /// It is set to the source string (SetText())
            /// and used one or more times for iteration (First() and Next()).
            /// If null, then a word break iterator for the locale is used
            /// (or something equivalent).
            /// </param>
            /// <param name="src">The original string.</param>
            /// <param name="dest">A buffer for the result string. Must not be null.</param>
            /// <param name="edits">
            /// Records edits for index mapping, working with styled text,
            /// and getting only changes (if any).
            /// This function calls <see cref="Edits.Reset()"/> first. <paramref name="edits"/> can be null.
            /// </param>
            /// <returns><paramref name="dest"/> with the result string (or only changes) appended.</returns>
            /// <seealso cref="Lang.UCharacter.ToTitleCase(CultureInfo, string, BreakIterator, int)"/>
            /// <draft>ICU4N 60.1.0</draft>
            /// <provisional>This API might change or be removed in a future release.</provisional>
            internal StringBuilder Apply(
                BreakIterator iter, ICharSequence src, StringBuilder dest, Edits edits)
            {
                CultureInfo locale = CultureInfo.CurrentCulture;
                iter = CaseMapImpl.GetTitleBreakIterator(locale, internalOptions, iter);
                iter.SetText(src);
                return CaseMapImpl.ToTitle(
                        GetCaseLocale(locale), internalOptions, iter, src, dest, edits);
            }

        
            // ICU4N specific overload for convenience
            /// <summary>
            /// Titlecases a string and optionally records edits (see <see cref="OmitUnchangedText"/>).
            /// Casing is locale-dependent and context-sensitive.
            /// The result may be longer or shorter than the original.
            /// </summary>
            /// <remarks>
            /// Titlecasing uses a break iterator to find the first characters of words
            /// that are to be titlecased. It titlecases those characters and lowercases
            /// all others. (This can be modified with options bits.)
            /// </remarks>
            /// <param name="iter">
            /// A break iterator to find the first characters of words that are to be titlecased.
            /// It is set to the source string (SetText())
            /// and used one or more times for iteration (First() and Next()).
            /// If null, then a word break iterator for the locale is used
            /// (or something equivalent).
            /// </param>
            /// <param name="src">The original string.</param>
            /// <param name="dest">A buffer for the result string. Must not be null.</param>
            /// <param name="edits">
            /// Records edits for index mapping, working with styled text,
            /// and getting only changes (if any).
            /// This function calls <see cref="Edits.Reset()"/> first. <paramref name="edits"/> can be null.
            /// </param>
            /// <returns><paramref name="dest"/> with the result string (or only changes) appended.</returns>
            /// <seealso cref="Lang.UCharacter.ToTitleCase(CultureInfo, string, BreakIterator, int)"/>
            /// <draft>ICU4N 60.1.0</draft>
            /// <provisional>This API might change or be removed in a future release.</provisional>
            internal T Apply<T>(
                BreakIterator iter, string src, T dest, Edits edits) where T : IAppendable
            {
                CultureInfo locale = CultureInfo.CurrentCulture;
                iter = CaseMapImpl.GetTitleBreakIterator(locale, internalOptions, iter);
                iter.SetText(src);
                return CaseMapImpl.ToTitle(
                        GetCaseLocale(locale), internalOptions, iter, src, dest, edits);
            }

    
            // ICU4N specific overload for convenience
            /// <summary>
            /// Titlecases a string and optionally records edits (see <see cref="OmitUnchangedText"/>).
            /// Casing is locale-dependent and context-sensitive.
            /// The result may be longer or shorter than the original.
            /// </summary>
            /// <remarks>
            /// Titlecasing uses a break iterator to find the first characters of words
            /// that are to be titlecased. It titlecases those characters and lowercases
            /// all others. (This can be modified with options bits.)
            /// </remarks>
            /// <param name="iter">
            /// A break iterator to find the first characters of words that are to be titlecased.
            /// It is set to the source string (SetText())
            /// and used one or more times for iteration (First() and Next()).
            /// If null, then a word break iterator for the locale is used
            /// (or something equivalent).
            /// </param>
            /// <param name="src">The original string.</param>
            /// <param name="dest">A buffer for the result string. Must not be null.</param>
            /// <param name="edits">
            /// Records edits for index mapping, working with styled text,
            /// and getting only changes (if any).
            /// This function calls <see cref="Edits.Reset()"/> first. <paramref name="edits"/> can be null.
            /// </param>
            /// <returns><paramref name="dest"/> with the result string (or only changes) appended.</returns>
            /// <seealso cref="Lang.UCharacter.ToTitleCase(CultureInfo, string, BreakIterator, int)"/>
            /// <draft>ICU4N 60.1.0</draft>
            /// <provisional>This API might change or be removed in a future release.</provisional>
            internal T Apply<T>(
                BreakIterator iter, StringBuilder src, T dest, Edits edits) where T : IAppendable
            {
                CultureInfo locale = CultureInfo.CurrentCulture;
                iter = CaseMapImpl.GetTitleBreakIterator(locale, internalOptions, iter);
                iter.SetText(src);
                return CaseMapImpl.ToTitle(
                        GetCaseLocale(locale), internalOptions, iter, src, dest, edits);
            }

    
            // ICU4N specific overload for convenience
            /// <summary>
            /// Titlecases a string and optionally records edits (see <see cref="OmitUnchangedText"/>).
            /// Casing is locale-dependent and context-sensitive.
            /// The result may be longer or shorter than the original.
            /// </summary>
            /// <remarks>
            /// Titlecasing uses a break iterator to find the first characters of words
            /// that are to be titlecased. It titlecases those characters and lowercases
            /// all others. (This can be modified with options bits.)
            /// </remarks>
            /// <param name="iter">
            /// A break iterator to find the first characters of words that are to be titlecased.
            /// It is set to the source string (SetText())
            /// and used one or more times for iteration (First() and Next()).
            /// If null, then a word break iterator for the locale is used
            /// (or something equivalent).
            /// </param>
            /// <param name="src">The original string.</param>
            /// <param name="dest">A buffer for the result string. Must not be null.</param>
            /// <param name="edits">
            /// Records edits for index mapping, working with styled text,
            /// and getting only changes (if any).
            /// This function calls <see cref="Edits.Reset()"/> first. <paramref name="edits"/> can be null.
            /// </param>
            /// <returns><paramref name="dest"/> with the result string (or only changes) appended.</returns>
            /// <seealso cref="Lang.UCharacter.ToTitleCase(CultureInfo, string, BreakIterator, int)"/>
            /// <draft>ICU4N 60.1.0</draft>
            /// <provisional>This API might change or be removed in a future release.</provisional>
            internal T Apply<T>(
                BreakIterator iter, char[] src, T dest, Edits edits) where T : IAppendable
            {
                CultureInfo locale = CultureInfo.CurrentCulture;
                iter = CaseMapImpl.GetTitleBreakIterator(locale, internalOptions, iter);
                iter.SetText(src);
                return CaseMapImpl.ToTitle(
                        GetCaseLocale(locale), internalOptions, iter, src, dest, edits);
            }

    
            // ICU4N specific overload for convenience
            /// <summary>
            /// Titlecases a string and optionally records edits (see <see cref="OmitUnchangedText"/>).
            /// Casing is locale-dependent and context-sensitive.
            /// The result may be longer or shorter than the original.
            /// </summary>
            /// <remarks>
            /// Titlecasing uses a break iterator to find the first characters of words
            /// that are to be titlecased. It titlecases those characters and lowercases
            /// all others. (This can be modified with options bits.)
            /// </remarks>
            /// <param name="iter">
            /// A break iterator to find the first characters of words that are to be titlecased.
            /// It is set to the source string (SetText())
            /// and used one or more times for iteration (First() and Next()).
            /// If null, then a word break iterator for the locale is used
            /// (or something equivalent).
            /// </param>
            /// <param name="src">The original string.</param>
            /// <param name="dest">A buffer for the result string. Must not be null.</param>
            /// <param name="edits">
            /// Records edits for index mapping, working with styled text,
            /// and getting only changes (if any).
            /// This function calls <see cref="Edits.Reset()"/> first. <paramref name="edits"/> can be null.
            /// </param>
            /// <returns><paramref name="dest"/> with the result string (or only changes) appended.</returns>
            /// <seealso cref="Lang.UCharacter.ToTitleCase(CultureInfo, string, BreakIterator, int)"/>
            /// <draft>ICU4N 60.1.0</draft>
            /// <provisional>This API might change or be removed in a future release.</provisional>
            internal T Apply<T>(
                BreakIterator iter, ICharSequence src, T dest, Edits edits) where T : IAppendable
            {
                CultureInfo locale = CultureInfo.CurrentCulture;
                iter = CaseMapImpl.GetTitleBreakIterator(locale, internalOptions, iter);
                iter.SetText(src);
                return CaseMapImpl.ToTitle(
                        GetCaseLocale(locale), internalOptions, iter, src, dest, edits);
            }

        
            /// <summary>
            /// Titlecases a string and optionally records edits (see <see cref="OmitUnchangedText"/>).
            /// Casing is locale-dependent and context-sensitive.
            /// The result may be longer or shorter than the original.
            /// </summary>
            /// <remarks>
            /// Titlecasing uses a break iterator to find the first characters of words
            /// that are to be titlecased. It titlecases those characters and lowercases
            /// all others. (This can be modified with options bits.)
            /// </remarks>
            /// <param name="locale">The locale ID. Can be null for <see cref="CultureInfo.CurrentCulture"/>.</param>
            /// <param name="iter">
            /// A break iterator to find the first characters of words that are to be titlecased.
            /// It is set to the source string (SetText())
            /// and used one or more times for iteration (First() and Next()).
            /// If null, then a word break iterator for the locale is used
            /// (or something equivalent).
            /// </param>
            /// <param name="src">The original string.</param>
            /// <param name="dest">A buffer for the result string. Must not be null.</param>
            /// <param name="edits">
            /// Records edits for index mapping, working with styled text,
            /// and getting only changes (if any).
            /// This function calls <see cref="Edits.Reset()"/> first. <paramref name="edits"/> can be null.
            /// </param>
            /// <returns><paramref name="dest"/> with the result string (or only changes) appended.</returns>
            /// <seealso cref="Lang.UCharacter.ToTitleCase(CultureInfo, string, BreakIterator, int)"/>
            /// <draft>ICU 60</draft>
            /// <provisional>This API might change or be removed in a future release.</provisional>
            public StringBuilder Apply(
                CultureInfo locale, BreakIterator iter, string src, StringBuilder dest, Edits edits)
            {
                if (iter == null && locale == null)
                {
                    locale = CultureInfo.CurrentCulture;
                }
                iter = CaseMapImpl.GetTitleBreakIterator(locale, internalOptions, iter);
                iter.SetText(src);
                return CaseMapImpl.ToTitle(
                        GetCaseLocale(locale), internalOptions, iter, src, dest, edits);
            }

    
            /// <summary>
            /// Titlecases a string and optionally records edits (see <see cref="OmitUnchangedText"/>).
            /// Casing is locale-dependent and context-sensitive.
            /// The result may be longer or shorter than the original.
            /// </summary>
            /// <remarks>
            /// Titlecasing uses a break iterator to find the first characters of words
            /// that are to be titlecased. It titlecases those characters and lowercases
            /// all others. (This can be modified with options bits.)
            /// </remarks>
            /// <param name="locale">The locale ID. Can be null for <see cref="CultureInfo.CurrentCulture"/>.</param>
            /// <param name="iter">
            /// A break iterator to find the first characters of words that are to be titlecased.
            /// It is set to the source string (SetText())
            /// and used one or more times for iteration (First() and Next()).
            /// If null, then a word break iterator for the locale is used
            /// (or something equivalent).
            /// </param>
            /// <param name="src">The original string.</param>
            /// <param name="dest">A buffer for the result string. Must not be null.</param>
            /// <param name="edits">
            /// Records edits for index mapping, working with styled text,
            /// and getting only changes (if any).
            /// This function calls <see cref="Edits.Reset()"/> first. <paramref name="edits"/> can be null.
            /// </param>
            /// <returns><paramref name="dest"/> with the result string (or only changes) appended.</returns>
            /// <seealso cref="Lang.UCharacter.ToTitleCase(CultureInfo, string, BreakIterator, int)"/>
            /// <draft>ICU 60</draft>
            /// <provisional>This API might change or be removed in a future release.</provisional>
            public StringBuilder Apply(
                CultureInfo locale, BreakIterator iter, StringBuilder src, StringBuilder dest, Edits edits)
            {
                if (iter == null && locale == null)
                {
                    locale = CultureInfo.CurrentCulture;
                }
                iter = CaseMapImpl.GetTitleBreakIterator(locale, internalOptions, iter);
                iter.SetText(src);
                return CaseMapImpl.ToTitle(
                        GetCaseLocale(locale), internalOptions, iter, src, dest, edits);
            }

    
            /// <summary>
            /// Titlecases a string and optionally records edits (see <see cref="OmitUnchangedText"/>).
            /// Casing is locale-dependent and context-sensitive.
            /// The result may be longer or shorter than the original.
            /// </summary>
            /// <remarks>
            /// Titlecasing uses a break iterator to find the first characters of words
            /// that are to be titlecased. It titlecases those characters and lowercases
            /// all others. (This can be modified with options bits.)
            /// </remarks>
            /// <param name="locale">The locale ID. Can be null for <see cref="CultureInfo.CurrentCulture"/>.</param>
            /// <param name="iter">
            /// A break iterator to find the first characters of words that are to be titlecased.
            /// It is set to the source string (SetText())
            /// and used one or more times for iteration (First() and Next()).
            /// If null, then a word break iterator for the locale is used
            /// (or something equivalent).
            /// </param>
            /// <param name="src">The original string.</param>
            /// <param name="dest">A buffer for the result string. Must not be null.</param>
            /// <param name="edits">
            /// Records edits for index mapping, working with styled text,
            /// and getting only changes (if any).
            /// This function calls <see cref="Edits.Reset()"/> first. <paramref name="edits"/> can be null.
            /// </param>
            /// <returns><paramref name="dest"/> with the result string (or only changes) appended.</returns>
            /// <seealso cref="Lang.UCharacter.ToTitleCase(CultureInfo, string, BreakIterator, int)"/>
            /// <draft>ICU 60</draft>
            /// <provisional>This API might change or be removed in a future release.</provisional>
            public StringBuilder Apply(
                CultureInfo locale, BreakIterator iter, char[] src, StringBuilder dest, Edits edits)
            {
                if (iter == null && locale == null)
                {
                    locale = CultureInfo.CurrentCulture;
                }
                iter = CaseMapImpl.GetTitleBreakIterator(locale, internalOptions, iter);
                iter.SetText(src);
                return CaseMapImpl.ToTitle(
                        GetCaseLocale(locale), internalOptions, iter, src, dest, edits);
            }

    
            /// <summary>
            /// Titlecases a string and optionally records edits (see <see cref="OmitUnchangedText"/>).
            /// Casing is locale-dependent and context-sensitive.
            /// The result may be longer or shorter than the original.
            /// </summary>
            /// <remarks>
            /// Titlecasing uses a break iterator to find the first characters of words
            /// that are to be titlecased. It titlecases those characters and lowercases
            /// all others. (This can be modified with options bits.)
            /// </remarks>
            /// <param name="locale">The locale ID. Can be null for <see cref="CultureInfo.CurrentCulture"/>.</param>
            /// <param name="iter">
            /// A break iterator to find the first characters of words that are to be titlecased.
            /// It is set to the source string (SetText())
            /// and used one or more times for iteration (First() and Next()).
            /// If null, then a word break iterator for the locale is used
            /// (or something equivalent).
            /// </param>
            /// <param name="src">The original string.</param>
            /// <param name="dest">A buffer for the result string. Must not be null.</param>
            /// <param name="edits">
            /// Records edits for index mapping, working with styled text,
            /// and getting only changes (if any).
            /// This function calls <see cref="Edits.Reset()"/> first. <paramref name="edits"/> can be null.
            /// </param>
            /// <returns><paramref name="dest"/> with the result string (or only changes) appended.</returns>
            /// <seealso cref="Lang.UCharacter.ToTitleCase(CultureInfo, string, BreakIterator, int)"/>
            /// <draft>ICU 60</draft>
            /// <provisional>This API might change or be removed in a future release.</provisional>
            internal StringBuilder Apply(
                CultureInfo locale, BreakIterator iter, ICharSequence src, StringBuilder dest, Edits edits)
            {
                if (iter == null && locale == null)
                {
                    locale = CultureInfo.CurrentCulture;
                }
                iter = CaseMapImpl.GetTitleBreakIterator(locale, internalOptions, iter);
                iter.SetText(src);
                return CaseMapImpl.ToTitle(
                        GetCaseLocale(locale), internalOptions, iter, src, dest, edits);
            }

        
            /// <summary>
            /// Titlecases a string and optionally records edits (see <see cref="OmitUnchangedText"/>).
            /// Casing is locale-dependent and context-sensitive.
            /// The result may be longer or shorter than the original.
            /// </summary>
            /// <remarks>
            /// Titlecasing uses a break iterator to find the first characters of words
            /// that are to be titlecased. It titlecases those characters and lowercases
            /// all others. (This can be modified with options bits.)
            /// </remarks>
            /// <param name="locale">The locale ID. Can be null for <see cref="CultureInfo.CurrentCulture"/>.</param>
            /// <param name="iter">
            /// A break iterator to find the first characters of words that are to be titlecased.
            /// It is set to the source string (SetText())
            /// and used one or more times for iteration (First() and Next()).
            /// If null, then a word break iterator for the locale is used
            /// (or something equivalent).
            /// </param>
            /// <param name="src">The original string.</param>
            /// <param name="dest">A buffer for the result string. Must not be null.</param>
            /// <param name="edits">
            /// Records edits for index mapping, working with styled text,
            /// and getting only changes (if any).
            /// This function calls <see cref="Edits.Reset()"/> first. <paramref name="edits"/> can be null.
            /// </param>
            /// <returns><paramref name="dest"/> with the result string (or only changes) appended.</returns>
            /// <seealso cref="Lang.UCharacter.ToTitleCase(CultureInfo, string, BreakIterator, int)"/>
            /// <draft>ICU 60</draft>
            /// <provisional>This API might change or be removed in a future release.</provisional>
            internal T Apply<T>(
                CultureInfo locale, BreakIterator iter, string src, T dest, Edits edits) where T : IAppendable
            {
                if (iter == null && locale == null)
                {
                    locale = CultureInfo.CurrentCulture;
                }
                iter = CaseMapImpl.GetTitleBreakIterator(locale, internalOptions, iter);
                iter.SetText(src);
                return CaseMapImpl.ToTitle(
                        GetCaseLocale(locale), internalOptions, iter, src, dest, edits);
            }

    
            /// <summary>
            /// Titlecases a string and optionally records edits (see <see cref="OmitUnchangedText"/>).
            /// Casing is locale-dependent and context-sensitive.
            /// The result may be longer or shorter than the original.
            /// </summary>
            /// <remarks>
            /// Titlecasing uses a break iterator to find the first characters of words
            /// that are to be titlecased. It titlecases those characters and lowercases
            /// all others. (This can be modified with options bits.)
            /// </remarks>
            /// <param name="locale">The locale ID. Can be null for <see cref="CultureInfo.CurrentCulture"/>.</param>
            /// <param name="iter">
            /// A break iterator to find the first characters of words that are to be titlecased.
            /// It is set to the source string (SetText())
            /// and used one or more times for iteration (First() and Next()).
            /// If null, then a word break iterator for the locale is used
            /// (or something equivalent).
            /// </param>
            /// <param name="src">The original string.</param>
            /// <param name="dest">A buffer for the result string. Must not be null.</param>
            /// <param name="edits">
            /// Records edits for index mapping, working with styled text,
            /// and getting only changes (if any).
            /// This function calls <see cref="Edits.Reset()"/> first. <paramref name="edits"/> can be null.
            /// </param>
            /// <returns><paramref name="dest"/> with the result string (or only changes) appended.</returns>
            /// <seealso cref="Lang.UCharacter.ToTitleCase(CultureInfo, string, BreakIterator, int)"/>
            /// <draft>ICU 60</draft>
            /// <provisional>This API might change or be removed in a future release.</provisional>
            internal T Apply<T>(
                CultureInfo locale, BreakIterator iter, StringBuilder src, T dest, Edits edits) where T : IAppendable
            {
                if (iter == null && locale == null)
                {
                    locale = CultureInfo.CurrentCulture;
                }
                iter = CaseMapImpl.GetTitleBreakIterator(locale, internalOptions, iter);
                iter.SetText(src);
                return CaseMapImpl.ToTitle(
                        GetCaseLocale(locale), internalOptions, iter, src, dest, edits);
            }

    
            /// <summary>
            /// Titlecases a string and optionally records edits (see <see cref="OmitUnchangedText"/>).
            /// Casing is locale-dependent and context-sensitive.
            /// The result may be longer or shorter than the original.
            /// </summary>
            /// <remarks>
            /// Titlecasing uses a break iterator to find the first characters of words
            /// that are to be titlecased. It titlecases those characters and lowercases
            /// all others. (This can be modified with options bits.)
            /// </remarks>
            /// <param name="locale">The locale ID. Can be null for <see cref="CultureInfo.CurrentCulture"/>.</param>
            /// <param name="iter">
            /// A break iterator to find the first characters of words that are to be titlecased.
            /// It is set to the source string (SetText())
            /// and used one or more times for iteration (First() and Next()).
            /// If null, then a word break iterator for the locale is used
            /// (or something equivalent).
            /// </param>
            /// <param name="src">The original string.</param>
            /// <param name="dest">A buffer for the result string. Must not be null.</param>
            /// <param name="edits">
            /// Records edits for index mapping, working with styled text,
            /// and getting only changes (if any).
            /// This function calls <see cref="Edits.Reset()"/> first. <paramref name="edits"/> can be null.
            /// </param>
            /// <returns><paramref name="dest"/> with the result string (or only changes) appended.</returns>
            /// <seealso cref="Lang.UCharacter.ToTitleCase(CultureInfo, string, BreakIterator, int)"/>
            /// <draft>ICU 60</draft>
            /// <provisional>This API might change or be removed in a future release.</provisional>
            internal T Apply<T>(
                CultureInfo locale, BreakIterator iter, char[] src, T dest, Edits edits) where T : IAppendable
            {
                if (iter == null && locale == null)
                {
                    locale = CultureInfo.CurrentCulture;
                }
                iter = CaseMapImpl.GetTitleBreakIterator(locale, internalOptions, iter);
                iter.SetText(src);
                return CaseMapImpl.ToTitle(
                        GetCaseLocale(locale), internalOptions, iter, src, dest, edits);
            }

    
            /// <summary>
            /// Titlecases a string and optionally records edits (see <see cref="OmitUnchangedText"/>).
            /// Casing is locale-dependent and context-sensitive.
            /// The result may be longer or shorter than the original.
            /// </summary>
            /// <remarks>
            /// Titlecasing uses a break iterator to find the first characters of words
            /// that are to be titlecased. It titlecases those characters and lowercases
            /// all others. (This can be modified with options bits.)
            /// </remarks>
            /// <param name="locale">The locale ID. Can be null for <see cref="CultureInfo.CurrentCulture"/>.</param>
            /// <param name="iter">
            /// A break iterator to find the first characters of words that are to be titlecased.
            /// It is set to the source string (SetText())
            /// and used one or more times for iteration (First() and Next()).
            /// If null, then a word break iterator for the locale is used
            /// (or something equivalent).
            /// </param>
            /// <param name="src">The original string.</param>
            /// <param name="dest">A buffer for the result string. Must not be null.</param>
            /// <param name="edits">
            /// Records edits for index mapping, working with styled text,
            /// and getting only changes (if any).
            /// This function calls <see cref="Edits.Reset()"/> first. <paramref name="edits"/> can be null.
            /// </param>
            /// <returns><paramref name="dest"/> with the result string (or only changes) appended.</returns>
            /// <seealso cref="Lang.UCharacter.ToTitleCase(CultureInfo, string, BreakIterator, int)"/>
            /// <draft>ICU 60</draft>
            /// <provisional>This API might change or be removed in a future release.</provisional>
            internal T Apply<T>(
                CultureInfo locale, BreakIterator iter, ICharSequence src, T dest, Edits edits) where T : IAppendable
            {
                if (iter == null && locale == null)
                {
                    locale = CultureInfo.CurrentCulture;
                }
                iter = CaseMapImpl.GetTitleBreakIterator(locale, internalOptions, iter);
                iter.SetText(src);
                return CaseMapImpl.ToTitle(
                        GetCaseLocale(locale), internalOptions, iter, src, dest, edits);
            }

            }

        public sealed partial class Fold : CaseMap
        {

            /// <summary>
            /// Case-folds a string.
            /// The result may be longer or shorter than the original.
            /// </summary>
            /// <remarks>
            /// Case-folding is locale-independent and not context-sensitive,
            /// but there is an option for whether to include or exclude mappings for dotted I
            /// and dotless i that are marked with 'T' in CaseFolding.txt.
            /// </remarks>
            /// <param name="src">The original string.</param>
            /// <returns>The result string.</returns>
            /// <seealso cref="Lang.UCharacter.FoldCase(string, Lang.FoldCase)"/>
            /// <draft>ICU 60</draft>
            /// <provisional>This API might change or be removed in a future release.</provisional>
            public string Apply(string src)
            {
                return CaseMapImpl.Fold(internalOptions, src);
            }

            /// <summary>
            /// Case-folds a string.
            /// The result may be longer or shorter than the original.
            /// </summary>
            /// <remarks>
            /// Case-folding is locale-independent and not context-sensitive,
            /// but there is an option for whether to include or exclude mappings for dotted I
            /// and dotless i that are marked with 'T' in CaseFolding.txt.
            /// </remarks>
            /// <param name="src">The original string.</param>
            /// <returns>The result string.</returns>
            /// <seealso cref="Lang.UCharacter.FoldCase(string, Lang.FoldCase)"/>
            /// <draft>ICU 60</draft>
            /// <provisional>This API might change or be removed in a future release.</provisional>
            public string Apply(StringBuilder src)
            {
                return CaseMapImpl.Fold(internalOptions, src);
            }

            /// <summary>
            /// Case-folds a string.
            /// The result may be longer or shorter than the original.
            /// </summary>
            /// <remarks>
            /// Case-folding is locale-independent and not context-sensitive,
            /// but there is an option for whether to include or exclude mappings for dotted I
            /// and dotless i that are marked with 'T' in CaseFolding.txt.
            /// </remarks>
            /// <param name="src">The original string.</param>
            /// <returns>The result string.</returns>
            /// <seealso cref="Lang.UCharacter.FoldCase(string, Lang.FoldCase)"/>
            /// <draft>ICU 60</draft>
            /// <provisional>This API might change or be removed in a future release.</provisional>
            public string Apply(char[] src)
            {
                return CaseMapImpl.Fold(internalOptions, src);
            }

            /// <summary>
            /// Case-folds a string.
            /// The result may be longer or shorter than the original.
            /// </summary>
            /// <remarks>
            /// Case-folding is locale-independent and not context-sensitive,
            /// but there is an option for whether to include or exclude mappings for dotted I
            /// and dotless i that are marked with 'T' in CaseFolding.txt.
            /// </remarks>
            /// <param name="src">The original string.</param>
            /// <returns>The result string.</returns>
            /// <seealso cref="Lang.UCharacter.FoldCase(string, Lang.FoldCase)"/>
            /// <draft>ICU 60</draft>
            /// <provisional>This API might change or be removed in a future release.</provisional>
            internal string Apply(ICharSequence src)
            {
                return CaseMapImpl.Fold(internalOptions, src);
            }
    
            /// <summary>
            /// Case-folds a string and optionally records edits (see <see cref="OmitUnchangedText"/>).
            /// The result may be longer or shorter than the original.
            /// </summary>
            /// <remarks>
            /// Case-folding is locale-independent and not context-sensitive,
            /// but there is an option for whether to include or exclude mappings for dotted I
            /// and dotless i that are marked with 'T' in CaseFolding.txt.
            /// </remarks>
            /// <param name="src">The original string.</param>
            /// <param name="dest">A buffer for the result string. Must not be null.</param>
            /// <param name="edits">
            /// Records edits for index mapping, working with styled text,
            /// and getting only changes (if any).
            /// This function calls <see cref="Edits.Reset()"/> first. <paramref name="edits"/> can be null.
            /// </param>
            /// <returns><paramref name="dest"/> with the result string (or only changes) appended.</returns>
            /// <seealso cref="Lang.UCharacter.FoldCase(string, Lang.FoldCase)"/>
            /// <draft>ICU 59</draft>
            /// <provisional>This API might change or be removed in a future release.</provisional>
            public StringBuilder Apply(
                string src, StringBuilder dest, Edits edits)
            {
                return CaseMapImpl.Fold(internalOptions, src, dest, edits);
            }
    
            /// <summary>
            /// Case-folds a string and optionally records edits (see <see cref="OmitUnchangedText"/>).
            /// The result may be longer or shorter than the original.
            /// </summary>
            /// <remarks>
            /// Case-folding is locale-independent and not context-sensitive,
            /// but there is an option for whether to include or exclude mappings for dotted I
            /// and dotless i that are marked with 'T' in CaseFolding.txt.
            /// </remarks>
            /// <param name="src">The original string.</param>
            /// <param name="dest">A buffer for the result string. Must not be null.</param>
            /// <param name="edits">
            /// Records edits for index mapping, working with styled text,
            /// and getting only changes (if any).
            /// This function calls <see cref="Edits.Reset()"/> first. <paramref name="edits"/> can be null.
            /// </param>
            /// <returns><paramref name="dest"/> with the result string (or only changes) appended.</returns>
            /// <seealso cref="Lang.UCharacter.FoldCase(string, Lang.FoldCase)"/>
            /// <draft>ICU 59</draft>
            /// <provisional>This API might change or be removed in a future release.</provisional>
            public StringBuilder Apply(
                StringBuilder src, StringBuilder dest, Edits edits)
            {
                return CaseMapImpl.Fold(internalOptions, src, dest, edits);
            }
    
            /// <summary>
            /// Case-folds a string and optionally records edits (see <see cref="OmitUnchangedText"/>).
            /// The result may be longer or shorter than the original.
            /// </summary>
            /// <remarks>
            /// Case-folding is locale-independent and not context-sensitive,
            /// but there is an option for whether to include or exclude mappings for dotted I
            /// and dotless i that are marked with 'T' in CaseFolding.txt.
            /// </remarks>
            /// <param name="src">The original string.</param>
            /// <param name="dest">A buffer for the result string. Must not be null.</param>
            /// <param name="edits">
            /// Records edits for index mapping, working with styled text,
            /// and getting only changes (if any).
            /// This function calls <see cref="Edits.Reset()"/> first. <paramref name="edits"/> can be null.
            /// </param>
            /// <returns><paramref name="dest"/> with the result string (or only changes) appended.</returns>
            /// <seealso cref="Lang.UCharacter.FoldCase(string, Lang.FoldCase)"/>
            /// <draft>ICU 59</draft>
            /// <provisional>This API might change or be removed in a future release.</provisional>
            public StringBuilder Apply(
                char[] src, StringBuilder dest, Edits edits)
            {
                return CaseMapImpl.Fold(internalOptions, src, dest, edits);
            }
    
            /// <summary>
            /// Case-folds a string and optionally records edits (see <see cref="OmitUnchangedText"/>).
            /// The result may be longer or shorter than the original.
            /// </summary>
            /// <remarks>
            /// Case-folding is locale-independent and not context-sensitive,
            /// but there is an option for whether to include or exclude mappings for dotted I
            /// and dotless i that are marked with 'T' in CaseFolding.txt.
            /// </remarks>
            /// <param name="src">The original string.</param>
            /// <param name="dest">A buffer for the result string. Must not be null.</param>
            /// <param name="edits">
            /// Records edits for index mapping, working with styled text,
            /// and getting only changes (if any).
            /// This function calls <see cref="Edits.Reset()"/> first. <paramref name="edits"/> can be null.
            /// </param>
            /// <returns><paramref name="dest"/> with the result string (or only changes) appended.</returns>
            /// <seealso cref="Lang.UCharacter.FoldCase(string, Lang.FoldCase)"/>
            /// <draft>ICU 59</draft>
            /// <provisional>This API might change or be removed in a future release.</provisional>
            internal StringBuilder Apply(
                ICharSequence src, StringBuilder dest, Edits edits)
            {
                return CaseMapImpl.Fold(internalOptions, src, dest, edits);
            }
        
            /// <summary>
            /// Case-folds a string and optionally records edits (see <see cref="OmitUnchangedText"/>).
            /// The result may be longer or shorter than the original.
            /// </summary>
            /// <remarks>
            /// Case-folding is locale-independent and not context-sensitive,
            /// but there is an option for whether to include or exclude mappings for dotted I
            /// and dotless i that are marked with 'T' in CaseFolding.txt.
            /// </remarks>
            /// <param name="src">The original string.</param>
            /// <param name="dest">A buffer for the result string. Must not be null.</param>
            /// <param name="edits">
            /// Records edits for index mapping, working with styled text,
            /// and getting only changes (if any).
            /// This function calls <see cref="Edits.Reset()"/> first. <paramref name="edits"/> can be null.
            /// </param>
            /// <returns><paramref name="dest"/> with the result string (or only changes) appended.</returns>
            /// <seealso cref="Lang.UCharacter.FoldCase(string, Lang.FoldCase)"/>
            /// <draft>ICU 59</draft>
            /// <provisional>This API might change or be removed in a future release.</provisional>
            internal T Apply<T>(
                string src, T dest, Edits edits) where T : IAppendable
            {
                return CaseMapImpl.Fold(internalOptions, src, dest, edits);
            }
    
            /// <summary>
            /// Case-folds a string and optionally records edits (see <see cref="OmitUnchangedText"/>).
            /// The result may be longer or shorter than the original.
            /// </summary>
            /// <remarks>
            /// Case-folding is locale-independent and not context-sensitive,
            /// but there is an option for whether to include or exclude mappings for dotted I
            /// and dotless i that are marked with 'T' in CaseFolding.txt.
            /// </remarks>
            /// <param name="src">The original string.</param>
            /// <param name="dest">A buffer for the result string. Must not be null.</param>
            /// <param name="edits">
            /// Records edits for index mapping, working with styled text,
            /// and getting only changes (if any).
            /// This function calls <see cref="Edits.Reset()"/> first. <paramref name="edits"/> can be null.
            /// </param>
            /// <returns><paramref name="dest"/> with the result string (or only changes) appended.</returns>
            /// <seealso cref="Lang.UCharacter.FoldCase(string, Lang.FoldCase)"/>
            /// <draft>ICU 59</draft>
            /// <provisional>This API might change or be removed in a future release.</provisional>
            internal T Apply<T>(
                StringBuilder src, T dest, Edits edits) where T : IAppendable
            {
                return CaseMapImpl.Fold(internalOptions, src, dest, edits);
            }
    
            /// <summary>
            /// Case-folds a string and optionally records edits (see <see cref="OmitUnchangedText"/>).
            /// The result may be longer or shorter than the original.
            /// </summary>
            /// <remarks>
            /// Case-folding is locale-independent and not context-sensitive,
            /// but there is an option for whether to include or exclude mappings for dotted I
            /// and dotless i that are marked with 'T' in CaseFolding.txt.
            /// </remarks>
            /// <param name="src">The original string.</param>
            /// <param name="dest">A buffer for the result string. Must not be null.</param>
            /// <param name="edits">
            /// Records edits for index mapping, working with styled text,
            /// and getting only changes (if any).
            /// This function calls <see cref="Edits.Reset()"/> first. <paramref name="edits"/> can be null.
            /// </param>
            /// <returns><paramref name="dest"/> with the result string (or only changes) appended.</returns>
            /// <seealso cref="Lang.UCharacter.FoldCase(string, Lang.FoldCase)"/>
            /// <draft>ICU 59</draft>
            /// <provisional>This API might change or be removed in a future release.</provisional>
            internal T Apply<T>(
                char[] src, T dest, Edits edits) where T : IAppendable
            {
                return CaseMapImpl.Fold(internalOptions, src, dest, edits);
            }
    
            /// <summary>
            /// Case-folds a string and optionally records edits (see <see cref="OmitUnchangedText"/>).
            /// The result may be longer or shorter than the original.
            /// </summary>
            /// <remarks>
            /// Case-folding is locale-independent and not context-sensitive,
            /// but there is an option for whether to include or exclude mappings for dotted I
            /// and dotless i that are marked with 'T' in CaseFolding.txt.
            /// </remarks>
            /// <param name="src">The original string.</param>
            /// <param name="dest">A buffer for the result string. Must not be null.</param>
            /// <param name="edits">
            /// Records edits for index mapping, working with styled text,
            /// and getting only changes (if any).
            /// This function calls <see cref="Edits.Reset()"/> first. <paramref name="edits"/> can be null.
            /// </param>
            /// <returns><paramref name="dest"/> with the result string (or only changes) appended.</returns>
            /// <seealso cref="Lang.UCharacter.FoldCase(string, Lang.FoldCase)"/>
            /// <draft>ICU 59</draft>
            /// <provisional>This API might change or be removed in a future release.</provisional>
            internal T Apply<T>(
                ICharSequence src, T dest, Edits edits) where T : IAppendable
            {
                return CaseMapImpl.Fold(internalOptions, src, dest, edits);
            }
    
        }
    }
}