<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ArgumentOutOfRange_Enum" xml:space="preserve">
    <value>The enumeration value '{0}' was out of range of the '{1}' enum.</value>
  </data>
  <data name="ArgumentOutOfRange_Radix" xml:space="preserve">
    <value>Radix must be greater than or equal to Character.MinRadix and less than or equal to Character.MaxRadix.</value>
  </data>
  <data name="Format_EmptyInputString" xml:space="preserve">
    <value>Input string was either empty or contained only whitespace.</value>
  </data>
  <data name="Format_ExtraJunkAtEnd" xml:space="preserve">
    <value>Additional non-parsable characters are at the end of the string.</value>
  </data>
  <data name="Format_NoParsibleDigits" xml:space="preserve">
    <value>Could not find any recognizable digits.</value>
  </data>
  <data name="Format_UnparsibleDigit" xml:space="preserve">
    <value>One or more of the input characters were unrecognizable as digits.</value>
  </data>
  <data name="math00" xml:space="preserve">
    <value>Invalid rounding mode</value>
  </data>
  <data name="math01" xml:space="preserve">
    <value>power of ten too big</value>
  </data>
  <data name="math02" xml:space="preserve">
    <value>Scale out of range.</value>
  </data>
  <data name="math03" xml:space="preserve">
    <value>Infinite or NaN</value>
  </data>
  <data name="math04" xml:space="preserve">
    <value>Division by zero</value>
  </data>
  <data name="math05" xml:space="preserve">
    <value>Non-terminating decimal expansion; no exact representable decimal result.</value>
  </data>
  <data name="math06" xml:space="preserve">
    <value>Division impossible</value>
  </data>
  <data name="math07" xml:space="preserve">
    <value>Invalid Operation</value>
  </data>
  <data name="math08" xml:space="preserve">
    <value>Rounding necessary</value>
  </data>
  <data name="math09" xml:space="preserve">
    <value>Overflow</value>
  </data>
  <data name="math0A" xml:space="preserve">
    <value>Underflow</value>
  </data>
  <data name="math0B" xml:space="preserve">
    <value>null unscaled value</value>
  </data>
  <data name="math0C" xml:space="preserve">
    <value>Digits &lt; 0</value>
  </data>
  <data name="math0D" xml:space="preserve">
    <value>null RoundingMode</value>
  </data>
  <data name="math0E" xml:space="preserve">
    <value>bad string format</value>
  </data>
  <data name="math0F" xml:space="preserve">
    <value>bad precision value</value>
  </data>
  <data name="math10" xml:space="preserve">
    <value>null roundingMode</value>
  </data>
  <data name="math11" xml:space="preserve">
    <value>Radix out of range</value>
  </data>
  <data name="math12" xml:space="preserve">
    <value>Zero length BigInteger</value>
  </data>
  <data name="math13" xml:space="preserve">
    <value>Invalid signum value</value>
  </data>
  <data name="math14" xml:space="preserve">
    <value>signum-magnitude mismatch</value>
  </data>
  <data name="math15" xml:space="preserve">
    <value>Negative bit address</value>
  </data>
  <data name="math16" xml:space="preserve">
    <value>Negative exponent</value>
  </data>
  <data name="math17" xml:space="preserve">
    <value>BigInteger divide by zero</value>
  </data>
  <data name="math18" xml:space="preserve">
    <value>BigInteger: modulus not positive</value>
  </data>
  <data name="math19" xml:space="preserve">
    <value>BigInteger not invertible.</value>
  </data>
  <data name="math1A" xml:space="preserve">
    <value>start &lt; 0: {0}</value>
  </data>
  <data name="math1B" xml:space="preserve">
    <value>numBits must be non-negative</value>
  </data>
  <data name="math1C" xml:space="preserve">
    <value>bitLength &lt; 2</value>
  </data>
  <data name="Overflow_BigInteger" xml:space="preserve">
    <value>Value was either too large or too small for a BigInteger.</value>
  </data>
  <data name="Overflow_NegativeUnsigned" xml:space="preserve">
    <value>The string was being parsed as an unsigned number and could not have a negative sign.</value>
  </data>
</root>