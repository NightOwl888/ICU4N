<#@ output extension=".cs" #>
<#@ include file="../../../../codegen/FilterDeclarations.tt" #>
<#
AppendableFilter = (a) => a.Name != "ValueStringBuilder";
string codeGenerationRelativePath = @"../../../../codegen";
#><#@ include file="../../../../codegen/DataLoader.tt" #>//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using J2N.Text;
using System;
using System.Collections.Generic;
using System.Text;

namespace ICU4N.Text
{
    internal static partial class UnicodeSetExtensions
    {
<# foreach (var charSequence in CharSequences) { #>
    <# if (charSequence.Name != "ReadOnlySpan<char>") { #>
<#= GetBeginFeature(charSequence) #>

        /// <seealso cref="UnicodeSet.AddAll(UnicodeSet)"/>
        /// <draft>ICU4N 60.1</draft>
        /// <provisional>This API might change or be removed in a future release.</provisional>
        // See ticket #11395, this is safe.
<# if (charSequence.Name == "char[]") { #>        //[CLSCompliant(false)] // ICU4N: This is only required if exposed publicly (which we don't want to do because of naming)<# } #>

        <#=charSequence.Accessibility#> static UnicodeSet AddAll(this UnicodeSet set, params <#=charSequence#>[] collection)
        {
            if (set is null)
                throw new ArgumentNullException(nameof(set));
            return set.AddAll(collection);
        }
<#= GetEndFeature(charSequence) #>
    <# } #>
<# } #>
<# foreach (var charSequence in CharSequences) { #>
<#= GetBeginFeature(charSequence) #>

        /// <summary>
        /// Adds each of the characters in this string to the set. Thus "ch" =&gt; {"c", "h"}
        /// If this set already any particular character, it has no effect on that character.
        /// </summary>
        /// <param name="set">This set.</param>
        /// <param name="s">The source string.</param>
        /// <returns>this object, for chaining.</returns>
        /// <draft>ICU4N 60.1</draft>
        /// <provisional>This API might change or be removed in a future release.</provisional>
        <#=charSequence.Accessibility#> static UnicodeSet AddAll(this UnicodeSet set, <#=charSequence#> s)
        {
            if (set is null)
                throw new ArgumentNullException(nameof(set));
            return set.AddAll(s);
        }
<#= GetEndFeature(charSequence) #>
<# } #>
<# foreach (var charSequence in CharSequences) { #>
<#= GetBeginFeature(charSequence) #>

        /// <summary>
        /// Complement the specified string in this set.
        /// The set will not contain the specified string once the call
        /// returns.
        /// <para/>
        /// <b>Warning: you cannot add an empty string ("") to a UnicodeSet.</b>
        /// </summary>
        /// <param name="set">This set.</param>
        /// <param name="s">The string to complement.</param>
        /// <returns>This object, for chaining.</returns>
        /// <draft>ICU4N 60.1</draft>
        /// <provisional>This API might change or be removed in a future release.</provisional>
        <#=charSequence.Accessibility#> static UnicodeSet Complement(this UnicodeSet set, <#=charSequence#> s)
        {
            if (set is null)
                throw new ArgumentNullException(nameof(set));
            return set.Complement(s);
        }
<#= GetEndFeature(charSequence) #>
<# } #>
<# foreach (var charSequence in CharSequences) { #>
<#= GetBeginFeature(charSequence) #>

        /// <summary>
        /// Complement EACH of the characters in this string. Note: "ch" == {"c", "h"}
        /// If this set already any particular character, it has no effect on that character.
        /// </summary>
        /// <param name="set">This set.</param>
        /// <param name="s">The source string.</param>
        /// <returns>This object, for chaining.</returns>
        /// <draft>ICU4N 60.1</draft>
        /// <provisional>This API might change or be removed in a future release.</provisional>
        <#=charSequence.Accessibility#> static UnicodeSet ComplementAll(this UnicodeSet set, <#=charSequence#> s)
        {
            if (set is null)
                throw new ArgumentNullException(nameof(set));
            return set.ComplementAll(s);
        }
<#= GetEndFeature(charSequence) #>
<# } #>
<# foreach (var charSequence in CharSequences) { #>
    <# if (charSequence.Name != "ReadOnlySpan<char>") { #>
<#= GetBeginFeature(charSequence) #>

        /// <seealso cref="UnicodeSet.ContainsAll(UnicodeSet)"/>
        /// <draft>ICU4N 60.1</draft>
        /// <provisional>This API might change or be removed in a future release.</provisional>
<# if (charSequence.Name == "ICharSequence") { #>
        <#=charSequence.Accessibility#> static bool ContainsAll<T>(this UnicodeSet set, IEnumerable<T> collection) where T : <#=charSequence#>
<# } else { #>
        <#=charSequence.Accessibility#> static bool ContainsAll(this UnicodeSet set, IEnumerable<<#=charSequence#>> collection)
<# } #>
        {
            if (set is null)
                throw new ArgumentNullException(nameof(set));
            return set.ContainsAll(collection);
        }
<#= GetEndFeature(charSequence) #>
    <# } #>
<# } #>
<# foreach (var charSequence in CharSequences) { #>
<#= GetBeginFeature(charSequence) #>

        /// <summary>
        /// Returns true if this set contains one or more of the characters
        /// of the given string.
        /// </summary>
        /// <param name="set">This set.</param>
        /// <param name="s">String containing characters to be checked for containment.</param>
        /// <returns>true if the condition is met.</returns>
        /// <draft>ICU4N 60.1</draft>
        /// <provisional>This API might change or be removed in a future release.</provisional>
        <#=charSequence.Accessibility#> static bool ContainsSome(this UnicodeSet set, <#=charSequence#> s)
        {
            if (set is null)
                throw new ArgumentNullException(nameof(set));
            return set.ContainsSome(s);
        }
<#= GetEndFeature(charSequence) #>
<# } #>
<# foreach (var charSequence in CharSequences) { #>
    <# if (charSequence.Name != "ReadOnlySpan<char>") { #>
<#= GetBeginFeature(charSequence) #>

        /// <seealso cref="UnicodeSet.ContainsSome(UnicodeSet)"/>
        /// <draft>ICU4N 60.1</draft>
        /// <provisional>This API might change or be removed in a future release.</provisional>
<# if (charSequence.Name == "ICharSequence") { #>
        <#=charSequence.Accessibility#> static bool ContainsSome<T>(this UnicodeSet set, IEnumerable<T> collection) where T : <#=charSequence#>
<# } else { #>
        <#=charSequence.Accessibility#> static bool ContainsSome(this UnicodeSet set, IEnumerable<<#=charSequence#>> collection)
<# } #>
        {
            if (set is null)
                throw new ArgumentNullException(nameof(set));
            return set.ContainsSome(collection);
        }
<#= GetEndFeature(charSequence) #>
    <# } #>
<# } #>
<# foreach (var charSequence in CharSequences) { #>
<#= GetBeginFeature(charSequence) #>

        /// <summary>
        /// Remove EACH of the characters in this string. Note: "ch" == {"c", "h"}
        /// If this set already any particular character, it has no effect on that character.
        /// </summary>
        /// <param name="set">This set.</param>
        /// <param name="s">The source string.</param>
        /// <returns>This object, for chaining.</returns>
        /// <draft>ICU4N 60.1</draft>
        /// <provisional>This API might change or be removed in a future release.</provisional>
        <#=charSequence.Accessibility#> static UnicodeSet RemoveAll(this UnicodeSet set, <#=charSequence#> s)
        {
            if (set is null)
                throw new ArgumentNullException(nameof(set));
            return set.RemoveAll(s);
        }
<#= GetEndFeature(charSequence) #>
<# } #>
<# foreach (var charSequence in CharSequences) { #>
    <# if (charSequence.Name != "ReadOnlySpan<char>") { #>
<#= GetBeginFeature(charSequence) #>

        /// <seealso cref="UnicodeSet.RemoveAll(UnicodeSet)"/>
        /// <draft>ICU4N 60.1</draft>
        /// <provisional>This API might change or be removed in a future release.</provisional>
<# if (charSequence.Name == "ICharSequence") { #>
        <#=charSequence.Accessibility#> static UnicodeSet RemoveAll<T>(this UnicodeSet set, IEnumerable<T> collection) where T : <#=charSequence#>
<# } else { #>
        <#=charSequence.Accessibility#> static UnicodeSet RemoveAll(this UnicodeSet set, IEnumerable<<#=charSequence#>> collection)
<# } #>
        {
            if (set is null)
                throw new ArgumentNullException(nameof(set));
            return set.RemoveAll(collection);
        }
<#= GetEndFeature(charSequence) #>
    <# } #>
<# } #>
<# foreach (var charSequence in CharSequences) { #>
<#= GetBeginFeature(charSequence) #>

        /// <summary>
        /// Retain the specified string in this set if it is present.
        /// Upon return this set will be empty if it did not contain <paramref name="cs"/>, or
        /// will only contain <paramref name="cs"/> if it did contain <paramref name="cs"/>.
        /// </summary>
        /// <param name="set">This set.</param>
        /// <param name="cs">The string to be retained.</param>
        /// <returns>This object, for chaining.</returns>
        /// <draft>ICU4N 60.1</draft>
        /// <provisional>This API might change or be removed in a future release.</provisional>
        <#=charSequence.Accessibility#> static UnicodeSet Retain(this UnicodeSet set, <#=charSequence#> cs)
        {
            if (set is null)
                throw new ArgumentNullException(nameof(set));
            return set.Retain(cs);
        }
<#= GetEndFeature(charSequence) #>
<# } #>
<# foreach (var charSequence in CharSequences) { #>
    <# if (charSequence.Name != "ReadOnlySpan<char>") { #>
<#= GetBeginFeature(charSequence) #>

        /// <seealso cref="UnicodeSet.RetainAll(UnicodeSet)"/>
        /// <draft>ICU4N 60.1</draft>
        /// <provisional>This API might change or be removed in a future release.</provisional>
<# if (charSequence.Name == "ICharSequence") { #>
        <#=charSequence.Accessibility#> static UnicodeSet RetainAll<T>(this UnicodeSet set, IEnumerable<T> collection) where T : <#=charSequence#>
<# } else { #>
        <#=charSequence.Accessibility#> static UnicodeSet RetainAll(this UnicodeSet set, IEnumerable<<#=charSequence#>> collection)
<# } #>
        {
            if (set is null)
                throw new ArgumentNullException(nameof(set));
            return set.RetainAll(collection);
        }
<#= GetEndFeature(charSequence) #>
    <# } #>
<# } #>
<# foreach (var charSequence in CharSequences) { #>
<#= GetBeginFeature(charSequence) #>

        /// <summary>
        /// Retains EACH of the characters in this string. Note: "ch" == {"c", "h"}
        /// If this set already any particular character, it has no effect on that character.
        /// </summary>
        /// <param name="set">This set.</param>
        /// <param name="s">The source string.</param>
        /// <returns>This object, for chaining.</returns>
        /// <draft>ICU4N 60.1</draft>
        /// <provisional>This API might change or be removed in a future release.</provisional>
        <#=charSequence.Accessibility#> static UnicodeSet RetainAll(this UnicodeSet set, <#=charSequence#> s)
        {
            if (set is null)
                throw new ArgumentNullException(nameof(set));
            return set.RetainAll(s);
        }
<#= GetEndFeature(charSequence) #>
<# } #>
    }
}
<#@ include file="../../../../codegen/SharedObjects.tt" #>