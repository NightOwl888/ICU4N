<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="System.Xml.Linq" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Xml.Linq" #>
<#@ import namespace="System.Xml.XPath" #>
<#@ output extension=".cs" #>
<#
    // Load common settings from the XML file using relative path
    string settingsPath = System.IO.Path.GetFullPath(System.IO.Path.Combine(Host.ResolvePath(string.Empty), @"../../../src/CodeGenerationSettings.xml"));
    XDocument document = XDocument.Load(settingsPath);
    string[] charSequences = document.XPathSelectElements(@"//codeGen/charSequences/charSequence").Select(x => x.Value).ToArray();
    string charSequenceAccessibility = document.XPathSelectElement(@"//codeGen/charSequenceAccessibility").Value;
    string[] appendables = document.XPathSelectElements(@"//codeGen/appendables/appendable").Select(x => x.Value).ToArray();
#>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using J2N.Text;
using System.Text;

namespace ICU4N.Util
{
    public sealed partial class CharsTrieBuilder
    {
<# foreach (var charSequence in charSequences) { #>

        /// <summary>
        /// Adds a (<#= charSequence #>, value) pair.
        /// The string must be unique.
        /// The string contents will be copied; the builder does not keep
        /// a reference to the input <see cref="<#=charSequence == "char[]" ? "T:"+charSequence : charSequence#>"/>.
        /// </summary>
        /// <param name="s">The input <see cref="<#=charSequence == "char[]" ? "T:"+charSequence : charSequence#>"/>.</param>
        /// <param name="value">The value associated with this char sequence.</param>
        /// <returns>This.</returns>
        /// <stable>ICU 4.8</stable>
        <#=charSequence=="ICharSequence" ? charSequenceAccessibility : "public"#> CharsTrieBuilder Add(<#= charSequence #> s, int value)
        {
#pragma warning disable 612, 618
<# if (charSequence=="ICharSequence") { #>
            AddImpl(s, value);
<# } else { #>
            AddImpl(s.AsCharSequence(), value);
<# } #>
#pragma warning restore 612, 618
            return this;
        }
<# } #>
    }
}