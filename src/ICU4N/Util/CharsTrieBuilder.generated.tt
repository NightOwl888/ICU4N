<#@ output extension=".cs" #>
<#@ include file="../../../codegen/FilterDeclarations.tt" #>
<#
CharSequenceFilter = (c) => c.Name != "ReadOnlySpan<char>";
AppendableFilter = (a) => a.Name != "ValueStringBuilder";
string codeGenerationRelativePath = @"../../../codegen";
#><#@ include file="../../../codegen/DataLoader.tt" #>//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using J2N.Text;
using System.Text;

namespace ICU4N.Util
{
    public sealed partial class CharsTrieBuilder
    {
<# foreach (var charSequence in CharSequences) { #>

        /// <summary>
        /// Adds a (<#= charSequence.NameForDocAsType #>, value) pair.
        /// The string must be unique.
        /// The string contents will be copied; the builder does not keep
        /// a reference to the input <see cref="<#=charSequence.NameForDocAsLink#>"/>.
        /// </summary>
        /// <param name="s">The input <see cref="<#=charSequence.NameForDocAsLink#>"/>.</param>
        /// <param name="value">The value associated with this char sequence.</param>
        /// <returns>This.</returns>
        /// <stable>ICU 4.8</stable>
        <#=charSequence.Accessibility#> CharsTrieBuilder Add(<#= charSequence #> s, int value)
        {
#pragma warning disable 612, 618
<# if (charSequence.Name=="ICharSequence") { #>
            AddImpl(s, value);
<# } else { #>
            AddImpl(s.AsCharSequence(), value);
<# } #>
#pragma warning restore 612, 618
            return this;
        }
<# } #>
    }
}
<#@ include file="../../../codegen/SharedObjects.tt" #>