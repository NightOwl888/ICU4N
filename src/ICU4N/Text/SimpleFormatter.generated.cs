//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using ICU4N.Impl;
using J2N.Text;
using System;
using System.Text;

namespace ICU4N.Text
{
    public sealed partial class SimpleFormatter
    {
        #region Format

        /// <summary>
        /// Formats the given values.
        /// </summary>
        /// <param name="value0">The first argument value.</param>
        /// <stable>ICU 57</stable>
        public string Format(ReadOnlySpan<char> value0)
        {
            return SimpleFormatterImpl.FormatCompiledPattern(compiledPattern.AsSpan(), value0);
        }

        /// <summary>
        /// Formats the given values.
        /// </summary>
        /// <param name="value0">The first argument value.</param>
        /// <param name="value1">The second argument value.</param>
        /// <stable>ICU 57</stable>
        public string Format(ReadOnlySpan<char> value0, ReadOnlySpan<char> value1)
        {
            return SimpleFormatterImpl.FormatCompiledPattern(compiledPattern.AsSpan(), value0, value1);
        }

        /// <summary>
        /// Formats the given values.
        /// </summary>
        /// <param name="value0">The first argument value.</param>
        /// <param name="value1">The second argument value.</param>
        /// <param name="value2">The third argument value.</param>
        /// <stable>ICU 57</stable>
        public string Format(ReadOnlySpan<char> value0, ReadOnlySpan<char> value1, ReadOnlySpan<char> value2)
        {
            return SimpleFormatterImpl.FormatCompiledPattern(compiledPattern.AsSpan(), value0, value1, value2);
        }

        /// <summary>
        /// Formats the given values.
        /// </summary>
        /// <param name="value0">The first argument value.</param>
        /// <param name="value1">The second argument value.</param>
        /// <param name="value2">The third argument value.</param>
        /// <param name="value3">The fourth argument value.</param>
        /// <stable>ICU 57</stable>
        public string Format(ReadOnlySpan<char> value0, ReadOnlySpan<char> value1, ReadOnlySpan<char> value2, ReadOnlySpan<char> value3)
        {
            return SimpleFormatterImpl.FormatCompiledPattern(compiledPattern.AsSpan(), value0, value1, value2, value3);
        }

        /// <summary>
        /// Formats the given values.
        /// </summary>
        /// <param name="value0">The first argument value.</param>
        /// <param name="value1">The second argument value.</param>
        /// <param name="value2">The third argument value.</param>
        /// <param name="value3">The fourth argument value.</param>
        /// <param name="value4">The fifth argument value.</param>
        /// <stable>ICU 57</stable>
        public string Format(ReadOnlySpan<char> value0, ReadOnlySpan<char> value1, ReadOnlySpan<char> value2, ReadOnlySpan<char> value3, ReadOnlySpan<char> value4)
        {
            return SimpleFormatterImpl.FormatCompiledPattern(compiledPattern.AsSpan(), value0, value1, value2, value3, value4);
        }

        /// <summary>
        /// Formats the given values.
        /// </summary>
        /// <param name="value0">The first argument value.</param>
        /// <param name="value1">The second argument value.</param>
        /// <param name="value2">The third argument value.</param>
        /// <param name="value3">The fourth argument value.</param>
        /// <param name="value4">The fifth argument value.</param>
        /// <param name="value5">The sixth argument value.</param>
        /// <stable>ICU 57</stable>
        public string Format(ReadOnlySpan<char> value0, ReadOnlySpan<char> value1, ReadOnlySpan<char> value2, ReadOnlySpan<char> value3, ReadOnlySpan<char> value4, ReadOnlySpan<char> value5)
        {
            return SimpleFormatterImpl.FormatCompiledPattern(compiledPattern.AsSpan(), value0, value1, value2, value3, value4, value5);
        }

        /// <summary>
        /// Formats the given values.
        /// </summary>
        /// <param name="value0">The first argument value.</param>
        /// <param name="value1">The second argument value.</param>
        /// <param name="value2">The third argument value.</param>
        /// <param name="value3">The fourth argument value.</param>
        /// <param name="value4">The fifth argument value.</param>
        /// <param name="value5">The sixth argument value.</param>
        /// <param name="value6">The seventh argument value.</param>
        /// <stable>ICU 57</stable>
        public string Format(ReadOnlySpan<char> value0, ReadOnlySpan<char> value1, ReadOnlySpan<char> value2, ReadOnlySpan<char> value3, ReadOnlySpan<char> value4, ReadOnlySpan<char> value5, ReadOnlySpan<char> value6)
        {
            return SimpleFormatterImpl.FormatCompiledPattern(compiledPattern.AsSpan(), value0, value1, value2, value3, value4, value5, value6);
        }

        /// <summary>
        /// Formats the given values.
        /// </summary>
        /// <param name="value0">The first argument value.</param>
        /// <param name="value1">The second argument value.</param>
        /// <param name="value2">The third argument value.</param>
        /// <param name="value3">The fourth argument value.</param>
        /// <param name="value4">The fifth argument value.</param>
        /// <param name="value5">The sixth argument value.</param>
        /// <param name="value6">The seventh argument value.</param>
        /// <param name="value7">The eighth argument value.</param>
        /// <stable>ICU 57</stable>
        public string Format(ReadOnlySpan<char> value0, ReadOnlySpan<char> value1, ReadOnlySpan<char> value2, ReadOnlySpan<char> value3, ReadOnlySpan<char> value4, ReadOnlySpan<char> value5, ReadOnlySpan<char> value6, ReadOnlySpan<char> value7)
        {
            return SimpleFormatterImpl.FormatCompiledPattern(compiledPattern.AsSpan(), value0, value1, value2, value3, value4, value5, value6, value7);
        }

        /// <summary>
        /// Formats the given values.
        /// </summary>
        /// <param name="value0">The first argument value.</param>
        /// <param name="value1">The second argument value.</param>
        /// <param name="value2">The third argument value.</param>
        /// <param name="value3">The fourth argument value.</param>
        /// <param name="value4">The fifth argument value.</param>
        /// <param name="value5">The sixth argument value.</param>
        /// <param name="value6">The seventh argument value.</param>
        /// <param name="value7">The eighth argument value.</param>
        /// <param name="value8">The ninth argument value.</param>
        /// <stable>ICU 57</stable>
        public string Format(ReadOnlySpan<char> value0, ReadOnlySpan<char> value1, ReadOnlySpan<char> value2, ReadOnlySpan<char> value3, ReadOnlySpan<char> value4, ReadOnlySpan<char> value5, ReadOnlySpan<char> value6, ReadOnlySpan<char> value7, ReadOnlySpan<char> value8)
        {
            return SimpleFormatterImpl.FormatCompiledPattern(compiledPattern.AsSpan(), value0, value1, value2, value3, value4, value5, value6, value7, value8);
        }

        /// <summary>
        /// Formats the given values.
        /// </summary>
        /// <param name="value0">The first argument value.</param>
        /// <param name="value1">The second argument value.</param>
        /// <param name="value2">The third argument value.</param>
        /// <param name="value3">The fourth argument value.</param>
        /// <param name="value4">The fifth argument value.</param>
        /// <param name="value5">The sixth argument value.</param>
        /// <param name="value6">The seventh argument value.</param>
        /// <param name="value7">The eighth argument value.</param>
        /// <param name="value8">The ninth argument value.</param>
        /// <param name="value9">The tenth argument value.</param>
        /// <stable>ICU 57</stable>
        public string Format(ReadOnlySpan<char> value0, ReadOnlySpan<char> value1, ReadOnlySpan<char> value2, ReadOnlySpan<char> value3, ReadOnlySpan<char> value4, ReadOnlySpan<char> value5, ReadOnlySpan<char> value6, ReadOnlySpan<char> value7, ReadOnlySpan<char> value8, ReadOnlySpan<char> value9)
        {
            return SimpleFormatterImpl.FormatCompiledPattern(compiledPattern.AsSpan(), value0, value1, value2, value3, value4, value5, value6, value7, value8, value9);
        }

        /// <summary>
        /// Formats the given values.
        /// </summary>
        /// <param name="value0">The first argument value.</param>
        /// <param name="value1">The second argument value.</param>
        /// <param name="value2">The third argument value.</param>
        /// <param name="value3">The fourth argument value.</param>
        /// <param name="value4">The fifth argument value.</param>
        /// <param name="value5">The sixth argument value.</param>
        /// <param name="value6">The seventh argument value.</param>
        /// <param name="value7">The eighth argument value.</param>
        /// <param name="value8">The ninth argument value.</param>
        /// <param name="value9">The tenth argument value.</param>
        /// <param name="value10">The eleventh argument value.</param>
        /// <stable>ICU 57</stable>
        public string Format(ReadOnlySpan<char> value0, ReadOnlySpan<char> value1, ReadOnlySpan<char> value2, ReadOnlySpan<char> value3, ReadOnlySpan<char> value4, ReadOnlySpan<char> value5, ReadOnlySpan<char> value6, ReadOnlySpan<char> value7, ReadOnlySpan<char> value8, ReadOnlySpan<char> value9, ReadOnlySpan<char> value10)
        {
            return SimpleFormatterImpl.FormatCompiledPattern(compiledPattern.AsSpan(), value0, value1, value2, value3, value4, value5, value6, value7, value8, value9, value10);
        }

        /// <summary>
        /// Formats the given values.
        /// </summary>
        /// <param name="value0">The first argument value.</param>
        /// <param name="value1">The second argument value.</param>
        /// <param name="value2">The third argument value.</param>
        /// <param name="value3">The fourth argument value.</param>
        /// <param name="value4">The fifth argument value.</param>
        /// <param name="value5">The sixth argument value.</param>
        /// <param name="value6">The seventh argument value.</param>
        /// <param name="value7">The eighth argument value.</param>
        /// <param name="value8">The ninth argument value.</param>
        /// <param name="value9">The tenth argument value.</param>
        /// <param name="value10">The eleventh argument value.</param>
        /// <param name="value11">The twelveth argument value.</param>
        /// <stable>ICU 57</stable>
        public string Format(ReadOnlySpan<char> value0, ReadOnlySpan<char> value1, ReadOnlySpan<char> value2, ReadOnlySpan<char> value3, ReadOnlySpan<char> value4, ReadOnlySpan<char> value5, ReadOnlySpan<char> value6, ReadOnlySpan<char> value7, ReadOnlySpan<char> value8, ReadOnlySpan<char> value9, ReadOnlySpan<char> value10, ReadOnlySpan<char> value11)
        {
            return SimpleFormatterImpl.FormatCompiledPattern(compiledPattern.AsSpan(), value0, value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11);
        }

        /// <summary>
        /// Formats the given values.
        /// </summary>
        /// <param name="value0">The first argument value.</param>
        /// <param name="value1">The second argument value.</param>
        /// <param name="value2">The third argument value.</param>
        /// <param name="value3">The fourth argument value.</param>
        /// <param name="value4">The fifth argument value.</param>
        /// <param name="value5">The sixth argument value.</param>
        /// <param name="value6">The seventh argument value.</param>
        /// <param name="value7">The eighth argument value.</param>
        /// <param name="value8">The ninth argument value.</param>
        /// <param name="value9">The tenth argument value.</param>
        /// <param name="value10">The eleventh argument value.</param>
        /// <param name="value11">The twelveth argument value.</param>
        /// <param name="value12">The thirteenth argument value.</param>
        /// <stable>ICU 57</stable>
        public string Format(ReadOnlySpan<char> value0, ReadOnlySpan<char> value1, ReadOnlySpan<char> value2, ReadOnlySpan<char> value3, ReadOnlySpan<char> value4, ReadOnlySpan<char> value5, ReadOnlySpan<char> value6, ReadOnlySpan<char> value7, ReadOnlySpan<char> value8, ReadOnlySpan<char> value9, ReadOnlySpan<char> value10, ReadOnlySpan<char> value11, ReadOnlySpan<char> value12)
        {
            return SimpleFormatterImpl.FormatCompiledPattern(compiledPattern.AsSpan(), value0, value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12);
        }

        /// <summary>
        /// Formats the given values.
        /// </summary>
        /// <param name="value0">The first argument value.</param>
        /// <param name="value1">The second argument value.</param>
        /// <param name="value2">The third argument value.</param>
        /// <param name="value3">The fourth argument value.</param>
        /// <param name="value4">The fifth argument value.</param>
        /// <param name="value5">The sixth argument value.</param>
        /// <param name="value6">The seventh argument value.</param>
        /// <param name="value7">The eighth argument value.</param>
        /// <param name="value8">The ninth argument value.</param>
        /// <param name="value9">The tenth argument value.</param>
        /// <param name="value10">The eleventh argument value.</param>
        /// <param name="value11">The twelveth argument value.</param>
        /// <param name="value12">The thirteenth argument value.</param>
        /// <param name="value13">The fourteenth argument value.</param>
        /// <stable>ICU 57</stable>
        public string Format(ReadOnlySpan<char> value0, ReadOnlySpan<char> value1, ReadOnlySpan<char> value2, ReadOnlySpan<char> value3, ReadOnlySpan<char> value4, ReadOnlySpan<char> value5, ReadOnlySpan<char> value6, ReadOnlySpan<char> value7, ReadOnlySpan<char> value8, ReadOnlySpan<char> value9, ReadOnlySpan<char> value10, ReadOnlySpan<char> value11, ReadOnlySpan<char> value12, ReadOnlySpan<char> value13)
        {
            return SimpleFormatterImpl.FormatCompiledPattern(compiledPattern.AsSpan(), value0, value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13);
        }

        /// <summary>
        /// Formats the given values.
        /// </summary>
        /// <param name="value0">The first argument value.</param>
        /// <param name="value1">The second argument value.</param>
        /// <param name="value2">The third argument value.</param>
        /// <param name="value3">The fourth argument value.</param>
        /// <param name="value4">The fifth argument value.</param>
        /// <param name="value5">The sixth argument value.</param>
        /// <param name="value6">The seventh argument value.</param>
        /// <param name="value7">The eighth argument value.</param>
        /// <param name="value8">The ninth argument value.</param>
        /// <param name="value9">The tenth argument value.</param>
        /// <param name="value10">The eleventh argument value.</param>
        /// <param name="value11">The twelveth argument value.</param>
        /// <param name="value12">The thirteenth argument value.</param>
        /// <param name="value13">The fourteenth argument value.</param>
        /// <param name="value14">The fifteenth argument value.</param>
        /// <stable>ICU 57</stable>
        public string Format(ReadOnlySpan<char> value0, ReadOnlySpan<char> value1, ReadOnlySpan<char> value2, ReadOnlySpan<char> value3, ReadOnlySpan<char> value4, ReadOnlySpan<char> value5, ReadOnlySpan<char> value6, ReadOnlySpan<char> value7, ReadOnlySpan<char> value8, ReadOnlySpan<char> value9, ReadOnlySpan<char> value10, ReadOnlySpan<char> value11, ReadOnlySpan<char> value12, ReadOnlySpan<char> value13, ReadOnlySpan<char> value14)
        {
            return SimpleFormatterImpl.FormatCompiledPattern(compiledPattern.AsSpan(), value0, value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14);
        }

        /// <summary>
        /// Formats the given values.
        /// </summary>
        /// <param name="value0">The first argument value.</param>
        /// <param name="value1">The second argument value.</param>
        /// <param name="value2">The third argument value.</param>
        /// <param name="value3">The fourth argument value.</param>
        /// <param name="value4">The fifth argument value.</param>
        /// <param name="value5">The sixth argument value.</param>
        /// <param name="value6">The seventh argument value.</param>
        /// <param name="value7">The eighth argument value.</param>
        /// <param name="value8">The ninth argument value.</param>
        /// <param name="value9">The tenth argument value.</param>
        /// <param name="value10">The eleventh argument value.</param>
        /// <param name="value11">The twelveth argument value.</param>
        /// <param name="value12">The thirteenth argument value.</param>
        /// <param name="value13">The fourteenth argument value.</param>
        /// <param name="value14">The fifteenth argument value.</param>
        /// <param name="value15">The sixteenth argument value.</param>
        /// <stable>ICU 57</stable>
        public string Format(ReadOnlySpan<char> value0, ReadOnlySpan<char> value1, ReadOnlySpan<char> value2, ReadOnlySpan<char> value3, ReadOnlySpan<char> value4, ReadOnlySpan<char> value5, ReadOnlySpan<char> value6, ReadOnlySpan<char> value7, ReadOnlySpan<char> value8, ReadOnlySpan<char> value9, ReadOnlySpan<char> value10, ReadOnlySpan<char> value11, ReadOnlySpan<char> value12, ReadOnlySpan<char> value13, ReadOnlySpan<char> value14, ReadOnlySpan<char> value15)
        {
            return SimpleFormatterImpl.FormatCompiledPattern(compiledPattern.AsSpan(), value0, value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15);
        }

        #endregion Format

        #region TryFormat

        /// <summary>
        /// Formats the given values.
        /// </summary>
        /// <param name="destination">When this method returns successfully, contains the formatted text.</param>
        /// <param name="charsLength">When this method returns <c>true</c>, contains the number of characters that are
        /// usable in <paramref name="destination"/>; otherwise, this is the length of <paramref name="destination"/> 
        /// that will need to be allocated to succeed in another attempt.</param>
        /// <param name="value0">
        /// The first argument value.
        /// An argument value must not be the same memory location as <paramref name="destination"/>.
        /// </param>
        /// <returns><c>true</c> if the operation was successful; otherwise, <c>false</c>.</returns>
        /// <draft>ICU 60.1</draft>
        public bool TryFormat(Span<char> destination, out int charsLength, ReadOnlySpan<char> value0)
        {
            return SimpleFormatterImpl.TryFormatCompiledPattern(compiledPattern.AsSpan(), destination, out charsLength, value0);
        }

        /// <summary>
        /// Formats the given values.
        /// </summary>
        /// <param name="destination">When this method returns successfully, contains the formatted text.</param>
        /// <param name="charsLength">When this method returns <c>true</c>, contains the number of characters that are
        /// usable in <paramref name="destination"/>; otherwise, this is the length of <paramref name="destination"/> 
        /// that will need to be allocated to succeed in another attempt.</param>
        /// <param name="value0">
        /// The first argument value.
        /// An argument value must not be the same memory location as <paramref name="destination"/>.
        /// </param>
        /// <param name="value1">
        /// The second argument value.
        /// An argument value must not be the same memory location as <paramref name="destination"/>.
        /// </param>
        /// <returns><c>true</c> if the operation was successful; otherwise, <c>false</c>.</returns>
        /// <draft>ICU 60.1</draft>
        public bool TryFormat(Span<char> destination, out int charsLength, ReadOnlySpan<char> value0, ReadOnlySpan<char> value1)
        {
            return SimpleFormatterImpl.TryFormatCompiledPattern(compiledPattern.AsSpan(), destination, out charsLength, value0, value1);
        }

        /// <summary>
        /// Formats the given values.
        /// </summary>
        /// <param name="destination">When this method returns successfully, contains the formatted text.</param>
        /// <param name="charsLength">When this method returns <c>true</c>, contains the number of characters that are
        /// usable in <paramref name="destination"/>; otherwise, this is the length of <paramref name="destination"/> 
        /// that will need to be allocated to succeed in another attempt.</param>
        /// <param name="value0">
        /// The first argument value.
        /// An argument value must not be the same memory location as <paramref name="destination"/>.
        /// </param>
        /// <param name="value1">
        /// The second argument value.
        /// An argument value must not be the same memory location as <paramref name="destination"/>.
        /// </param>
        /// <param name="value2">
        /// The third argument value.
        /// An argument value must not be the same memory location as <paramref name="destination"/>.
        /// </param>
        /// <returns><c>true</c> if the operation was successful; otherwise, <c>false</c>.</returns>
        /// <draft>ICU 60.1</draft>
        public bool TryFormat(Span<char> destination, out int charsLength, ReadOnlySpan<char> value0, ReadOnlySpan<char> value1, ReadOnlySpan<char> value2)
        {
            return SimpleFormatterImpl.TryFormatCompiledPattern(compiledPattern.AsSpan(), destination, out charsLength, value0, value1, value2);
        }

        /// <summary>
        /// Formats the given values.
        /// </summary>
        /// <param name="destination">When this method returns successfully, contains the formatted text.</param>
        /// <param name="charsLength">When this method returns <c>true</c>, contains the number of characters that are
        /// usable in <paramref name="destination"/>; otherwise, this is the length of <paramref name="destination"/> 
        /// that will need to be allocated to succeed in another attempt.</param>
        /// <param name="value0">
        /// The first argument value.
        /// An argument value must not be the same memory location as <paramref name="destination"/>.
        /// </param>
        /// <param name="value1">
        /// The second argument value.
        /// An argument value must not be the same memory location as <paramref name="destination"/>.
        /// </param>
        /// <param name="value2">
        /// The third argument value.
        /// An argument value must not be the same memory location as <paramref name="destination"/>.
        /// </param>
        /// <param name="value3">
        /// The fourth argument value.
        /// An argument value must not be the same memory location as <paramref name="destination"/>.
        /// </param>
        /// <returns><c>true</c> if the operation was successful; otherwise, <c>false</c>.</returns>
        /// <draft>ICU 60.1</draft>
        public bool TryFormat(Span<char> destination, out int charsLength, ReadOnlySpan<char> value0, ReadOnlySpan<char> value1, ReadOnlySpan<char> value2, ReadOnlySpan<char> value3)
        {
            return SimpleFormatterImpl.TryFormatCompiledPattern(compiledPattern.AsSpan(), destination, out charsLength, value0, value1, value2, value3);
        }

        /// <summary>
        /// Formats the given values.
        /// </summary>
        /// <param name="destination">When this method returns successfully, contains the formatted text.</param>
        /// <param name="charsLength">When this method returns <c>true</c>, contains the number of characters that are
        /// usable in <paramref name="destination"/>; otherwise, this is the length of <paramref name="destination"/> 
        /// that will need to be allocated to succeed in another attempt.</param>
        /// <param name="value0">
        /// The first argument value.
        /// An argument value must not be the same memory location as <paramref name="destination"/>.
        /// </param>
        /// <param name="value1">
        /// The second argument value.
        /// An argument value must not be the same memory location as <paramref name="destination"/>.
        /// </param>
        /// <param name="value2">
        /// The third argument value.
        /// An argument value must not be the same memory location as <paramref name="destination"/>.
        /// </param>
        /// <param name="value3">
        /// The fourth argument value.
        /// An argument value must not be the same memory location as <paramref name="destination"/>.
        /// </param>
        /// <param name="value4">
        /// The fifth argument value.
        /// An argument value must not be the same memory location as <paramref name="destination"/>.
        /// </param>
        /// <returns><c>true</c> if the operation was successful; otherwise, <c>false</c>.</returns>
        /// <draft>ICU 60.1</draft>
        public bool TryFormat(Span<char> destination, out int charsLength, ReadOnlySpan<char> value0, ReadOnlySpan<char> value1, ReadOnlySpan<char> value2, ReadOnlySpan<char> value3, ReadOnlySpan<char> value4)
        {
            return SimpleFormatterImpl.TryFormatCompiledPattern(compiledPattern.AsSpan(), destination, out charsLength, value0, value1, value2, value3, value4);
        }

        /// <summary>
        /// Formats the given values.
        /// </summary>
        /// <param name="destination">When this method returns successfully, contains the formatted text.</param>
        /// <param name="charsLength">When this method returns <c>true</c>, contains the number of characters that are
        /// usable in <paramref name="destination"/>; otherwise, this is the length of <paramref name="destination"/> 
        /// that will need to be allocated to succeed in another attempt.</param>
        /// <param name="value0">
        /// The first argument value.
        /// An argument value must not be the same memory location as <paramref name="destination"/>.
        /// </param>
        /// <param name="value1">
        /// The second argument value.
        /// An argument value must not be the same memory location as <paramref name="destination"/>.
        /// </param>
        /// <param name="value2">
        /// The third argument value.
        /// An argument value must not be the same memory location as <paramref name="destination"/>.
        /// </param>
        /// <param name="value3">
        /// The fourth argument value.
        /// An argument value must not be the same memory location as <paramref name="destination"/>.
        /// </param>
        /// <param name="value4">
        /// The fifth argument value.
        /// An argument value must not be the same memory location as <paramref name="destination"/>.
        /// </param>
        /// <param name="value5">
        /// The sixth argument value.
        /// An argument value must not be the same memory location as <paramref name="destination"/>.
        /// </param>
        /// <returns><c>true</c> if the operation was successful; otherwise, <c>false</c>.</returns>
        /// <draft>ICU 60.1</draft>
        public bool TryFormat(Span<char> destination, out int charsLength, ReadOnlySpan<char> value0, ReadOnlySpan<char> value1, ReadOnlySpan<char> value2, ReadOnlySpan<char> value3, ReadOnlySpan<char> value4, ReadOnlySpan<char> value5)
        {
            return SimpleFormatterImpl.TryFormatCompiledPattern(compiledPattern.AsSpan(), destination, out charsLength, value0, value1, value2, value3, value4, value5);
        }

        /// <summary>
        /// Formats the given values.
        /// </summary>
        /// <param name="destination">When this method returns successfully, contains the formatted text.</param>
        /// <param name="charsLength">When this method returns <c>true</c>, contains the number of characters that are
        /// usable in <paramref name="destination"/>; otherwise, this is the length of <paramref name="destination"/> 
        /// that will need to be allocated to succeed in another attempt.</param>
        /// <param name="value0">
        /// The first argument value.
        /// An argument value must not be the same memory location as <paramref name="destination"/>.
        /// </param>
        /// <param name="value1">
        /// The second argument value.
        /// An argument value must not be the same memory location as <paramref name="destination"/>.
        /// </param>
        /// <param name="value2">
        /// The third argument value.
        /// An argument value must not be the same memory location as <paramref name="destination"/>.
        /// </param>
        /// <param name="value3">
        /// The fourth argument value.
        /// An argument value must not be the same memory location as <paramref name="destination"/>.
        /// </param>
        /// <param name="value4">
        /// The fifth argument value.
        /// An argument value must not be the same memory location as <paramref name="destination"/>.
        /// </param>
        /// <param name="value5">
        /// The sixth argument value.
        /// An argument value must not be the same memory location as <paramref name="destination"/>.
        /// </param>
        /// <param name="value6">
        /// The seventh argument value.
        /// An argument value must not be the same memory location as <paramref name="destination"/>.
        /// </param>
        /// <returns><c>true</c> if the operation was successful; otherwise, <c>false</c>.</returns>
        /// <draft>ICU 60.1</draft>
        public bool TryFormat(Span<char> destination, out int charsLength, ReadOnlySpan<char> value0, ReadOnlySpan<char> value1, ReadOnlySpan<char> value2, ReadOnlySpan<char> value3, ReadOnlySpan<char> value4, ReadOnlySpan<char> value5, ReadOnlySpan<char> value6)
        {
            return SimpleFormatterImpl.TryFormatCompiledPattern(compiledPattern.AsSpan(), destination, out charsLength, value0, value1, value2, value3, value4, value5, value6);
        }

        /// <summary>
        /// Formats the given values.
        /// </summary>
        /// <param name="destination">When this method returns successfully, contains the formatted text.</param>
        /// <param name="charsLength">When this method returns <c>true</c>, contains the number of characters that are
        /// usable in <paramref name="destination"/>; otherwise, this is the length of <paramref name="destination"/> 
        /// that will need to be allocated to succeed in another attempt.</param>
        /// <param name="value0">
        /// The first argument value.
        /// An argument value must not be the same memory location as <paramref name="destination"/>.
        /// </param>
        /// <param name="value1">
        /// The second argument value.
        /// An argument value must not be the same memory location as <paramref name="destination"/>.
        /// </param>
        /// <param name="value2">
        /// The third argument value.
        /// An argument value must not be the same memory location as <paramref name="destination"/>.
        /// </param>
        /// <param name="value3">
        /// The fourth argument value.
        /// An argument value must not be the same memory location as <paramref name="destination"/>.
        /// </param>
        /// <param name="value4">
        /// The fifth argument value.
        /// An argument value must not be the same memory location as <paramref name="destination"/>.
        /// </param>
        /// <param name="value5">
        /// The sixth argument value.
        /// An argument value must not be the same memory location as <paramref name="destination"/>.
        /// </param>
        /// <param name="value6">
        /// The seventh argument value.
        /// An argument value must not be the same memory location as <paramref name="destination"/>.
        /// </param>
        /// <param name="value7">
        /// The eighth argument value.
        /// An argument value must not be the same memory location as <paramref name="destination"/>.
        /// </param>
        /// <returns><c>true</c> if the operation was successful; otherwise, <c>false</c>.</returns>
        /// <draft>ICU 60.1</draft>
        public bool TryFormat(Span<char> destination, out int charsLength, ReadOnlySpan<char> value0, ReadOnlySpan<char> value1, ReadOnlySpan<char> value2, ReadOnlySpan<char> value3, ReadOnlySpan<char> value4, ReadOnlySpan<char> value5, ReadOnlySpan<char> value6, ReadOnlySpan<char> value7)
        {
            return SimpleFormatterImpl.TryFormatCompiledPattern(compiledPattern.AsSpan(), destination, out charsLength, value0, value1, value2, value3, value4, value5, value6, value7);
        }

        /// <summary>
        /// Formats the given values.
        /// </summary>
        /// <param name="destination">When this method returns successfully, contains the formatted text.</param>
        /// <param name="charsLength">When this method returns <c>true</c>, contains the number of characters that are
        /// usable in <paramref name="destination"/>; otherwise, this is the length of <paramref name="destination"/> 
        /// that will need to be allocated to succeed in another attempt.</param>
        /// <param name="value0">
        /// The first argument value.
        /// An argument value must not be the same memory location as <paramref name="destination"/>.
        /// </param>
        /// <param name="value1">
        /// The second argument value.
        /// An argument value must not be the same memory location as <paramref name="destination"/>.
        /// </param>
        /// <param name="value2">
        /// The third argument value.
        /// An argument value must not be the same memory location as <paramref name="destination"/>.
        /// </param>
        /// <param name="value3">
        /// The fourth argument value.
        /// An argument value must not be the same memory location as <paramref name="destination"/>.
        /// </param>
        /// <param name="value4">
        /// The fifth argument value.
        /// An argument value must not be the same memory location as <paramref name="destination"/>.
        /// </param>
        /// <param name="value5">
        /// The sixth argument value.
        /// An argument value must not be the same memory location as <paramref name="destination"/>.
        /// </param>
        /// <param name="value6">
        /// The seventh argument value.
        /// An argument value must not be the same memory location as <paramref name="destination"/>.
        /// </param>
        /// <param name="value7">
        /// The eighth argument value.
        /// An argument value must not be the same memory location as <paramref name="destination"/>.
        /// </param>
        /// <param name="value8">
        /// The ninth argument value.
        /// An argument value must not be the same memory location as <paramref name="destination"/>.
        /// </param>
        /// <returns><c>true</c> if the operation was successful; otherwise, <c>false</c>.</returns>
        /// <draft>ICU 60.1</draft>
        public bool TryFormat(Span<char> destination, out int charsLength, ReadOnlySpan<char> value0, ReadOnlySpan<char> value1, ReadOnlySpan<char> value2, ReadOnlySpan<char> value3, ReadOnlySpan<char> value4, ReadOnlySpan<char> value5, ReadOnlySpan<char> value6, ReadOnlySpan<char> value7, ReadOnlySpan<char> value8)
        {
            return SimpleFormatterImpl.TryFormatCompiledPattern(compiledPattern.AsSpan(), destination, out charsLength, value0, value1, value2, value3, value4, value5, value6, value7, value8);
        }

        /// <summary>
        /// Formats the given values.
        /// </summary>
        /// <param name="destination">When this method returns successfully, contains the formatted text.</param>
        /// <param name="charsLength">When this method returns <c>true</c>, contains the number of characters that are
        /// usable in <paramref name="destination"/>; otherwise, this is the length of <paramref name="destination"/> 
        /// that will need to be allocated to succeed in another attempt.</param>
        /// <param name="value0">
        /// The first argument value.
        /// An argument value must not be the same memory location as <paramref name="destination"/>.
        /// </param>
        /// <param name="value1">
        /// The second argument value.
        /// An argument value must not be the same memory location as <paramref name="destination"/>.
        /// </param>
        /// <param name="value2">
        /// The third argument value.
        /// An argument value must not be the same memory location as <paramref name="destination"/>.
        /// </param>
        /// <param name="value3">
        /// The fourth argument value.
        /// An argument value must not be the same memory location as <paramref name="destination"/>.
        /// </param>
        /// <param name="value4">
        /// The fifth argument value.
        /// An argument value must not be the same memory location as <paramref name="destination"/>.
        /// </param>
        /// <param name="value5">
        /// The sixth argument value.
        /// An argument value must not be the same memory location as <paramref name="destination"/>.
        /// </param>
        /// <param name="value6">
        /// The seventh argument value.
        /// An argument value must not be the same memory location as <paramref name="destination"/>.
        /// </param>
        /// <param name="value7">
        /// The eighth argument value.
        /// An argument value must not be the same memory location as <paramref name="destination"/>.
        /// </param>
        /// <param name="value8">
        /// The ninth argument value.
        /// An argument value must not be the same memory location as <paramref name="destination"/>.
        /// </param>
        /// <param name="value9">
        /// The tenth argument value.
        /// An argument value must not be the same memory location as <paramref name="destination"/>.
        /// </param>
        /// <returns><c>true</c> if the operation was successful; otherwise, <c>false</c>.</returns>
        /// <draft>ICU 60.1</draft>
        public bool TryFormat(Span<char> destination, out int charsLength, ReadOnlySpan<char> value0, ReadOnlySpan<char> value1, ReadOnlySpan<char> value2, ReadOnlySpan<char> value3, ReadOnlySpan<char> value4, ReadOnlySpan<char> value5, ReadOnlySpan<char> value6, ReadOnlySpan<char> value7, ReadOnlySpan<char> value8, ReadOnlySpan<char> value9)
        {
            return SimpleFormatterImpl.TryFormatCompiledPattern(compiledPattern.AsSpan(), destination, out charsLength, value0, value1, value2, value3, value4, value5, value6, value7, value8, value9);
        }

        /// <summary>
        /// Formats the given values.
        /// </summary>
        /// <param name="destination">When this method returns successfully, contains the formatted text.</param>
        /// <param name="charsLength">When this method returns <c>true</c>, contains the number of characters that are
        /// usable in <paramref name="destination"/>; otherwise, this is the length of <paramref name="destination"/> 
        /// that will need to be allocated to succeed in another attempt.</param>
        /// <param name="value0">
        /// The first argument value.
        /// An argument value must not be the same memory location as <paramref name="destination"/>.
        /// </param>
        /// <param name="value1">
        /// The second argument value.
        /// An argument value must not be the same memory location as <paramref name="destination"/>.
        /// </param>
        /// <param name="value2">
        /// The third argument value.
        /// An argument value must not be the same memory location as <paramref name="destination"/>.
        /// </param>
        /// <param name="value3">
        /// The fourth argument value.
        /// An argument value must not be the same memory location as <paramref name="destination"/>.
        /// </param>
        /// <param name="value4">
        /// The fifth argument value.
        /// An argument value must not be the same memory location as <paramref name="destination"/>.
        /// </param>
        /// <param name="value5">
        /// The sixth argument value.
        /// An argument value must not be the same memory location as <paramref name="destination"/>.
        /// </param>
        /// <param name="value6">
        /// The seventh argument value.
        /// An argument value must not be the same memory location as <paramref name="destination"/>.
        /// </param>
        /// <param name="value7">
        /// The eighth argument value.
        /// An argument value must not be the same memory location as <paramref name="destination"/>.
        /// </param>
        /// <param name="value8">
        /// The ninth argument value.
        /// An argument value must not be the same memory location as <paramref name="destination"/>.
        /// </param>
        /// <param name="value9">
        /// The tenth argument value.
        /// An argument value must not be the same memory location as <paramref name="destination"/>.
        /// </param>
        /// <param name="value10">
        /// The eleventh argument value.
        /// An argument value must not be the same memory location as <paramref name="destination"/>.
        /// </param>
        /// <returns><c>true</c> if the operation was successful; otherwise, <c>false</c>.</returns>
        /// <draft>ICU 60.1</draft>
        public bool TryFormat(Span<char> destination, out int charsLength, ReadOnlySpan<char> value0, ReadOnlySpan<char> value1, ReadOnlySpan<char> value2, ReadOnlySpan<char> value3, ReadOnlySpan<char> value4, ReadOnlySpan<char> value5, ReadOnlySpan<char> value6, ReadOnlySpan<char> value7, ReadOnlySpan<char> value8, ReadOnlySpan<char> value9, ReadOnlySpan<char> value10)
        {
            return SimpleFormatterImpl.TryFormatCompiledPattern(compiledPattern.AsSpan(), destination, out charsLength, value0, value1, value2, value3, value4, value5, value6, value7, value8, value9, value10);
        }

        /// <summary>
        /// Formats the given values.
        /// </summary>
        /// <param name="destination">When this method returns successfully, contains the formatted text.</param>
        /// <param name="charsLength">When this method returns <c>true</c>, contains the number of characters that are
        /// usable in <paramref name="destination"/>; otherwise, this is the length of <paramref name="destination"/> 
        /// that will need to be allocated to succeed in another attempt.</param>
        /// <param name="value0">
        /// The first argument value.
        /// An argument value must not be the same memory location as <paramref name="destination"/>.
        /// </param>
        /// <param name="value1">
        /// The second argument value.
        /// An argument value must not be the same memory location as <paramref name="destination"/>.
        /// </param>
        /// <param name="value2">
        /// The third argument value.
        /// An argument value must not be the same memory location as <paramref name="destination"/>.
        /// </param>
        /// <param name="value3">
        /// The fourth argument value.
        /// An argument value must not be the same memory location as <paramref name="destination"/>.
        /// </param>
        /// <param name="value4">
        /// The fifth argument value.
        /// An argument value must not be the same memory location as <paramref name="destination"/>.
        /// </param>
        /// <param name="value5">
        /// The sixth argument value.
        /// An argument value must not be the same memory location as <paramref name="destination"/>.
        /// </param>
        /// <param name="value6">
        /// The seventh argument value.
        /// An argument value must not be the same memory location as <paramref name="destination"/>.
        /// </param>
        /// <param name="value7">
        /// The eighth argument value.
        /// An argument value must not be the same memory location as <paramref name="destination"/>.
        /// </param>
        /// <param name="value8">
        /// The ninth argument value.
        /// An argument value must not be the same memory location as <paramref name="destination"/>.
        /// </param>
        /// <param name="value9">
        /// The tenth argument value.
        /// An argument value must not be the same memory location as <paramref name="destination"/>.
        /// </param>
        /// <param name="value10">
        /// The eleventh argument value.
        /// An argument value must not be the same memory location as <paramref name="destination"/>.
        /// </param>
        /// <param name="value11">
        /// The twelveth argument value.
        /// An argument value must not be the same memory location as <paramref name="destination"/>.
        /// </param>
        /// <returns><c>true</c> if the operation was successful; otherwise, <c>false</c>.</returns>
        /// <draft>ICU 60.1</draft>
        public bool TryFormat(Span<char> destination, out int charsLength, ReadOnlySpan<char> value0, ReadOnlySpan<char> value1, ReadOnlySpan<char> value2, ReadOnlySpan<char> value3, ReadOnlySpan<char> value4, ReadOnlySpan<char> value5, ReadOnlySpan<char> value6, ReadOnlySpan<char> value7, ReadOnlySpan<char> value8, ReadOnlySpan<char> value9, ReadOnlySpan<char> value10, ReadOnlySpan<char> value11)
        {
            return SimpleFormatterImpl.TryFormatCompiledPattern(compiledPattern.AsSpan(), destination, out charsLength, value0, value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11);
        }

        /// <summary>
        /// Formats the given values.
        /// </summary>
        /// <param name="destination">When this method returns successfully, contains the formatted text.</param>
        /// <param name="charsLength">When this method returns <c>true</c>, contains the number of characters that are
        /// usable in <paramref name="destination"/>; otherwise, this is the length of <paramref name="destination"/> 
        /// that will need to be allocated to succeed in another attempt.</param>
        /// <param name="value0">
        /// The first argument value.
        /// An argument value must not be the same memory location as <paramref name="destination"/>.
        /// </param>
        /// <param name="value1">
        /// The second argument value.
        /// An argument value must not be the same memory location as <paramref name="destination"/>.
        /// </param>
        /// <param name="value2">
        /// The third argument value.
        /// An argument value must not be the same memory location as <paramref name="destination"/>.
        /// </param>
        /// <param name="value3">
        /// The fourth argument value.
        /// An argument value must not be the same memory location as <paramref name="destination"/>.
        /// </param>
        /// <param name="value4">
        /// The fifth argument value.
        /// An argument value must not be the same memory location as <paramref name="destination"/>.
        /// </param>
        /// <param name="value5">
        /// The sixth argument value.
        /// An argument value must not be the same memory location as <paramref name="destination"/>.
        /// </param>
        /// <param name="value6">
        /// The seventh argument value.
        /// An argument value must not be the same memory location as <paramref name="destination"/>.
        /// </param>
        /// <param name="value7">
        /// The eighth argument value.
        /// An argument value must not be the same memory location as <paramref name="destination"/>.
        /// </param>
        /// <param name="value8">
        /// The ninth argument value.
        /// An argument value must not be the same memory location as <paramref name="destination"/>.
        /// </param>
        /// <param name="value9">
        /// The tenth argument value.
        /// An argument value must not be the same memory location as <paramref name="destination"/>.
        /// </param>
        /// <param name="value10">
        /// The eleventh argument value.
        /// An argument value must not be the same memory location as <paramref name="destination"/>.
        /// </param>
        /// <param name="value11">
        /// The twelveth argument value.
        /// An argument value must not be the same memory location as <paramref name="destination"/>.
        /// </param>
        /// <param name="value12">
        /// The thirteenth argument value.
        /// An argument value must not be the same memory location as <paramref name="destination"/>.
        /// </param>
        /// <returns><c>true</c> if the operation was successful; otherwise, <c>false</c>.</returns>
        /// <draft>ICU 60.1</draft>
        public bool TryFormat(Span<char> destination, out int charsLength, ReadOnlySpan<char> value0, ReadOnlySpan<char> value1, ReadOnlySpan<char> value2, ReadOnlySpan<char> value3, ReadOnlySpan<char> value4, ReadOnlySpan<char> value5, ReadOnlySpan<char> value6, ReadOnlySpan<char> value7, ReadOnlySpan<char> value8, ReadOnlySpan<char> value9, ReadOnlySpan<char> value10, ReadOnlySpan<char> value11, ReadOnlySpan<char> value12)
        {
            return SimpleFormatterImpl.TryFormatCompiledPattern(compiledPattern.AsSpan(), destination, out charsLength, value0, value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12);
        }

        /// <summary>
        /// Formats the given values.
        /// </summary>
        /// <param name="destination">When this method returns successfully, contains the formatted text.</param>
        /// <param name="charsLength">When this method returns <c>true</c>, contains the number of characters that are
        /// usable in <paramref name="destination"/>; otherwise, this is the length of <paramref name="destination"/> 
        /// that will need to be allocated to succeed in another attempt.</param>
        /// <param name="value0">
        /// The first argument value.
        /// An argument value must not be the same memory location as <paramref name="destination"/>.
        /// </param>
        /// <param name="value1">
        /// The second argument value.
        /// An argument value must not be the same memory location as <paramref name="destination"/>.
        /// </param>
        /// <param name="value2">
        /// The third argument value.
        /// An argument value must not be the same memory location as <paramref name="destination"/>.
        /// </param>
        /// <param name="value3">
        /// The fourth argument value.
        /// An argument value must not be the same memory location as <paramref name="destination"/>.
        /// </param>
        /// <param name="value4">
        /// The fifth argument value.
        /// An argument value must not be the same memory location as <paramref name="destination"/>.
        /// </param>
        /// <param name="value5">
        /// The sixth argument value.
        /// An argument value must not be the same memory location as <paramref name="destination"/>.
        /// </param>
        /// <param name="value6">
        /// The seventh argument value.
        /// An argument value must not be the same memory location as <paramref name="destination"/>.
        /// </param>
        /// <param name="value7">
        /// The eighth argument value.
        /// An argument value must not be the same memory location as <paramref name="destination"/>.
        /// </param>
        /// <param name="value8">
        /// The ninth argument value.
        /// An argument value must not be the same memory location as <paramref name="destination"/>.
        /// </param>
        /// <param name="value9">
        /// The tenth argument value.
        /// An argument value must not be the same memory location as <paramref name="destination"/>.
        /// </param>
        /// <param name="value10">
        /// The eleventh argument value.
        /// An argument value must not be the same memory location as <paramref name="destination"/>.
        /// </param>
        /// <param name="value11">
        /// The twelveth argument value.
        /// An argument value must not be the same memory location as <paramref name="destination"/>.
        /// </param>
        /// <param name="value12">
        /// The thirteenth argument value.
        /// An argument value must not be the same memory location as <paramref name="destination"/>.
        /// </param>
        /// <param name="value13">
        /// The fourteenth argument value.
        /// An argument value must not be the same memory location as <paramref name="destination"/>.
        /// </param>
        /// <returns><c>true</c> if the operation was successful; otherwise, <c>false</c>.</returns>
        /// <draft>ICU 60.1</draft>
        public bool TryFormat(Span<char> destination, out int charsLength, ReadOnlySpan<char> value0, ReadOnlySpan<char> value1, ReadOnlySpan<char> value2, ReadOnlySpan<char> value3, ReadOnlySpan<char> value4, ReadOnlySpan<char> value5, ReadOnlySpan<char> value6, ReadOnlySpan<char> value7, ReadOnlySpan<char> value8, ReadOnlySpan<char> value9, ReadOnlySpan<char> value10, ReadOnlySpan<char> value11, ReadOnlySpan<char> value12, ReadOnlySpan<char> value13)
        {
            return SimpleFormatterImpl.TryFormatCompiledPattern(compiledPattern.AsSpan(), destination, out charsLength, value0, value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13);
        }

        /// <summary>
        /// Formats the given values.
        /// </summary>
        /// <param name="destination">When this method returns successfully, contains the formatted text.</param>
        /// <param name="charsLength">When this method returns <c>true</c>, contains the number of characters that are
        /// usable in <paramref name="destination"/>; otherwise, this is the length of <paramref name="destination"/> 
        /// that will need to be allocated to succeed in another attempt.</param>
        /// <param name="value0">
        /// The first argument value.
        /// An argument value must not be the same memory location as <paramref name="destination"/>.
        /// </param>
        /// <param name="value1">
        /// The second argument value.
        /// An argument value must not be the same memory location as <paramref name="destination"/>.
        /// </param>
        /// <param name="value2">
        /// The third argument value.
        /// An argument value must not be the same memory location as <paramref name="destination"/>.
        /// </param>
        /// <param name="value3">
        /// The fourth argument value.
        /// An argument value must not be the same memory location as <paramref name="destination"/>.
        /// </param>
        /// <param name="value4">
        /// The fifth argument value.
        /// An argument value must not be the same memory location as <paramref name="destination"/>.
        /// </param>
        /// <param name="value5">
        /// The sixth argument value.
        /// An argument value must not be the same memory location as <paramref name="destination"/>.
        /// </param>
        /// <param name="value6">
        /// The seventh argument value.
        /// An argument value must not be the same memory location as <paramref name="destination"/>.
        /// </param>
        /// <param name="value7">
        /// The eighth argument value.
        /// An argument value must not be the same memory location as <paramref name="destination"/>.
        /// </param>
        /// <param name="value8">
        /// The ninth argument value.
        /// An argument value must not be the same memory location as <paramref name="destination"/>.
        /// </param>
        /// <param name="value9">
        /// The tenth argument value.
        /// An argument value must not be the same memory location as <paramref name="destination"/>.
        /// </param>
        /// <param name="value10">
        /// The eleventh argument value.
        /// An argument value must not be the same memory location as <paramref name="destination"/>.
        /// </param>
        /// <param name="value11">
        /// The twelveth argument value.
        /// An argument value must not be the same memory location as <paramref name="destination"/>.
        /// </param>
        /// <param name="value12">
        /// The thirteenth argument value.
        /// An argument value must not be the same memory location as <paramref name="destination"/>.
        /// </param>
        /// <param name="value13">
        /// The fourteenth argument value.
        /// An argument value must not be the same memory location as <paramref name="destination"/>.
        /// </param>
        /// <param name="value14">
        /// The fifteenth argument value.
        /// An argument value must not be the same memory location as <paramref name="destination"/>.
        /// </param>
        /// <returns><c>true</c> if the operation was successful; otherwise, <c>false</c>.</returns>
        /// <draft>ICU 60.1</draft>
        public bool TryFormat(Span<char> destination, out int charsLength, ReadOnlySpan<char> value0, ReadOnlySpan<char> value1, ReadOnlySpan<char> value2, ReadOnlySpan<char> value3, ReadOnlySpan<char> value4, ReadOnlySpan<char> value5, ReadOnlySpan<char> value6, ReadOnlySpan<char> value7, ReadOnlySpan<char> value8, ReadOnlySpan<char> value9, ReadOnlySpan<char> value10, ReadOnlySpan<char> value11, ReadOnlySpan<char> value12, ReadOnlySpan<char> value13, ReadOnlySpan<char> value14)
        {
            return SimpleFormatterImpl.TryFormatCompiledPattern(compiledPattern.AsSpan(), destination, out charsLength, value0, value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14);
        }

        /// <summary>
        /// Formats the given values.
        /// </summary>
        /// <param name="destination">When this method returns successfully, contains the formatted text.</param>
        /// <param name="charsLength">When this method returns <c>true</c>, contains the number of characters that are
        /// usable in <paramref name="destination"/>; otherwise, this is the length of <paramref name="destination"/> 
        /// that will need to be allocated to succeed in another attempt.</param>
        /// <param name="value0">
        /// The first argument value.
        /// An argument value must not be the same memory location as <paramref name="destination"/>.
        /// </param>
        /// <param name="value1">
        /// The second argument value.
        /// An argument value must not be the same memory location as <paramref name="destination"/>.
        /// </param>
        /// <param name="value2">
        /// The third argument value.
        /// An argument value must not be the same memory location as <paramref name="destination"/>.
        /// </param>
        /// <param name="value3">
        /// The fourth argument value.
        /// An argument value must not be the same memory location as <paramref name="destination"/>.
        /// </param>
        /// <param name="value4">
        /// The fifth argument value.
        /// An argument value must not be the same memory location as <paramref name="destination"/>.
        /// </param>
        /// <param name="value5">
        /// The sixth argument value.
        /// An argument value must not be the same memory location as <paramref name="destination"/>.
        /// </param>
        /// <param name="value6">
        /// The seventh argument value.
        /// An argument value must not be the same memory location as <paramref name="destination"/>.
        /// </param>
        /// <param name="value7">
        /// The eighth argument value.
        /// An argument value must not be the same memory location as <paramref name="destination"/>.
        /// </param>
        /// <param name="value8">
        /// The ninth argument value.
        /// An argument value must not be the same memory location as <paramref name="destination"/>.
        /// </param>
        /// <param name="value9">
        /// The tenth argument value.
        /// An argument value must not be the same memory location as <paramref name="destination"/>.
        /// </param>
        /// <param name="value10">
        /// The eleventh argument value.
        /// An argument value must not be the same memory location as <paramref name="destination"/>.
        /// </param>
        /// <param name="value11">
        /// The twelveth argument value.
        /// An argument value must not be the same memory location as <paramref name="destination"/>.
        /// </param>
        /// <param name="value12">
        /// The thirteenth argument value.
        /// An argument value must not be the same memory location as <paramref name="destination"/>.
        /// </param>
        /// <param name="value13">
        /// The fourteenth argument value.
        /// An argument value must not be the same memory location as <paramref name="destination"/>.
        /// </param>
        /// <param name="value14">
        /// The fifteenth argument value.
        /// An argument value must not be the same memory location as <paramref name="destination"/>.
        /// </param>
        /// <param name="value15">
        /// The sixteenth argument value.
        /// An argument value must not be the same memory location as <paramref name="destination"/>.
        /// </param>
        /// <returns><c>true</c> if the operation was successful; otherwise, <c>false</c>.</returns>
        /// <draft>ICU 60.1</draft>
        public bool TryFormat(Span<char> destination, out int charsLength, ReadOnlySpan<char> value0, ReadOnlySpan<char> value1, ReadOnlySpan<char> value2, ReadOnlySpan<char> value3, ReadOnlySpan<char> value4, ReadOnlySpan<char> value5, ReadOnlySpan<char> value6, ReadOnlySpan<char> value7, ReadOnlySpan<char> value8, ReadOnlySpan<char> value9, ReadOnlySpan<char> value10, ReadOnlySpan<char> value11, ReadOnlySpan<char> value12, ReadOnlySpan<char> value13, ReadOnlySpan<char> value14, ReadOnlySpan<char> value15)
        {
            return SimpleFormatterImpl.TryFormatCompiledPattern(compiledPattern.AsSpan(), destination, out charsLength, value0, value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15);
        }


        #endregion TryFormat
    }
}
