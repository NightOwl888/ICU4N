<#@ output extension=".cs" #>
<#@ include file="../../../codegen/FilterDeclarations.tt" #>
<#
AppendableFilter = (a) => a.Name != "ValueStringBuilder";
string codeGenerationRelativePath = @"../../../codegen";
#><#@ include file="../../../codegen/DataLoader.tt" #>//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using J2N.Text;
using System;
using System.Text;

namespace ICU4N.Text
{
    public abstract partial class Normalizer2
    {
<# foreach (var charSequence in CharSequences) { #>
    <# foreach (var appendable in Appendables) { #>
<#= GetBeginFeature(GetFeature(charSequence, appendable)) #>

        /// <summary>
<# if (appendable.Name == "IAppendable") { #>
        /// Writes the normalized form of the source string to the destination <see cref="IAppendable"/>
        /// and returns the destination <see cref="IAppendable"/>.
<# } else { #>
        /// Writes the normalized form of the source string to the destination string
        /// (replacing its contents) and returns the destination string.
<# } #>
<# if (charSequence.Name == "ICharSequence" || charSequence.Name == "StringBuilder") { #>
        /// The source and destination strings must be different objects.
<# } #>
        /// </summary>
        /// <param name="src">Source string.</param>
        /// <param name="dest">Destination string; its contents is replaced with normalized <paramref name="src"/>.</param>
        /// <returns><paramref name="dest"/></returns>
<# if (appendable.Name == "IAppendable") { #>
        /// <stable>ICU 4.6</stable>
<# } else if (appendable.Name == "StringBuilder") { #>
        /// <stable>ICU 4.4</stable>
<# } else { #>
        /// <draft>ICU 60.1<draft>
        /// <provisional>This API might change or be removed in a future release.</provisional>
<# } #>
<# if (appendable.Name == "IAppendable") { #>
        <#=GetAccessibility(charSequence, appendable)#> abstract T Normalize<T>(<#=charSequence#> src, T dest) where T : <#=appendable#>;
<# } else { #>
        <#=GetAccessibility(charSequence, appendable)#> abstract <#=appendable#> Normalize(<#=charSequence#> src, <#=appendable#> dest);
<# } #>
<#= GetEndFeature(GetFeature(charSequence, appendable)) #>
    <# } #>
<# } #>
<# foreach (var charSequence in CharSequences) { #>
<#= GetBeginFeature(charSequence) #>
        /// <summary>
        /// Appends the normalized form of the <paramref name="second"/> string to the <paramref name="first"/> string
        /// (merging them at the boundary) and returns the <paramref name="first"/> string.
        /// The result is normalized if the <paramref name="first"/> string was normalized.
        /// The <paramref name="first"/> and <paramref name="second"/> strings must be different objects.
        /// </summary>
        /// <param name="first">First string, should be normalized.</param>
        /// <param name="second">Second string, will be normalized.</param>
        /// <returns><paramref name="first"/></returns>
        /// <stable>ICU 4.4</stable>
        <#=GetAccessibility(charSequence)#> abstract StringBuilder NormalizeSecondAndAppend(
            StringBuilder first, <#=charSequence#> second);
<#= GetEndFeature(charSequence) #>
<# } #>
<# foreach (var charSequence in CharSequences) { #>
<#= GetBeginFeature(charSequence) #>
        /// <summary>
        /// Appends the <paramref name="second"/> string to the <paramref name="first"/> string
        /// (merging them at the boundary) and returns the <paramref name="first"/> string.
        /// The result is normalized if both the strings were normalized.
        /// The <paramref name="first"/> and <paramref name="second"/> strings must be different objects.
        /// </summary>
        /// <param name="first">First string, should be normalized.</param>
        /// <param name="second">Second string, should be normalized.</param>
        /// <returns><paramref name="first"/></returns>
        /// <stable>ICU 4.4</stable>
        <#=GetAccessibility(charSequence)#> abstract StringBuilder Append(StringBuilder first, <#=charSequence#> second);
<#= GetEndFeature(charSequence) #>
<# } #>
<# foreach (var charSequence in CharSequences) { #>
<#= GetBeginFeature(charSequence) #>
        /// <summary>
        /// Tests if the string is normalized.
        /// Internally, in cases where the <see cref="QuickCheck(<#=charSequence.NameForDocAsType#>)"/> method would return "maybe"
        /// (which is only possible for the two COMPOSE modes) this method
        /// resolves to "yes" or "no" to provide a definitive result,
        /// at the cost of doing more work in those cases.
        /// </summary>
        /// <param name="s">Input string.</param>
        /// <returns>true if <paramref name="s"/> is normalized.</returns>
        /// <stable>ICU 4.4</stable>
        <#=GetAccessibility(charSequence)#> abstract bool IsNormalized(<#=charSequence#> s);
<#= GetEndFeature(charSequence) #>
<# } #>
<# foreach (var charSequence in CharSequences) { #>
<#= GetBeginFeature(charSequence) #>
        /// <summary>
        /// Tests if the string is normalized.
        /// For the two COMPOSE modes, the result could be "maybe" in cases that
        /// would take a little more work to resolve definitively.
        /// Use <see cref="SpanQuickCheckYes(<#=charSequence.NameForDocAsType#>)"/> and
        /// <see cref="NormalizeSecondAndAppend(StringBuilder, <#=charSequence.NameForDocAsType#>)"/> for a faster
        /// combination of quick check + normalization, to avoid
        /// re-checking the "yes" prefix.
        /// </summary>
        /// <param name="s">Input string.</param>
        /// <returns>The quick check result.</returns>
        /// <stable>ICU 4.4</stable>
        <#=GetAccessibility(charSequence)#> abstract QuickCheckResult QuickCheck(<#=charSequence#> s);
<#= GetEndFeature(charSequence) #>
<# } #>
<# foreach (var charSequence in CharSequences) { #>
<#= GetBeginFeature(charSequence) #>
        /// <summary>
        /// Returns the end of the normalized substring of the input string.
        /// In other words, with <c>end=SpanQuickCheckYes(s);</c>
        /// the substring <c>s.Substring(0, end)</c>
        /// will pass the quick check with a "yes" result.
        /// </summary>
        /// <remarks>
        /// The returned end index is usually one or more characters before the
        /// "no" or "maybe" character: The end index is at a normalization boundary.
        /// (See the class documentation for more about normalization boundaries.)
        /// <para/>
        /// When the goal is a normalized string and most input strings are expected
        /// to be normalized already, then call this method,
        /// and if it returns a prefix shorter than the input string,
        /// copy that prefix and use <see cref="NormalizeSecondAndAppend(StringBuilder, <#=charSequence.NameForDocAsType#>)"/> for the remainder.
        /// </remarks>
        /// <param name="s">Input string.</param>
        /// <returns>"yes" span end index.</returns>
        /// <stable>ICU 4.4</stable>
        <#=GetAccessibility(charSequence)#> abstract int SpanQuickCheckYes(<#=charSequence#> s);
<#= GetEndFeature(charSequence) #>
<# } #>

    }
}
<#@ include file="../../../codegen/SharedObjects.tt" #>