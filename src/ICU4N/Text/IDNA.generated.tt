<#@ output extension=".cs" #>
<#@ include file="../../../codegen/FilterDeclarations.tt" #>
<#
CharSequenceFilter = (c) => c.Name != "ReadOnlySpan<char>";
AppendableFilter = (a) => a.Name != "ValueStringBuilder";
string codeGenerationRelativePath = @"../../../codegen";
#><#@ include file="../../../codegen/DataLoader.tt" #>//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using J2N.Text;
using System.Text;

namespace ICU4N.Text
{
    public abstract partial class IDNA
    {
<# foreach (var charSequence in CharSequences) { #>

        /// <summary>
        /// Converts a single domain name label into its ASCII form for DNS lookup.
        /// If any processing step fails, then info.HasErrors will be true and
        /// the result might not be an ASCII string.
        /// The label might be modified according to the types of errors.
        /// Labels with severe errors will be left in (or turned into) their Unicode form.
        /// </summary>
        /// <param name="label">Input domain name label.</param>
        /// <param name="dest">Destination string object.</param>
        /// <param name="info">Output container of IDNA processing details.</param>
        /// <returns><paramref name="dest"/></returns>
        /// <stable>ICU 4.6</stable>
        <#=charSequence.Accessibility#> abstract StringBuilder LabelToASCII(<#=charSequence#> label, StringBuilder dest, IDNAInfo info);
<# } #>
<# foreach (var charSequence in CharSequences) { #>

        /// <summary>
        /// Converts a single domain name label into its Unicode form for human-readable display.
        /// If any processing step fails, then info.HasErrors will be true.
        /// The label might be modified according to the types of errors.
        /// </summary>
        /// <param name="label">Input domain name label.</param>
        /// <param name="dest">Destination string object.</param>
        /// <param name="info">Output container of IDNA processing details.</param>
        /// <returns><paramref name="dest"/></returns>
        /// <stable>ICU 4.6</stable>
        <#=charSequence.Accessibility#> abstract StringBuilder LabelToUnicode(<#=charSequence#> label, StringBuilder dest, IDNAInfo info);
<# } #>
<# foreach (var charSequence in CharSequences) { #>

        /// <summary>
        /// Converts a whole domain name into its ASCII form for DNS lookup.
        /// If any processing step fails, then info.HasErrors will be true and
        /// the result might not be an ASCII string.
        /// The domain name might be modified according to the types of errors.
        /// Labels with severe errors will be left in (or turned into) their Unicode form.
        /// </summary>
        /// <param name="name">Input domain name.</param>
        /// <param name="dest">Destination string object.</param>
        /// <param name="info">Output container of IDNA processing details.</param>
        /// <returns><paramref name="dest"/></returns>
        /// <stable>ICU 4.6</stable>
        <#=charSequence.Accessibility#> abstract StringBuilder NameToASCII(<#=charSequence#> name, StringBuilder dest, IDNAInfo info);
<# } #>
<# foreach (var charSequence in CharSequences) { #>

        /// <summary>
        /// Converts a whole domain name into its Unicode form for human-readable display.
        /// If any processing step fails, then info.HasErrors will be true.
        /// The domain name might be modified according to the types of errors.
        /// </summary>
        /// <param name="name">Input domain name.</param>
        /// <param name="dest">Destination string object.</param>
        /// <param name="info">Output container of IDNA processing details.</param>
        /// <returns><paramref name="dest"/></returns>
        /// <stable>ICU 4.6</stable>
        <#=charSequence.Accessibility#> abstract StringBuilder NameToUnicode(<#=charSequence#> name, StringBuilder dest, IDNAInfo info);
<# } #>
    }
}
<#@ include file="../../../codegen/SharedObjects.tt" #>