<Project Sdk="Microsoft.NET.Sdk" ToolsVersion="15.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <PropertyGroup>
    <TargetFrameworks>netstandard2.0;net451;net40</TargetFrameworks>
    <DefineConstants Condition=" '$(TargetFramework)' == 'netstandard1.3' ">$(DefineConstants);LIBLOG_PORTABLE</DefineConstants>

    <SatelliteAssemblyTargetFramework>netstandard2.0</SatelliteAssemblyTargetFramework>
  </PropertyGroup>

  <PropertyGroup Label="NuGet Package Settings">
    <AssemblyTitle>ICU4N</AssemblyTitle>
    <Description>ICU (International Components for Unicode) is a set of libraries providing Unicode and Globalization support for software applications. It provides Text-boundary analysis (RuleBasedBreakIterator) as well as easy access to all of the many Unicode character properties, Unicode Normalization, Case Folding and other fundamental operations as specified by the Unicode Standard. ICU4N is a .NET port of ICU4J.</Description>
  </PropertyGroup>

  <ItemGroup Label="Import other ICU4J projects into the main assembly, so we only have 1 DLL to distribute">
    <Compile Include="../ICU4N.Collation/**/*.cs" Exclude="../ICU4N.Collation/obj/**/*.*;../ICU4N.Collation/bin/**/*.*" LinkBase="_merged_packages/Collation" />
    <Compile Include="../ICU4N.CurrencyData/**/*.cs" Exclude="../ICU4N.CurrencyData/obj/**/*.*;../ICU4N.CurrencyData/bin/**/*.*" LinkBase="_merged_packages/CurrencyData" />
    <Compile Include="../ICU4N.LanguageData/**/*.cs" Exclude="../ICU4N.LanguageData/obj/**/*.*;../ICU4N.LanguageData/bin/**/*.*" LinkBase="_merged_packages/LanguageData" />
    <Compile Include="../ICU4N.RegionData/**/*.cs" Exclude="../ICU4N.RegionData/obj/**/*.*;../ICU4N.RegionData/bin/**/*.*" LinkBase="_merged_packages/RegionData" />
  </ItemGroup>

  <ItemGroup>
    <InternalsVisibleTo Include="ICU4N.Collation" />
    <InternalsVisibleTo Include="ICU4N.Transliterator" />
    
    <InternalsVisibleTo Include="ICU4N.TestFramework" />
    <InternalsVisibleTo Include="ICU4N.Tests" />
    <InternalsVisibleTo Include="ICU4N.Tests.Collation" />
    <InternalsVisibleTo Include="ICU4N.Tests.Transliterator" />
  </ItemGroup>

  <ItemGroup>
    <PackageReference Include="J2N" Version="$(J2NPackageReferenceVersion)" />
  </ItemGroup>
  
  <ItemGroup Condition=" '$(TargetFramework)' == 'netstandard2.0' ">
    <PackageReference Include="Microsoft.Extensions.Caching.Memory" Version="$(MicrosoftExtensionsCachingMemoryPackageReferenceVersion)" />
  </ItemGroup>

  <ItemGroup Condition=" '$(TargetFramework)' == 'net451' ">
    <PackageReference Include="Microsoft.Extensions.Caching.Memory" Version="$(MicrosoftExtensionsCachingMemoryPackageReferenceVersion)" />
  </ItemGroup>

  <ItemGroup Condition=" '$(TargetFramework)' == 'net40' ">
    <Reference Include="System.Runtime.Caching" />
  </ItemGroup>

  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|AnyCPU'">
    <DebugSymbols>true</DebugSymbols>
  </PropertyGroup>

  <PropertyGroup>
    <ICU4JResourceConverterDir>$(SolutionDir)src/tools/ICU4JResourceConverter</ICU4JResourceConverterDir>
    <ICU4JResourceConverterOutputDir>$(ICU4JResourceConverterDir)/bin/$(Configuration)/net6.0</ICU4JResourceConverterOutputDir>

    <ICU4JDownloadConfigFilePath>$(SolutionDir).build/icu4j-download-urls.txt</ICU4JDownloadConfigFilePath>
    <ICU4JWorkingDirectory>$(ArtifactsDir)/icu4j-temp</ICU4JWorkingDirectory>
    <ICU4JResourcesDirectory>$(ICU4JWorkingDirectory)/icu4j-transformed</ICU4JResourcesDirectory>
  </PropertyGroup>
  
  <ItemGroup Label="Specifies generated sattelite assemblies should be copied to the output folder (and dependent projects as well)">
    <None Include="$(ICU4NSatelliteAssemblyOutputDir)/**/*.resources.dll" CopyToOutputDirectory="PreserveNewest" Visible="false" />
  </ItemGroup>
  
  <Target Name="CreateIntermediateTargetsFile" BeforeTargets="DownloadICU4J" Condition=" '$(TargetFramework)' == '$(SatelliteAssemblyTargetFramework)' ">

    <PropertyGroup>
      <Major>$(PackageVersion.Split('.')[0])</Major>
      <ICUDataFolderName>$(ICUDataPrefix)$(Major)$(ICUDataEndian)</ICUDataFolderName>
    </PropertyGroup>
    
    <ReplaceFileText InputFilename="$(AssemblyName).targets" OutputFilename="$(ArtifactsDir)/$(AssemblyName).targets" MatchExpression="\$version\$" ReplacementText="$(PackageVersion)" />
    <ReplaceFileText InputFilename="$(ArtifactsDir)/$(AssemblyName).targets" OutputFilename="$(ArtifactsDir)/$(AssemblyName).targets" MatchExpression="\$icuDataFolderName\$" ReplacementText="$(ICUDataFolderName)" />
  </Target>

  <ItemGroup>
    <None Include="$(SolutionDir)_artifacts/$(AssemblyName).targets" Pack="true" PackagePath="build/$(AssemblyName).targets" />
  </ItemGroup>

  <Target Name="DownloadICU4J" BeforeTargets="ExecICU4JResourceConverter" Returns="$(ICU4JJarFilePath)" Condition=" '$(TargetFramework)' == '$(SatelliteAssemblyTargetFramework)' ">
    
    <PropertyGroup>
      <Major>$(PackageVersion.Split('.')[0])</Major>
      <Minor>$(PackageVersion.Split('.')[1])</Minor>
      <ICU4JJarFilePath>$(ArtifactsDir)/icu4j-$(Major).$(Minor).jar</ICU4JJarFilePath>
    </PropertyGroup>
    
    <Message Text="Downloading ICU4J..." Importance="high" Condition=" !Exists('$(ICU4JJarFilePath)') " />
  
    <ReadICU4JDownloadUrls ConfigFilePath="$(ICU4JDownloadConfigFilePath)" MajorVersion="$(Major)" MinorVersion="$(Minor)" Condition=" !Exists('$(ICU4JJarFilePath)') ">
      <Output ItemName="ICU4JDownloadUrls" TaskParameter="Urls" />
    </ReadICU4JDownloadUrls>
  
    <Message Text="@(ICU4JDownloadUrls)" Importance="high" />
  
    <DownloadFileWithFallback Urls="@(ICU4JDownloadUrls)" DestinationFilePath="$(ICU4JJarFilePath)" Condition=" !Exists('$(ICU4JJarFilePath)')">
      <Output PropertyName="IsICU4JFileDownloaded" TaskParameter="Successful" />
    </DownloadFileWithFallback>
  
    <Error Condition=" '$(IsICU4JFileDownloaded)' != 'true' And !Exists('$(ICU4JJarFilePath)') " Text="The build cannot continue without $(ICU4JJarFilePath). Use Maven search (https://mvnrepository.com or https://search.maven.org/) to look for the file and download it manually to $(ICU4JJarFilePath). Alternatively, check the ICU Releases Page: https://github.com/unicode-org/icu/releases." />
  </Target>
    
  <Target Name="ExecICU4JResourceConverter" AfterTargets="GenerateSatelliteAssemblies" BeforeTargets="GenerateOurSatelliteAssemblies" Condition=" '$(TargetFramework)' == '$(SatelliteAssemblyTargetFramework)' ">
    
    <CheckWhetherResourcesRequireUpdate SourceFilePath="$(ICU4JJarFilePath)" DestinationPath="$(ICU4JResourcesDirectory)">
      <Output PropertyName="ResourcesRequireUpdate" TaskParameter="RequiresUpdate" />
    </CheckWhetherResourcesRequireUpdate>
  
    <Message Text="ResourcesRequireUpdate: $(ResourcesRequireUpdate)" Importance="high" />
    
    <Message Text="Converting ICU4J Resource Files..." Importance="high" Condition=" '$(ResourcesRequireUpdate.ToLowerInvariant())' == 'true' " />
    
    <RemoveDir Directories="$(ICU4JWorkingDirectory)" Condition=" '$(ResourcesRequireUpdate.ToLowerInvariant())' == 'true' " />
    <RemoveDir Directories="$(ICU4JResourcesDirectory)" Condition=" '$(ResourcesRequireUpdate.ToLowerInvariant())' == 'true' " />
    
    <PropertyGroup>
      <RunICU4JResourceConverterCommand>"$(ICU4JResourceConverterOutputDir)/ICU4JResourceConverter.exe"</RunICU4JResourceConverterCommand>
      <RunICU4JResourceConverterCommand>$(RunICU4JResourceConverterCommand) "$(ICU4JJarFilePath)"</RunICU4JResourceConverterCommand>
      <RunICU4JResourceConverterCommand>$(RunICU4JResourceConverterCommand) -work "$(ICU4JWorkingDirectory)"</RunICU4JResourceConverterCommand>
      <RunICU4JResourceConverterCommand>$(RunICU4JResourceConverterCommand) -out "$(ICU4JResourcesDirectory)"</RunICU4JResourceConverterCommand>
    </PropertyGroup>

    <Exec Command="$(RunICU4JResourceConverterCommand)" Condition=" '$(ResourcesRequireUpdate.ToLowerInvariant())' == 'true' " />
  </Target>

  <Target Name="GenerateOurSatelliteAssemblies" AfterTargets="ExecICU4JResourceConverter" BeforeTargets="DeploySatelliteAssemblies" Condition=" '$(TargetFramework)' == '$(SatelliteAssemblyTargetFramework)' ">

    <PropertyGroup>
      <TemplateAssemblyFilePath>$(IntermediateOutputPath)$(TargetName)$(TargetExt)</TemplateAssemblyFilePath>
    </PropertyGroup>
    
    <ItemGroup>
      <EmbeddedResources Include="$(ICU4JResourcesDirectory)/*.*" />
      <EmbeddedResourcesPaths Include="$([System.IO.Directory]::GetDirectories('$(ICU4JResourcesDirectory)'))" />
      
      <!-- This groups each locale together along with its nested files and root path -->
      <FolderInLocale Include="@(EmbeddedResourcesPaths)">
        <Culture>$([System.IO.Path]::GetFileName('%(Identity)'))</Culture>
        <Files>$([System.IO.Directory]::GetFiles('%(EmbeddedResourcesPaths.Identity)'))</Files>
      </FolderInLocale>
    </ItemGroup>
    
    <MakeDir Directories="$(ICU4NSatelliteAssemblyOutputDir)" Condition="!Exists('$(ICU4NSatelliteAssemblyOutputDir)')" />

    <!-- Make invariant resources -->
    <!--<AL EmbedResources="@(EmbeddedResources)" TargetType="library" TemplateFile="$(TemplateAssemblyFilePath)" Culture="" KeyFile="$(AssemblyOriginatorKeyFile)" OutputAssembly="$(ICU4NSatelliteAssemblyOutputDir)/$(AssemblyName).resources.dll" />-->
    <LinkAssemblies DotNetToolsDirectory="$(TargetFrameworkSDKToolsDirectory)" EmbedResources="@(EmbeddedResources)" Culture="" TemplateFile="$(TemplateAssemblyFilePath)" KeyFile="$(AssemblyOriginatorKeyFile)" OutputAssembly="$(ICU4NSatelliteAssemblyOutputDir)/$(AssemblyName).resources.dll" />
    
    <!-- Make localized resources -->
    <LinkAssemblies DotNetToolsDirectory="$(TargetFrameworkSDKToolsDirectory)" EmbedResources="@(FolderInLocale->'%(Files)')" Culture="%(FolderInLocale.Culture)" TemplateFile="$(TemplateAssemblyFilePath)" KeyFile="$(AssemblyOriginatorKeyFile)" OutputAssembly="$(ICU4NSatelliteAssemblyOutputDir)/%(FolderInLocale.Culture)/$(AssemblyName).resources.dll" />

  </Target>

  <!-- Runs the assembly linker only if it needs updating based on the timestamps of the source files -->
  <UsingTask TaskName="LinkAssemblies" TaskFactory="RoslynCodeTaskFactory" AssemblyFile="$(MSBuildBinPath)\Microsoft.Build.Tasks.Core.dll">
    <ParameterGroup>
      <DotNetToolsDirectory ParameterType="System.String" Required="true" />
      <EmbedResources ParameterType="System.String" Required="true" />
      <Culture ParameterType="System.String" />
      <OutputAssembly ParameterType="System.String" Required="true" />
      <TemplateFile ParameterType="System.String" Required="true" />
      <KeyFile ParameterType="System.String" />
    </ParameterGroup>
    <Task>
      <Using Namespace="System" />
      <Using Namespace="System.Diagnostics" />
      <Using Namespace="System.IO" />
      <Using Namespace="System.Text" />
      <Code Type="Fragment" Language="cs">
        <![CDATA[
          //Log.LogMessage(MessageImportance.High, $"Checking Whether Satellite Assembly for {Culture} is up to date...");
          
          bool requiresUpdate = false;
          var embeddedResourceFiles = EmbedResources.Split(';');
          if (File.Exists(OutputAssembly) && embeddedResourceFiles.Length > 0)
          {
              DateTime latestDestinationWrite = File.GetLastWriteTimeUtc(OutputAssembly);
         
              foreach (var file in embeddedResourceFiles)
              {
                  if (latestDestinationWrite < File.GetLastWriteTimeUtc(file))
                  {
                      requiresUpdate = true;
                      break;
                  }
              }
          }
          else
          {
              requiresUpdate = true;
          }
          
          if (requiresUpdate)
          {
              // Need to delete the files if they exist, otherwise the timestamps will be wrong
              var directory = Path.GetDirectoryName(OutputAssembly);
              if (Directory.Exists(directory))
                  Directory.Delete(directory, recursive: true);
              Directory.CreateDirectory(directory);
          
              Log.LogMessage(MessageImportance.High, $"Generating Satellite Assembly for {Culture}");
              var command = DotNetToolsDirectory + "al.exe";
              var sb = new StringBuilder();
              const string Space = " ";
              
              sb.Append("-target:lib");
              if (!string.IsNullOrWhiteSpace(Culture))
              {
                  sb.Append(Space);
                  sb.Append($"-culture:{Culture}");
              }
              sb.Append(Space);
              sb.Append($"-out:{OutputAssembly}");
              sb.Append(Space);
              sb.Append($"-template:{TemplateFile}");
              if (KeyFile != null)
              {
                  sb.Append(Space);
                  sb.Append($"-keyfile:{KeyFile}");
              }
              foreach (var file in embeddedResourceFiles)
              {
                  sb.Append(Space);
                  sb.Append($"-embed:{file}");
              }
              var args = sb.ToString();
              //Log.LogMessage(MessageImportance.High, "Command: " + command);
              //Log.LogMessage(MessageImportance.High, "Args: " + args);
              using Process p = new Process();
              p.StartInfo.UseShellExecute = false;
              //p.StartInfo.RedirectStandardOutput = true;
              p.StartInfo.RedirectStandardError = true;
              p.StartInfo.FileName = command;
              p.StartInfo.Arguments = args;
              p.Start();
              //var stdOut = p.StandardOutput.ReadToEnd();
              var stdErr = p.StandardError.ReadToEnd();
              p.WaitForExit();
              //Log.LogMessage(MessageImportance.High, "stdOut: " + stdOut);
              if (!string.IsNullOrWhiteSpace(stdErr))
                  Log.LogMessage(MessageImportance.High, "stdErr: " + stdErr);
          }
        ]]>
      </Code>
    </Task>
  </UsingTask>

  <UsingTask TaskName="DownloadFileWithFallback" TaskFactory="RoslynCodeTaskFactory" AssemblyFile="$(MSBuildBinPath)\Microsoft.Build.Tasks.Core.dll">
     <ParameterGroup>
      <Urls ParameterType="Microsoft.Build.Framework.ITaskItem[]" Required="true" />
      <DestinationFilePath ParameterType="System.String" Required="true" />
      <!--<Tries ParameterType="System.Int32" />-->
      <Successful ParameterType="System.Boolean" Output="true" />
    </ParameterGroup>
    <Task>
      <Using Namespace="System" />
      <Using Namespace="System.Net" />
      <Using Namespace="System.IO" />
      <Code Type="Fragment" Language="cs">
        <![CDATA[
        Successful = false;
        Directory.CreateDirectory(Path.GetDirectoryName(DestinationFilePath.ToString()));
        using var client = new WebClient();
        foreach (var url in Urls)
        {
            try
            {
                var tempFile = Path.GetDirectoryName(DestinationFilePath.ToString()) + Path.DirectorySeparatorChar + Guid.NewGuid().ToString();
                client.DownloadFile(url.ToString(), tempFile);
                File.Move(tempFile, DestinationFilePath.ToString());
                Successful = true;
                Log.LogMessage(MessageImportance.High, $"[SUCCESS] Downloaded {DestinationFilePath} from {url}");
                break;
            }
            catch (Exception e)
            {
                Log.LogMessage(MessageImportance.High, $"[ERROR] Downloading {DestinationFilePath} from {url} failed: {e}");
                continue;
            }
        }
        ]]>
      </Code>
    </Task>
  </UsingTask>
  
  <UsingTask TaskName="ReadICU4JDownloadUrls" TaskFactory="RoslynCodeTaskFactory" AssemblyFile="$(MSBuildBinPath)\Microsoft.Build.Tasks.Core.dll">
    <ParameterGroup>
      <ConfigFilePath ParameterType="System.String" Required="true" />
      <MajorVersion ParameterType="System.String" Required="true" />
      <MinorVersion ParameterType="System.String" Required="true" />
      <Urls ParameterType="Microsoft.Build.Framework.ITaskItem[]" Output="true" />
    </ParameterGroup>
    <Task>
      <Using Namespace="System" />
      <Using Namespace="System.IO" />
      <Using Namespace="System.Text" />
      <Code Type="Fragment" Language="cs">
        <![CDATA[
        using var reader = new StreamReader(ConfigFilePath.ToString(), Encoding.UTF8);
        var result = new List<string>();
        string line, lineCleaned;
        while ((line = reader.ReadLine()) != null)
        {
            // Ignore commented line
            if (line.StartsWith("#", StringComparison.Ordinal))
                continue;
            // Ignore line after comment symbol (if it exists)
            int firstComment = line.IndexOf('#');
            if (firstComment >=0)
                lineCleaned = line.Substring(0, firstComment);
            else
                lineCleaned = line;
            result.Add(string.Format(lineCleaned, MajorVersion.ToString(), MinorVersion.ToString()));
        }
        Urls = new TaskItem[result.Count];
        for (int i = 0; i < result.Count; i++)
            Urls[i] = new TaskItem(result[i]);
        ]]>
      </Code>
    </Task>
  </UsingTask>

  <UsingTask TaskName="CheckWhetherResourcesRequireUpdate" TaskFactory="RoslynCodeTaskFactory" AssemblyFile="$(MSBuildBinPath)\Microsoft.Build.Tasks.Core.dll">
    <ParameterGroup>
      <SourceFilePath ParameterType="System.String" Required="true" />
      <DestinationPath ParameterType="System.String" Required="true" />
      <RequiresUpdate ParameterType="System.Boolean" Output="true" />
    </ParameterGroup>
    <Task>
      <Using Namespace="System" />
      <Using Namespace="System.IO" />
      <Using Namespace="System.Text" />
      <Code Type="Fragment" Language="cs">
        <![CDATA[
            RequiresUpdate = false;
            if (Directory.Exists(DestinationPath))
            {
                string[] files = Directory.GetFiles(DestinationPath, "*.*", SearchOption.AllDirectories);
                if (File.Exists(SourceFilePath) && files.Length > 0)
                {
                    DateTime latestSourceWrite = File.GetLastWriteTimeUtc(SourceFilePath);

                    // Check whether the source write is newer (greater than) than any destination write
                    foreach (var file in files)
                    {
                        if (latestSourceWrite > File.GetLastWriteTimeUtc(file))
                        {
                            RequiresUpdate = true;
                            break;
                        }
                    }
                }
                else
                {
                    RequiresUpdate = true;
                }
            }
            else
            {
                RequiresUpdate = true;
            }
          ]]>
        </Code>
    </Task>
  </UsingTask>

  <ItemGroup>
    <None Include="Impl\Norm2AllModesExtension.cs">
      <DesignTime>True</DesignTime>
      <AutoGen>True</AutoGen>
      <DependentUpon>Norm2AllModesExtension.tt</DependentUpon>
    </None>
    <None Include="Text\FilteredBreakIteratorBuilderExtension.cs">
      <DesignTime>True</DesignTime>
      <AutoGen>True</AutoGen>
      <DependentUpon>FilteredBreakIteratorBuilderExtension.tt</DependentUpon>
    </None>
    <None Include="Text\Normalizer2Extension.cs">
      <DesignTime>True</DesignTime>
      <AutoGen>True</AutoGen>
      <DependentUpon>Normalizer2Extension.tt</DependentUpon>
    </None>
    <None Include="Util\CharsTrieBuilderExtension.cs">
      <DesignTime>True</DesignTime>
      <AutoGen>True</AutoGen>
      <DependentUpon>CharsTrieBuilderExtension.tt</DependentUpon>
    </None>
  </ItemGroup>

  <ItemGroup>
    <Compile Update="Globalization\CharSequencesExtension.cs">
      <DesignTime>True</DesignTime>
      <AutoGen>True</AutoGen>
      <DependentUpon>CharSequencesExtension.tt</DependentUpon>
    </Compile>
    <Compile Update="Globalization\UCharacterExtension.cs">
      <DesignTime>True</DesignTime>
      <AutoGen>True</AutoGen>
      <DependentUpon>UCharacterExtension.tt</DependentUpon>
    </Compile>
    <Compile Update="ICUConfig.Designer.cs">
      <DesignTime>True</DesignTime>
      <AutoGen>True</AutoGen>
      <DependentUpon>ICUConfig.resx</DependentUpon>
    </Compile>
    <Compile Update="Impl\BMPSetExtension.cs">
      <DesignTime>True</DesignTime>
      <AutoGen>True</AutoGen>
      <DependentUpon>BMPSetExtension.tt</DependentUpon>
    </Compile>
    <Compile Update="Impl\CaseMapImplExtension.cs">
      <DesignTime>True</DesignTime>
      <AutoGen>True</AutoGen>
      <DependentUpon>CaseMapImplExtension.tt</DependentUpon>
    </Compile>
    <Compile Update="Impl\Norm2AllModesExtension.cs">
      <DesignTime>True</DesignTime>
      <AutoGen>True</AutoGen>
      <DependentUpon>Norm2AllModesExtension.tt</DependentUpon>
    </Compile>
    <Compile Update="Impl\Normalizer2ImplExtension.cs">
      <DesignTime>True</DesignTime>
      <AutoGen>True</AutoGen>
      <DependentUpon>Normalizer2ImplExtension.tt</DependentUpon>
    </Compile>
    <Compile Update="Impl\PatternPropsExtension.cs">
      <DesignTime>True</DesignTime>
      <AutoGen>True</AutoGen>
      <DependentUpon>PatternPropsExtension.tt</DependentUpon>
    </Compile>
    <Compile Update="Impl\PunycodeExtension.cs">
      <DesignTime>True</DesignTime>
      <AutoGen>True</AutoGen>
      <DependentUpon>PunycodeExtension.tt</DependentUpon>
    </Compile>
    <Compile Update="Impl\SimpleFormatterImplExtension.cs">
      <DesignTime>True</DesignTime>
      <AutoGen>True</AutoGen>
      <DependentUpon>SimpleFormatterImplExtension.tt</DependentUpon>
    </Compile>
    <Compile Update="Impl\StandardPluralExtension.cs">
      <DesignTime>True</DesignTime>
      <AutoGen>True</AutoGen>
      <DependentUpon>StandardPluralExtension.tt</DependentUpon>
    </Compile>
    <Compile Update="Impl\UCasePropsExtension.cs">
      <DesignTime>True</DesignTime>
      <AutoGen>True</AutoGen>
      <DependentUpon>UCasePropsExtension.tt</DependentUpon>
    </Compile>
    <Compile Update="Impl\UnicodeSetStringSpanExtension.cs">
      <DesignTime>True</DesignTime>
      <AutoGen>True</AutoGen>
      <DependentUpon>UnicodeSetStringSpanExtension.tt</DependentUpon>
    </Compile>
    <Compile Update="Impl\UPropertyAliasesExtension.cs">
      <DesignTime>True</DesignTime>
      <AutoGen>True</AutoGen>
      <DependentUpon>UPropertyAliasesExtension.tt</DependentUpon>
    </Compile>
    <Compile Update="Impl\UResourceExtension.cs">
      <DesignTime>True</DesignTime>
      <AutoGen>True</AutoGen>
      <DependentUpon>UResourceExtension.tt</DependentUpon>
    </Compile>
    <Compile Update="Impl\UtilityExtension.cs">
      <DesignTime>True</DesignTime>
      <AutoGen>True</AutoGen>
      <DependentUpon>UtilityExtension.tt</DependentUpon>
    </Compile>
    <Compile Update="Impl\UTS46Extension.cs">
      <DesignTime>True</DesignTime>
      <AutoGen>True</AutoGen>
      <DependentUpon>UTS46Extension.tt</DependentUpon>
    </Compile>
    <Compile Update="Support\Text\UnicodeSetExtensionsExtension.cs">
      <DesignTime>True</DesignTime>
      <AutoGen>True</AutoGen>
      <DependentUpon>UnicodeSetExtensionsExtension.tt</DependentUpon>
    </Compile>
    <Compile Update="Support\Text\UnicodeSetPartialExtension.cs">
      <DesignTime>True</DesignTime>
      <AutoGen>True</AutoGen>
      <DependentUpon>UnicodeSetPartialExtension.tt</DependentUpon>
    </Compile>
    <Compile Update="Text\CaseMapExtension.cs">
      <DesignTime>True</DesignTime>
      <AutoGen>True</AutoGen>
      <DependentUpon>CaseMapExtension.tt</DependentUpon>
    </Compile>
    <Compile Update="Text\FilteredBreakIteratorBuilderExtension.cs">
      <DesignTime>True</DesignTime>
      <AutoGen>True</AutoGen>
      <DependentUpon>FilteredBreakIteratorBuilderExtension.tt</DependentUpon>
    </Compile>
    <Compile Update="Text\FilteredNormalizer2Extension.cs">
      <DesignTime>True</DesignTime>
      <AutoGen>True</AutoGen>
      <DependentUpon>FilteredNormalizer2Extension.tt</DependentUpon>
    </Compile>
    <Compile Update="Text\IDNAExtension.cs">
      <DesignTime>True</DesignTime>
      <AutoGen>True</AutoGen>
      <DependentUpon>IDNAExtension.tt</DependentUpon>
    </Compile>
    <Compile Update="Text\Normalizer2Extension.cs">
      <DesignTime>True</DesignTime>
      <AutoGen>True</AutoGen>
      <DependentUpon>Normalizer2Extension.tt</DependentUpon>
    </Compile>
    <Compile Update="Text\NormalizerExtension.cs">
      <DesignTime>True</DesignTime>
      <AutoGen>True</AutoGen>
      <DependentUpon>NormalizerExtension.tt</DependentUpon>
    </Compile>
    <Compile Update="Text\SimpleFormatterExtension.cs">
      <DesignTime>True</DesignTime>
      <AutoGen>True</AutoGen>
      <DependentUpon>SimpleFormatterExtension.tt</DependentUpon>
    </Compile>
    <Compile Update="Text\UnicodeSetExtension.cs">
      <DesignTime>True</DesignTime>
      <AutoGen>True</AutoGen>
      <DependentUpon>UnicodeSetExtension.tt</DependentUpon>
    </Compile>
    <Compile Update="Text\UnicodeSetSpannerExtension.cs">
      <DesignTime>True</DesignTime>
      <AutoGen>True</AutoGen>
      <DependentUpon>UnicodeSetSpannerExtension.tt</DependentUpon>
    </Compile>
    <Compile Update="Text\UTF16Extension.cs">
      <DesignTime>True</DesignTime>
      <AutoGen>True</AutoGen>
      <DependentUpon>UTF16Extension.tt</DependentUpon>
    </Compile>
    <Compile Update="Util\CharsTrieBuilderExtension.cs">
      <DesignTime>True</DesignTime>
      <AutoGen>True</AutoGen>
      <DependentUpon>CharsTrieBuilderExtension.tt</DependentUpon>
    </Compile>
    <Compile Update="Util\CharsTrieExtension.cs">
      <DesignTime>True</DesignTime>
      <AutoGen>True</AutoGen>
      <DependentUpon>CharsTrieExtension.tt</DependentUpon>
    </Compile>
  </ItemGroup>

  <ItemGroup>
    <EmbeddedResource Update="ICUConfig.resx">
      <Generator>ResXFileCodeGenerator</Generator>
      <LastGenOutput>ICUConfig.Designer.cs</LastGenOutput>
    </EmbeddedResource>
  </ItemGroup>

  <ItemGroup>
    <None Update="Impl\BMPSetExtension.tt">
      <Generator>TextTemplatingFileGenerator</Generator>
      <LastGenOutput>BMPSetExtension.cs</LastGenOutput>
    </None>
    <None Update="Impl\CaseMapImplExtension.tt">
      <Generator>TextTemplatingFileGenerator</Generator>
      <LastGenOutput>CaseMapImplExtension.cs</LastGenOutput>
    </None>
    <None Update="Impl\Norm2AllModesExtension.tt">
      <Generator>TextTemplatingFileGenerator</Generator>
      <LastGenOutput>Norm2AllModesExtension.cs</LastGenOutput>
    </None>
    <None Update="Impl\Normalizer2ImplExtension.tt">
      <Generator>TextTemplatingFileGenerator</Generator>
      <LastGenOutput>Normalizer2ImplExtension.cs</LastGenOutput>
    </None>
    <None Update="Impl\PatternPropsExtension.tt">
      <Generator>TextTemplatingFileGenerator</Generator>
      <LastGenOutput>PatternPropsExtension.cs</LastGenOutput>
    </None>
    <None Update="Impl\PunycodeExtension.tt">
      <Generator>TextTemplatingFileGenerator</Generator>
      <LastGenOutput>PunycodeExtension.cs</LastGenOutput>
    </None>
    <None Update="Impl\SimpleFormatterImplExtension.tt">
      <Generator>TextTemplatingFileGenerator</Generator>
      <LastGenOutput>SimpleFormatterImplExtension.cs</LastGenOutput>
    </None>
    <None Update="Impl\StandardPluralExtension.tt">
      <Generator>TextTemplatingFileGenerator</Generator>
      <LastGenOutput>StandardPluralExtension.cs</LastGenOutput>
    </None>
    <None Update="Impl\UCasePropsExtension.tt">
      <Generator>TextTemplatingFileGenerator</Generator>
      <LastGenOutput>UCasePropsExtension.cs</LastGenOutput>
    </None>
    <None Update="Impl\UnicodeSetStringSpanExtension.tt">
      <Generator>TextTemplatingFileGenerator</Generator>
      <LastGenOutput>UnicodeSetStringSpanExtension.cs</LastGenOutput>
    </None>
    <None Update="Impl\UPropertyAliasesExtension.tt">
      <Generator>TextTemplatingFileGenerator</Generator>
      <LastGenOutput>UPropertyAliasesExtension.cs</LastGenOutput>
    </None>
    <None Update="Impl\UResourceExtension.tt">
      <Generator>TextTemplatingFileGenerator</Generator>
      <LastGenOutput>UResourceExtension.cs</LastGenOutput>
    </None>
    <None Update="Impl\UtilityExtension.tt">
      <Generator>TextTemplatingFileGenerator</Generator>
      <LastGenOutput>UtilityExtension.cs</LastGenOutput>
    </None>
    <None Update="Impl\UTS46Extension.tt">
      <Generator>TextTemplatingFileGenerator</Generator>
      <LastGenOutput>UTS46Extension.cs</LastGenOutput>
    </None>
    <None Update="Globalization\CharSequencesExtension.tt">
      <Generator>TextTemplatingFileGenerator</Generator>
      <LastGenOutput>CharSequencesExtension.cs</LastGenOutput>
    </None>
    <None Update="Globalization\UCharacterExtension.tt">
      <Generator>TextTemplatingFileGenerator</Generator>
      <LastGenOutput>UCharacterExtension.cs</LastGenOutput>
    </None>
    <None Update="Support\Text\UnicodeSetExtensionsExtension.tt">
      <Generator>TextTemplatingFileGenerator</Generator>
      <LastGenOutput>UnicodeSetExtensionsExtension.cs</LastGenOutput>
    </None>
    <None Update="Support\Text\UnicodeSetPartialExtension.tt">
      <Generator>TextTemplatingFileGenerator</Generator>
      <LastGenOutput>UnicodeSetPartialExtension.cs</LastGenOutput>
    </None>
    <None Update="Text\CaseMapExtension.tt">
      <Generator>TextTemplatingFileGenerator</Generator>
      <LastGenOutput>CaseMapExtension.cs</LastGenOutput>
    </None>
    <None Update="Text\FilteredBreakIteratorBuilderExtension.tt">
      <Generator>TextTemplatingFileGenerator</Generator>
      <LastGenOutput>FilteredBreakIteratorBuilderExtension.cs</LastGenOutput>
    </None>
    <None Update="Text\FilteredNormalizer2Extension.tt">
      <Generator>TextTemplatingFileGenerator</Generator>
      <LastGenOutput>FilteredNormalizer2Extension.cs</LastGenOutput>
    </None>
    <None Update="Text\IDNAExtension.tt">
      <Generator>TextTemplatingFileGenerator</Generator>
      <LastGenOutput>IDNAExtension.cs</LastGenOutput>
    </None>
    <None Update="Text\Normalizer2Extension.tt">
      <Generator>TextTemplatingFileGenerator</Generator>
      <LastGenOutput>Normalizer2Extension.cs</LastGenOutput>
    </None>
    <None Update="Text\NormalizerExtension.tt">
      <Generator>TextTemplatingFileGenerator</Generator>
      <LastGenOutput>NormalizerExtension.cs</LastGenOutput>
    </None>
    <None Update="Text\SimpleFormatterExtension.tt">
      <Generator>TextTemplatingFileGenerator</Generator>
      <LastGenOutput>SimpleFormatterExtension.cs</LastGenOutput>
    </None>
    <None Update="Text\UnicodeSetExtension.tt">
      <Generator>TextTemplatingFileGenerator</Generator>
      <LastGenOutput>UnicodeSetExtension.cs</LastGenOutput>
    </None>
    <None Update="Text\UnicodeSetSpannerExtension.tt">
      <Generator>TextTemplatingFileGenerator</Generator>
      <LastGenOutput>UnicodeSetSpannerExtension.cs</LastGenOutput>
    </None>
    <None Update="Text\UTF16Extension.tt">
      <Generator>TextTemplatingFileGenerator</Generator>
      <LastGenOutput>UTF16Extension.cs</LastGenOutput>
    </None>
    <None Update="Util\CharsTrieBuilderExtension.tt">
      <Generator>TextTemplatingFileGenerator</Generator>
      <LastGenOutput>CharsTrieBuilderExtension.cs</LastGenOutput>
    </None>
    <None Update="Util\CharsTrieExtension.tt">
      <Generator>TextTemplatingFileGenerator</Generator>
      <LastGenOutput>CharsTrieExtension.cs</LastGenOutput>
    </None>
  </ItemGroup>

  <ItemGroup>
    <Service Include="{508349b6-6b84-4df5-91f0-309beebad82d}" />
  </ItemGroup>

</Project>
