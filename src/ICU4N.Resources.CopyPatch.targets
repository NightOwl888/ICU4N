<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <!-- 
    Required properties to be defined before importing:
    
    _ICU4NResourcesPackageId - Package Id of the current NuGet project (the one containing the satellite assemblies to be copied)
    _ICU4NResourcesSourcesDirectory - The directory in the package where the ICU4N.resources.dll files will be copied from. It usually includes a target framework, such as lib/netstandard2.0 or lib/net40.
    _ICU4NNewtonsoftJsonTargetFramework - The target framework of Newtonsoft.Json to use from the version specified in _ICU4NNewtonsoftJsonPackageVersion. Note that this build does not support dependencies, so it is important to select a target framework that has no dependencies defined.
  -->

  <PropertyGroup Label="ICU4N properties">
    <_ICU4NResourcesPackageRootDirectory>$([System.IO.Path]::GetFullPath('$(MSBuildThisFileDirectory)../'))</_ICU4NResourcesPackageRootDirectory>
    <_ICU4NResourcesDirectory>$([System.IO.Path]::GetFullPath('$(_ICU4NResourcesPackageRootDirectory)$(_ICU4NResourcesSourcesDirectory)'))</_ICU4NResourcesDirectory>
    <_ICU4NResourcesVersion>$([System.IO.Path]::GetFileName('$(_ICU4NResourcesPackageRootDirectory.TrimEnd('/').TrimEnd('\'))'))</_ICU4NResourcesVersion>
    <_ICU4NTargetDepsJsonFileName>$(AssemblyName).deps.json</_ICU4NTargetDepsJsonFileName>
    <_ICU4NCopyDuringBuild>true</_ICU4NCopyDuringBuild>
    <_ICU4NCopyDuringBuild Condition="('$(TargetFrameworkIdentifier)' == '.NETCoreApp' Or '$(TargetFrameworkIdentifier)' == '.NETStandard') And '$(OutputType)' == 'Library'">false</_ICU4NCopyDuringBuild>
  </PropertyGroup>

  <PropertyGroup Label="Newtonsoft.Json properties">
    <_ICU4NNewtonsoftJsonPackageVersion Condition="'$(_ICU4NNewtonsoftJsonPackageVersion)' == ''">13.0.3</_ICU4NNewtonsoftJsonPackageVersion>
  </PropertyGroup>

  <ItemGroup Condition=" '$(PkgNewtonsoft_Json)' == '' ">
    <PackageReference Include="Newtonsoft.Json" Version="$(_ICU4NNewtonsoftJsonPackageVersion)" PrivateAssets="All" />
  </ItemGroup>

  <ItemGroup>
    <_ICU4NResourceFiles Include="$(_ICU4NResourcesDirectory)/**/*.resources.dll" Exclude="$(_ICU4NResourcesDirectory)/ICU4N.resources.dll" />
  </ItemGroup>

  <!-- Target to copy files and update .deps.json only if files don't exist in the output folder -->
  <UsingTask TaskName="ICU4NPatchMSBuildResourceCopy" TaskFactory="RoslynCodeTaskFactory" AssemblyFile="$(MSBuildBinPath)/Microsoft.Build.Tasks.Core.dll">
    <ParameterGroup>
      <OutputPath ParameterType="System.String" Required="true" />
      <TargetDepsJsonFileName ParameterType="System.String" Required="true" />
      <TargetFrameworkIdentifier ParameterType="System.String" Required="true" />
      <TargetFrameworkVersion ParameterType="System.String" Required="true" />
      <ResourcesPackageId ParameterType="System.String" Required="true" />
      <ResourcesPackageVersion ParameterType="System.String" Required="true" />
      <ResourcesSourcesDirectory ParameterType="System.String" Required="true" />
      <ResourceFiles ParameterType="Microsoft.Build.Framework.ITaskItem[]" Required="true" />
      <!-- See: https://learn.microsoft.com/en-us/dotnet/core/project-sdk/msbuild-props#satelliteresourcelanguages -->
      <SatelliteResourceLanguages ParameterType="System.String" Required="false" />
    </ParameterGroup>
    <Task>
      <Reference Include="$(NugetPackageRoot)/newtonsoft.json/$(_ICU4NNewtonsoftJsonPackageVersion)/lib/$(_ICU4NNewtonsoftJsonTargetFramework)/Newtonsoft.Json.dll" />
      <Using Namespace="System" />
      <Using Namespace="System.Collections.Generic" />
      <Using Namespace="System.IO" />
      <Using Namespace="System.Linq" />
      <Using Namespace="Newtonsoft.Json" />
      <Using Namespace="Newtonsoft.Json.Linq" />

      <Code Type="Fragment" Language="cs">
        <![CDATA[
        // Parse SatelliteResourceLanguages into a list of cultures (if specified)
        List<string> satelliteLanguages = null;
        if (!string.IsNullOrWhiteSpace(SatelliteResourceLanguages))
        {
            satelliteLanguages = SatelliteResourceLanguages.ToString()
                .Split(';')
                .Select(culture => culture.Trim())
                .ToList();
        }
        
        string targetDepsJsonFile = $"{OutputPath}{TargetDepsJsonFileName}";
        
        // Check if .deps.json file exists
        bool depsJsonExists = File.Exists(targetDepsJsonFile);
        
        Log.LogMessage(MessageImportance.Normal, $"targetDepsJsonFile: {targetDepsJsonFile}, Exists: {depsJsonExists}");
        
        JObject depsJson;
        
        // Construct the key in the .deps.json file based on target framework
        string targetFrameworkKey = $"{TargetFrameworkIdentifier},Version={TargetFrameworkVersion}";
        string packageKey = $"{ResourcesPackageId}/{ResourcesPackageVersion}";

        // Skip copying in cases where the .deps.json file exists and it doesn't contain the "targets" section containing the "resources" section.
        // In projects other than .NET Core, there is no .deps.json file, so we will always do the copy even if the resources are not required
        // (such as when building a class library). This is the convention that was followed for .NET Framework projects.
        if (depsJsonExists)
        {
            // Parse the .deps.json file
            depsJson = JObject.Parse(File.ReadAllText(targetDepsJsonFile));

            // Check if "targets" section exists
            if (depsJson["targets"] == null)
            {
                Log.LogMessage(MessageImportance.Normal, "Skipping copy: 'targets' section missing from .deps.json.");
                return true;
            }

            // Check if the targetFrameworkKey exists under "targets"
            if (depsJson["targets"][targetFrameworkKey] == null)
            {
                Log.LogMessage(MessageImportance.Normal, $"Skipping copy: '{targetFrameworkKey}' section missing from .deps.json.");
                return true;
            }

            // Check if the packageKey exists under the targetFrameworkKey
            if (depsJson["targets"][targetFrameworkKey][packageKey] == null)
            {
                Log.LogMessage(MessageImportance.Normal, $"Skipping copy: '{packageKey}' section missing from .deps.json.");
                return true;
            }

            // Check if "resources" section exists under the packageKey
            if (depsJson["targets"][targetFrameworkKey][packageKey]["resources"] == null)
            {
                Log.LogMessage(MessageImportance.Normal, "Skipping copy: 'resources' section missing from .deps.json.");
                return true;
            }
            
            // If we reach this point, all checks have passed, and we proceed with the copy operation.
            Log.LogMessage(MessageImportance.High, "Proceeding with resource copy and JSON update.");
        }
        else
        {
            depsJson = new JObject(); // Initialize to empty
        
            // If we reach this point, all checks have passed, and we proceed with the copy operation.
            Log.LogMessage(MessageImportance.High, "Proceeding with resource copy.");
        }

        bool jsonUpdated = false;

        foreach (var resourceFile in ResourceFiles)
        {
            string filePath = resourceFile.ItemSpec;

            // Extract the culture from the folder name
            string culture = Path.GetFileName(Path.GetDirectoryName(filePath));
            
            // If SatelliteResourceLanguages is specified, skip non-matching cultures
            if (satelliteLanguages != null && !satelliteLanguages.Contains(culture, StringComparer.OrdinalIgnoreCase))
            {
                Log.LogMessage(MessageImportance.Normal, $"Skipping culture '{culture}' as it is not in SatelliteResourceLanguages.");
                continue;
            }
            
            string fileName = Path.GetFileName(filePath);

            // Determine the target output path
            string destinationFile = Path.Combine(OutputPath, culture, fileName);

            Log.LogMessage(MessageImportance.Normal, "Checking file: " + destinationFile);

            // Copy the file if it doesn't already exist
            if (!File.Exists(destinationFile))
            {
                Log.LogMessage(MessageImportance.High, "Copying file: " + destinationFile);

                Directory.CreateDirectory(Path.GetDirectoryName(destinationFile));
                File.Copy(filePath, destinationFile, overwrite: true);

                if (depsJsonExists)
                {
                    // Update the .deps.json if not already updated for this culture
                    var resources = depsJson["targets"][targetFrameworkKey][packageKey]["resources"]
                                as JObject;
                                
                    string packageResourcePath = $"{ResourcesSourcesDirectory}/{culture}/{fileName}";
                                
                    if (!resources.ContainsKey(packageResourcePath))
                    {
                        resources[packageResourcePath] = new JObject { ["locale"] = culture };
                        jsonUpdated = true;
                    }
                }
            }
        }

        // Write the .deps.json file only once if there were updates
        if (jsonUpdated)
        {
            Log.LogMessage(MessageImportance.High, "Updating JSON file: " + targetDepsJsonFile);
            
            // Retrieve the resources JObject
            var resources = depsJson["targets"][targetFrameworkKey][packageKey]["resources"] as JObject;

            // Create a new sorted JObject from both existing and newly added entries
            var sortedResources = new JObject(
              resources.Properties().OrderBy(p => p.Name, StringComparer.Ordinal)
            );

            // Assign the sorted entries back to the .deps.json
            depsJson["targets"][targetFrameworkKey][packageKey]["resources"] = sortedResources;
            
            File.WriteAllText(targetDepsJsonFile, depsJson.ToString());
        }
        ]]>
      </Code>
    </Task>
  </UsingTask>

  <!-- NOTE: These targets must be independent of each other because MSBuild only runs a
      target once and both of these may be required to run in the same publish operation. -->

  <Target Name="ICU4NPatchSatelliteAssemblyCopyDuringBuild" AfterTargets="AfterBuild" Condition="'$(_ICU4NCopyDuringBuild)' == 'true'">
    <ICU4NPatchMSBuildResourceCopy
      OutputPath="$(OutputPath)"
      TargetDepsJsonFileName="$(_ICU4NTargetDepsJsonFileName)"
      TargetFrameworkIdentifier="$(TargetFrameworkIdentifier)"
      TargetFrameworkVersion="$(TargetFrameworkVersion)"
      ResourcesPackageId="$(_ICU4NResourcesPackageId)"
      ResourcesPackageVersion="$(_ICU4NResourcesVersion)"
      ResourcesSourcesDirectory="$(_ICU4NResourcesSourcesDirectory)"
      ResourceFiles="@(_ICU4NResourceFiles)"
      SatelliteResourceLanguages="$(SatelliteResourceLanguages)"
    />
  </Target>

  <Target Name="ICU4NPatchSatelliteAssemblyCopyDuringPublish" AfterTargets="Publish">
    <ICU4NPatchMSBuildResourceCopy
      OutputPath="$(PublishDir)"
      TargetDepsJsonFileName="$(_ICU4NTargetDepsJsonFileName)"
      TargetFrameworkIdentifier="$(TargetFrameworkIdentifier)"
      TargetFrameworkVersion="$(TargetFrameworkVersion)"
      ResourcesPackageId="$(_ICU4NResourcesPackageId)"
      ResourcesPackageVersion="$(_ICU4NResourcesVersion)"
      ResourcesSourcesDirectory="$(_ICU4NResourcesSourcesDirectory)"
      ResourceFiles="@(_ICU4NResourceFiles)"
      SatelliteResourceLanguages="$(SatelliteResourceLanguages)"
    />
  </Target>

</Project>