//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using J2N.Text;
using NUnit.Framework;
using System;
using System.Collections.Generic;
using System.Text;

namespace ICU4N.Text
{
    public sealed partial class UnicodeSetPartialTest
    {


        [Test]
        public void TestSetEquals_String()
        {
            var empty = "";
            var equiv1 = "ABCDEF";
            var equiv2 = "BDEFAC";
            var nonEquiv1 = "CDEAZF";
            var nonEquiv2 = "ABCDEFG";
            
            string methodName = nameof(UnicodeSet.SetEquals);

            // Test empty set
            assertFalse($"{methodName}: The word sets are equal", aThruFSet.SetEquals(empty));
            assertTrue($"{methodName}: The word sets are not equal", emptySet.SetEquals(empty));

            assertTrue($"{methodName}: The word sets are not equal", aThruFSet.SetEquals(equiv1));
            assertTrue($"{methodName}: The word sets are not equal", aThruFSet.SetEquals(equiv2));
            assertFalse($"{methodName}: The word sets are equal", aThruFSet.SetEquals(nonEquiv1));
            assertFalse($"{methodName}: The word sets are equal", aThruFSet.SetEquals(nonEquiv2));
        }



        [Test]
        public void TestSetEquals_CharSequence()
        {
            var empty = "".AsCharSequence();
            var equiv1 = "ABCDEF".AsCharSequence();
            var equiv2 = "BDEFAC".AsCharSequence();
            var nonEquiv1 = "CDEAZF".AsCharSequence();
            var nonEquiv2 = "ABCDEFG".AsCharSequence();
            
            string methodName = nameof(UnicodeSet.SetEquals);

            // Test empty set
            assertFalse($"{methodName}: The word sets are equal", aThruFSet.SetEquals(empty));
            assertTrue($"{methodName}: The word sets are not equal", emptySet.SetEquals(empty));

            assertTrue($"{methodName}: The word sets are not equal", aThruFSet.SetEquals(equiv1));
            assertTrue($"{methodName}: The word sets are not equal", aThruFSet.SetEquals(equiv2));
            assertFalse($"{methodName}: The word sets are equal", aThruFSet.SetEquals(nonEquiv1));
            assertFalse($"{methodName}: The word sets are equal", aThruFSet.SetEquals(nonEquiv2));
        }



        [Test]
        public void TestSetEquals_ReadOnlySpan()
        {
            var empty = "".AsSpan();
            var equiv1 = "ABCDEF".AsSpan();
            var equiv2 = "BDEFAC".AsSpan();
            var nonEquiv1 = "CDEAZF".AsSpan();
            var nonEquiv2 = "ABCDEFG".AsSpan();
            
            string methodName = nameof(UnicodeSet.SetEquals);

            // Test empty set
            assertFalse($"{methodName}: The word sets are equal", aThruFSet.SetEquals(empty));
            assertTrue($"{methodName}: The word sets are not equal", emptySet.SetEquals(empty));

            assertTrue($"{methodName}: The word sets are not equal", aThruFSet.SetEquals(equiv1));
            assertTrue($"{methodName}: The word sets are not equal", aThruFSet.SetEquals(equiv2));
            assertFalse($"{methodName}: The word sets are equal", aThruFSet.SetEquals(nonEquiv1));
            assertFalse($"{methodName}: The word sets are equal", aThruFSet.SetEquals(nonEquiv2));
        }



        [Test]
        public void TestSetEquals_CharArray()
        {
            var empty = "".ToCharArray();
            var equiv1 = "ABCDEF".ToCharArray();
            var equiv2 = "BDEFAC".ToCharArray();
            var nonEquiv1 = "CDEAZF".ToCharArray();
            var nonEquiv2 = "ABCDEFG".ToCharArray();
            
            string methodName = nameof(UnicodeSet.SetEquals);

            // Test empty set
            assertFalse($"{methodName}: The word sets are equal", aThruFSet.SetEquals(empty));
            assertTrue($"{methodName}: The word sets are not equal", emptySet.SetEquals(empty));

            assertTrue($"{methodName}: The word sets are not equal", aThruFSet.SetEquals(equiv1));
            assertTrue($"{methodName}: The word sets are not equal", aThruFSet.SetEquals(equiv2));
            assertFalse($"{methodName}: The word sets are equal", aThruFSet.SetEquals(nonEquiv1));
            assertFalse($"{methodName}: The word sets are equal", aThruFSet.SetEquals(nonEquiv2));
        }

    

        [Test]
        public void TestSetEquals_StringCollection()
        {
            var equivSet = new List<string>();
            string methodName = nameof(UnicodeSet.SetEquals);

            // Test empty set
            assertFalse($"{methodName}: The word sets are equal", thaiWordSet.SetEquals(equivSet));

            thaiWordSet.CopyTo(equivSet);
            assertTrue($"{methodName}: The word sets are not equal", thaiWordSet.SetEquals(equivSet));
            equivSet.RemoveAt(0);
            assertFalse($"{methodName}: The word sets are equal", thaiWordSet.SetEquals(equivSet));
        }

        

        [Test]
        public void TestSetEquals_CharSequenceCollection()
        {
            var equivSet = new List<ICharSequence>();
            string methodName = nameof(UnicodeSet.SetEquals);

            // Test empty set
            assertFalse($"{methodName}: The word sets are equal", thaiWordSet.SetEquals(equivSet));

            thaiWordSet.CopyTo(equivSet);
            assertTrue($"{methodName}: The word sets are not equal", thaiWordSet.SetEquals(equivSet));
            equivSet.RemoveAt(0);
            assertFalse($"{methodName}: The word sets are equal", thaiWordSet.SetEquals(equivSet));
        }

            

        [Test]
        public void TestSetEquals_CharArrayCollection()
        {
            var equivSet = new List<char[]>();
            string methodName = nameof(UnicodeSet.SetEquals);

            // Test empty set
            assertFalse($"{methodName}: The word sets are equal", thaiWordSet.SetEquals(equivSet));

            thaiWordSet.CopyTo(equivSet);
            assertTrue($"{methodName}: The word sets are not equal", thaiWordSet.SetEquals(equivSet));
            equivSet.RemoveAt(0);
            assertFalse($"{methodName}: The word sets are equal", thaiWordSet.SetEquals(equivSet));
        }

    

        [Test]
        public void TestIsSupersetOf_String()
        {
            var equivEmptySet = "";
            var equivSet = "ABCDEF";
            var equivSet2 = "BDEFAC";
            var equivSubset = "CDEAF";
            var equivSuperset = "ABCDEFG";
            string setOperation = "superset", methodName = nameof(UnicodeSet.IsSupersetOf);

            // Test empty set
            assertTrue($"{methodName}: {nameof(aThruFSet)} is not a {setOperation} of {nameof(equivEmptySet)}", aThruFSet.IsSupersetOf(equivEmptySet));
            assertTrue($"{methodName}: {nameof(emptySet)} is not a {setOperation} of {nameof(equivEmptySet)}", emptySet.IsSupersetOf(equivEmptySet));

            assertTrue($"{methodName}: {nameof(aThruFSet)} is not a {setOperation} of {nameof(equivSet)}", aThruFSet.IsSupersetOf(equivSet));
            assertTrue($"{methodName}: {nameof(aThruFSuperset)} is not a {setOperation} of {nameof(equivSet2)}", aThruFSuperset.IsSupersetOf(equivSet2));
            assertTrue($"{methodName}: {nameof(aThruFSet)} is not a {setOperation} of {nameof(equivSubset)}", aThruFSet.IsSupersetOf(equivSubset));
            assertFalse($"{methodName}: {nameof(aThruFSet)} is a {setOperation} of {nameof(equivSuperset)}", aThruFSet.IsSupersetOf(equivSuperset));
            assertTrue($"{methodName}: {nameof(aThruFSuperset)} is not a {setOperation} of {nameof(equivSuperset)}", aThruFSuperset.IsSupersetOf(equivSuperset));
        }



        [Test]
        public void TestIsSupersetOf_CharSequence()
        {
            var equivEmptySet = "".AsCharSequence();
            var equivSet = "ABCDEF".AsCharSequence();
            var equivSet2 = "BDEFAC".AsCharSequence();
            var equivSubset = "CDEAF".AsCharSequence();
            var equivSuperset = "ABCDEFG".AsCharSequence();
            string setOperation = "superset", methodName = nameof(UnicodeSet.IsSupersetOf);

            // Test empty set
            assertTrue($"{methodName}: {nameof(aThruFSet)} is not a {setOperation} of {nameof(equivEmptySet)}", aThruFSet.IsSupersetOf(equivEmptySet));
            assertTrue($"{methodName}: {nameof(emptySet)} is not a {setOperation} of {nameof(equivEmptySet)}", emptySet.IsSupersetOf(equivEmptySet));

            assertTrue($"{methodName}: {nameof(aThruFSet)} is not a {setOperation} of {nameof(equivSet)}", aThruFSet.IsSupersetOf(equivSet));
            assertTrue($"{methodName}: {nameof(aThruFSuperset)} is not a {setOperation} of {nameof(equivSet2)}", aThruFSuperset.IsSupersetOf(equivSet2));
            assertTrue($"{methodName}: {nameof(aThruFSet)} is not a {setOperation} of {nameof(equivSubset)}", aThruFSet.IsSupersetOf(equivSubset));
            assertFalse($"{methodName}: {nameof(aThruFSet)} is a {setOperation} of {nameof(equivSuperset)}", aThruFSet.IsSupersetOf(equivSuperset));
            assertTrue($"{methodName}: {nameof(aThruFSuperset)} is not a {setOperation} of {nameof(equivSuperset)}", aThruFSuperset.IsSupersetOf(equivSuperset));
        }



        [Test]
        public void TestIsSupersetOf_ReadOnlySpan()
        {
            var equivEmptySet = "".AsSpan();
            var equivSet = "ABCDEF".AsSpan();
            var equivSet2 = "BDEFAC".AsSpan();
            var equivSubset = "CDEAF".AsSpan();
            var equivSuperset = "ABCDEFG".AsSpan();
            string setOperation = "superset", methodName = nameof(UnicodeSet.IsSupersetOf);

            // Test empty set
            assertTrue($"{methodName}: {nameof(aThruFSet)} is not a {setOperation} of {nameof(equivEmptySet)}", aThruFSet.IsSupersetOf(equivEmptySet));
            assertTrue($"{methodName}: {nameof(emptySet)} is not a {setOperation} of {nameof(equivEmptySet)}", emptySet.IsSupersetOf(equivEmptySet));

            assertTrue($"{methodName}: {nameof(aThruFSet)} is not a {setOperation} of {nameof(equivSet)}", aThruFSet.IsSupersetOf(equivSet));
            assertTrue($"{methodName}: {nameof(aThruFSuperset)} is not a {setOperation} of {nameof(equivSet2)}", aThruFSuperset.IsSupersetOf(equivSet2));
            assertTrue($"{methodName}: {nameof(aThruFSet)} is not a {setOperation} of {nameof(equivSubset)}", aThruFSet.IsSupersetOf(equivSubset));
            assertFalse($"{methodName}: {nameof(aThruFSet)} is a {setOperation} of {nameof(equivSuperset)}", aThruFSet.IsSupersetOf(equivSuperset));
            assertTrue($"{methodName}: {nameof(aThruFSuperset)} is not a {setOperation} of {nameof(equivSuperset)}", aThruFSuperset.IsSupersetOf(equivSuperset));
        }



        [Test]
        public void TestIsSupersetOf_CharArray()
        {
            var equivEmptySet = "".ToCharArray();
            var equivSet = "ABCDEF".ToCharArray();
            var equivSet2 = "BDEFAC".ToCharArray();
            var equivSubset = "CDEAF".ToCharArray();
            var equivSuperset = "ABCDEFG".ToCharArray();
            string setOperation = "superset", methodName = nameof(UnicodeSet.IsSupersetOf);

            // Test empty set
            assertTrue($"{methodName}: {nameof(aThruFSet)} is not a {setOperation} of {nameof(equivEmptySet)}", aThruFSet.IsSupersetOf(equivEmptySet));
            assertTrue($"{methodName}: {nameof(emptySet)} is not a {setOperation} of {nameof(equivEmptySet)}", emptySet.IsSupersetOf(equivEmptySet));

            assertTrue($"{methodName}: {nameof(aThruFSet)} is not a {setOperation} of {nameof(equivSet)}", aThruFSet.IsSupersetOf(equivSet));
            assertTrue($"{methodName}: {nameof(aThruFSuperset)} is not a {setOperation} of {nameof(equivSet2)}", aThruFSuperset.IsSupersetOf(equivSet2));
            assertTrue($"{methodName}: {nameof(aThruFSet)} is not a {setOperation} of {nameof(equivSubset)}", aThruFSet.IsSupersetOf(equivSubset));
            assertFalse($"{methodName}: {nameof(aThruFSet)} is a {setOperation} of {nameof(equivSuperset)}", aThruFSet.IsSupersetOf(equivSuperset));
            assertTrue($"{methodName}: {nameof(aThruFSuperset)} is not a {setOperation} of {nameof(equivSuperset)}", aThruFSuperset.IsSupersetOf(equivSuperset));
        }

    

        [Test]
        public void TestIsSupersetOf_StringCollection()
        {
            var equivEmptySet = new List<string>();
            var equivSet = new List<string>();
            var equivSubset = new List<string>();
            var equivSuperset = new List<string>();
            string setOperation = "superset", methodName = nameof(UnicodeSet.IsSupersetOf);

            // Test empty set
            assertTrue($"{methodName}: {nameof(thaiWordSet)} is not a {setOperation} of {nameof(equivEmptySet)}", thaiWordSet.IsSupersetOf(equivEmptySet));
            assertTrue($"{methodName}: {nameof(emptySet)} is not a {setOperation} of {nameof(equivEmptySet)}", emptySet.IsSupersetOf(equivEmptySet));

            thaiWordSet.CopyTo(equivSet);
            assertTrue($"{methodName}: {nameof(thaiWordSet)} is not a {setOperation} of {nameof(equivSet)}", thaiWordSet.IsSupersetOf(equivSet));

            thaiWordSubset.CopyTo(equivSubset);
            assertTrue($"{methodName}: {nameof(thaiWordSet)} is not a {setOperation} of {nameof(equivSubset)}", thaiWordSet.IsSupersetOf(equivSubset));

            thaiWordSuperset.CopyTo(equivSuperset);
            assertFalse($"{methodName}: {nameof(thaiWordSet)} is a {setOperation} of {nameof(equivSuperset)}", thaiWordSet.IsSupersetOf(equivSuperset));
        }

        

        [Test]
        public void TestIsSupersetOf_CharSequenceCollection()
        {
            var equivEmptySet = new List<ICharSequence>();
            var equivSet = new List<ICharSequence>();
            var equivSubset = new List<ICharSequence>();
            var equivSuperset = new List<ICharSequence>();
            string setOperation = "superset", methodName = nameof(UnicodeSet.IsSupersetOf);

            // Test empty set
            assertTrue($"{methodName}: {nameof(thaiWordSet)} is not a {setOperation} of {nameof(equivEmptySet)}", thaiWordSet.IsSupersetOf(equivEmptySet));
            assertTrue($"{methodName}: {nameof(emptySet)} is not a {setOperation} of {nameof(equivEmptySet)}", emptySet.IsSupersetOf(equivEmptySet));

            thaiWordSet.CopyTo(equivSet);
            assertTrue($"{methodName}: {nameof(thaiWordSet)} is not a {setOperation} of {nameof(equivSet)}", thaiWordSet.IsSupersetOf(equivSet));

            thaiWordSubset.CopyTo(equivSubset);
            assertTrue($"{methodName}: {nameof(thaiWordSet)} is not a {setOperation} of {nameof(equivSubset)}", thaiWordSet.IsSupersetOf(equivSubset));

            thaiWordSuperset.CopyTo(equivSuperset);
            assertFalse($"{methodName}: {nameof(thaiWordSet)} is a {setOperation} of {nameof(equivSuperset)}", thaiWordSet.IsSupersetOf(equivSuperset));
        }

            

        [Test]
        public void TestIsSupersetOf_CharArrayCollection()
        {
            var equivEmptySet = new List<char[]>();
            var equivSet = new List<char[]>();
            var equivSubset = new List<char[]>();
            var equivSuperset = new List<char[]>();
            string setOperation = "superset", methodName = nameof(UnicodeSet.IsSupersetOf);

            // Test empty set
            assertTrue($"{methodName}: {nameof(thaiWordSet)} is not a {setOperation} of {nameof(equivEmptySet)}", thaiWordSet.IsSupersetOf(equivEmptySet));
            assertTrue($"{methodName}: {nameof(emptySet)} is not a {setOperation} of {nameof(equivEmptySet)}", emptySet.IsSupersetOf(equivEmptySet));

            thaiWordSet.CopyTo(equivSet);
            assertTrue($"{methodName}: {nameof(thaiWordSet)} is not a {setOperation} of {nameof(equivSet)}", thaiWordSet.IsSupersetOf(equivSet));

            thaiWordSubset.CopyTo(equivSubset);
            assertTrue($"{methodName}: {nameof(thaiWordSet)} is not a {setOperation} of {nameof(equivSubset)}", thaiWordSet.IsSupersetOf(equivSubset));

            thaiWordSuperset.CopyTo(equivSuperset);
            assertFalse($"{methodName}: {nameof(thaiWordSet)} is a {setOperation} of {nameof(equivSuperset)}", thaiWordSet.IsSupersetOf(equivSuperset));
        }

    

        [Test]
        public void TestIsProperSupersetOf_String()
        {
            var equivEmptySet = "";
            var equivSet = "ABCDEF";
            var equivSet2 = "BDEFAC";
            var equivSubset = "CDEAF";
            var equivSuperset = "ABCDEFG";
            string setOperation = "proper superset", methodName = nameof(UnicodeSet.IsProperSupersetOf);

            // Test empty set
            assertTrue($"{methodName}: {nameof(aThruFSet)} is not a {setOperation} of {nameof(equivEmptySet)}", aThruFSet.IsProperSupersetOf(equivEmptySet));
            assertFalse($"{methodName}: {nameof(emptySet)} is a {setOperation} of {nameof(equivEmptySet)}", emptySet.IsProperSupersetOf(equivEmptySet));

            assertFalse($"{methodName}: {nameof(aThruFSet)} is a {setOperation} of {nameof(equivSet)}", aThruFSet.IsProperSupersetOf(equivSet));
            assertTrue($"{methodName}: {nameof(aThruFSuperset)} is not a {setOperation} of {nameof(equivSet2)}", aThruFSuperset.IsProperSupersetOf(equivSet2));
            assertTrue($"{methodName}: {nameof(aThruFSet)} is not a {setOperation} of {nameof(equivSubset)}", aThruFSet.IsProperSupersetOf(equivSubset));
            assertFalse($"{methodName}: {nameof(aThruFSet)} is a {setOperation} of {nameof(equivSuperset)}", aThruFSet.IsProperSupersetOf(equivSuperset));
            assertFalse($"{methodName}: {nameof(aThruFSuperset)} is a {setOperation} of {nameof(equivSuperset)}", aThruFSuperset.IsProperSupersetOf(equivSuperset));
        }



        [Test]
        public void TestIsProperSupersetOf_CharSequence()
        {
            var equivEmptySet = "".AsCharSequence();
            var equivSet = "ABCDEF".AsCharSequence();
            var equivSet2 = "BDEFAC".AsCharSequence();
            var equivSubset = "CDEAF".AsCharSequence();
            var equivSuperset = "ABCDEFG".AsCharSequence();
            string setOperation = "proper superset", methodName = nameof(UnicodeSet.IsProperSupersetOf);

            // Test empty set
            assertTrue($"{methodName}: {nameof(aThruFSet)} is not a {setOperation} of {nameof(equivEmptySet)}", aThruFSet.IsProperSupersetOf(equivEmptySet));
            assertFalse($"{methodName}: {nameof(emptySet)} is a {setOperation} of {nameof(equivEmptySet)}", emptySet.IsProperSupersetOf(equivEmptySet));

            assertFalse($"{methodName}: {nameof(aThruFSet)} is a {setOperation} of {nameof(equivSet)}", aThruFSet.IsProperSupersetOf(equivSet));
            assertTrue($"{methodName}: {nameof(aThruFSuperset)} is not a {setOperation} of {nameof(equivSet2)}", aThruFSuperset.IsProperSupersetOf(equivSet2));
            assertTrue($"{methodName}: {nameof(aThruFSet)} is not a {setOperation} of {nameof(equivSubset)}", aThruFSet.IsProperSupersetOf(equivSubset));
            assertFalse($"{methodName}: {nameof(aThruFSet)} is a {setOperation} of {nameof(equivSuperset)}", aThruFSet.IsProperSupersetOf(equivSuperset));
            assertFalse($"{methodName}: {nameof(aThruFSuperset)} is a {setOperation} of {nameof(equivSuperset)}", aThruFSuperset.IsProperSupersetOf(equivSuperset));
        }



        [Test]
        public void TestIsProperSupersetOf_ReadOnlySpan()
        {
            var equivEmptySet = "".AsSpan();
            var equivSet = "ABCDEF".AsSpan();
            var equivSet2 = "BDEFAC".AsSpan();
            var equivSubset = "CDEAF".AsSpan();
            var equivSuperset = "ABCDEFG".AsSpan();
            string setOperation = "proper superset", methodName = nameof(UnicodeSet.IsProperSupersetOf);

            // Test empty set
            assertTrue($"{methodName}: {nameof(aThruFSet)} is not a {setOperation} of {nameof(equivEmptySet)}", aThruFSet.IsProperSupersetOf(equivEmptySet));
            assertFalse($"{methodName}: {nameof(emptySet)} is a {setOperation} of {nameof(equivEmptySet)}", emptySet.IsProperSupersetOf(equivEmptySet));

            assertFalse($"{methodName}: {nameof(aThruFSet)} is a {setOperation} of {nameof(equivSet)}", aThruFSet.IsProperSupersetOf(equivSet));
            assertTrue($"{methodName}: {nameof(aThruFSuperset)} is not a {setOperation} of {nameof(equivSet2)}", aThruFSuperset.IsProperSupersetOf(equivSet2));
            assertTrue($"{methodName}: {nameof(aThruFSet)} is not a {setOperation} of {nameof(equivSubset)}", aThruFSet.IsProperSupersetOf(equivSubset));
            assertFalse($"{methodName}: {nameof(aThruFSet)} is a {setOperation} of {nameof(equivSuperset)}", aThruFSet.IsProperSupersetOf(equivSuperset));
            assertFalse($"{methodName}: {nameof(aThruFSuperset)} is a {setOperation} of {nameof(equivSuperset)}", aThruFSuperset.IsProperSupersetOf(equivSuperset));
        }



        [Test]
        public void TestIsProperSupersetOf_CharArray()
        {
            var equivEmptySet = "".ToCharArray();
            var equivSet = "ABCDEF".ToCharArray();
            var equivSet2 = "BDEFAC".ToCharArray();
            var equivSubset = "CDEAF".ToCharArray();
            var equivSuperset = "ABCDEFG".ToCharArray();
            string setOperation = "proper superset", methodName = nameof(UnicodeSet.IsProperSupersetOf);

            // Test empty set
            assertTrue($"{methodName}: {nameof(aThruFSet)} is not a {setOperation} of {nameof(equivEmptySet)}", aThruFSet.IsProperSupersetOf(equivEmptySet));
            assertFalse($"{methodName}: {nameof(emptySet)} is a {setOperation} of {nameof(equivEmptySet)}", emptySet.IsProperSupersetOf(equivEmptySet));

            assertFalse($"{methodName}: {nameof(aThruFSet)} is a {setOperation} of {nameof(equivSet)}", aThruFSet.IsProperSupersetOf(equivSet));
            assertTrue($"{methodName}: {nameof(aThruFSuperset)} is not a {setOperation} of {nameof(equivSet2)}", aThruFSuperset.IsProperSupersetOf(equivSet2));
            assertTrue($"{methodName}: {nameof(aThruFSet)} is not a {setOperation} of {nameof(equivSubset)}", aThruFSet.IsProperSupersetOf(equivSubset));
            assertFalse($"{methodName}: {nameof(aThruFSet)} is a {setOperation} of {nameof(equivSuperset)}", aThruFSet.IsProperSupersetOf(equivSuperset));
            assertFalse($"{methodName}: {nameof(aThruFSuperset)} is a {setOperation} of {nameof(equivSuperset)}", aThruFSuperset.IsProperSupersetOf(equivSuperset));
        }

    

        [Test]
        public void TestIsProperSupersetOf_StringCollection()
        {
            var equivEmptySet = new List<string>();
            var equivSet = new List<string>();
            var equivSubset = new List<string>();
            string setOperation = "proper superset", methodName = nameof(UnicodeSet.IsProperSupersetOf);

            // Test empty set
            assertTrue($"{methodName}: {nameof(thaiWordSet)} is not a {setOperation} of {nameof(equivEmptySet)}", thaiWordSet.IsProperSupersetOf(equivEmptySet));
            assertFalse($"{methodName}: {nameof(emptySet)} is a {setOperation} of {nameof(equivEmptySet)}", emptySet.IsProperSupersetOf(equivEmptySet));

            thaiWordSet.CopyTo(equivSet);
            assertFalse($"{methodName}: {nameof(thaiWordSet)} is a {setOperation} of {nameof(equivSet)}", thaiWordSet.IsProperSupersetOf(equivSet));

            thaiWordSubset.CopyTo(equivSubset);
            assertTrue($"{methodName}: {nameof(thaiWordSet)} is not a {setOperation} of {nameof(equivSubset)}", thaiWordSet.IsProperSupersetOf(equivSubset));
        }

        

        [Test]
        public void TestIsProperSupersetOf_CharSequenceCollection()
        {
            var equivEmptySet = new List<ICharSequence>();
            var equivSet = new List<ICharSequence>();
            var equivSubset = new List<ICharSequence>();
            string setOperation = "proper superset", methodName = nameof(UnicodeSet.IsProperSupersetOf);

            // Test empty set
            assertTrue($"{methodName}: {nameof(thaiWordSet)} is not a {setOperation} of {nameof(equivEmptySet)}", thaiWordSet.IsProperSupersetOf(equivEmptySet));
            assertFalse($"{methodName}: {nameof(emptySet)} is a {setOperation} of {nameof(equivEmptySet)}", emptySet.IsProperSupersetOf(equivEmptySet));

            thaiWordSet.CopyTo(equivSet);
            assertFalse($"{methodName}: {nameof(thaiWordSet)} is a {setOperation} of {nameof(equivSet)}", thaiWordSet.IsProperSupersetOf(equivSet));

            thaiWordSubset.CopyTo(equivSubset);
            assertTrue($"{methodName}: {nameof(thaiWordSet)} is not a {setOperation} of {nameof(equivSubset)}", thaiWordSet.IsProperSupersetOf(equivSubset));
        }

            

        [Test]
        public void TestIsProperSupersetOf_CharArrayCollection()
        {
            var equivEmptySet = new List<char[]>();
            var equivSet = new List<char[]>();
            var equivSubset = new List<char[]>();
            string setOperation = "proper superset", methodName = nameof(UnicodeSet.IsProperSupersetOf);

            // Test empty set
            assertTrue($"{methodName}: {nameof(thaiWordSet)} is not a {setOperation} of {nameof(equivEmptySet)}", thaiWordSet.IsProperSupersetOf(equivEmptySet));
            assertFalse($"{methodName}: {nameof(emptySet)} is a {setOperation} of {nameof(equivEmptySet)}", emptySet.IsProperSupersetOf(equivEmptySet));

            thaiWordSet.CopyTo(equivSet);
            assertFalse($"{methodName}: {nameof(thaiWordSet)} is a {setOperation} of {nameof(equivSet)}", thaiWordSet.IsProperSupersetOf(equivSet));

            thaiWordSubset.CopyTo(equivSubset);
            assertTrue($"{methodName}: {nameof(thaiWordSet)} is not a {setOperation} of {nameof(equivSubset)}", thaiWordSet.IsProperSupersetOf(equivSubset));
        }

    

        [Test]
        public void TestIsSubsetOf_String()
        {
            var equivEmptySet = "";
            var equivSet = "ABCDEF";
            var equivSet2 = "BDEFAC";
            var equivSubset = "CDEAF";
            var equivSuperset = "ABCDEFG";
            string setOperation = "subset", methodName = nameof(UnicodeSet.IsSubsetOf);

            // Test empty set
            assertFalse($"{methodName}: {nameof(aThruFSet)} is a {setOperation} of {nameof(equivEmptySet)}", aThruFSet.IsSubsetOf(equivEmptySet));
            assertTrue($"{methodName}: {nameof(emptySet)} is not a {setOperation} of {nameof(equivEmptySet)}", emptySet.IsSubsetOf(equivEmptySet));

            assertTrue($"{methodName}: {nameof(aThruFSet)} is not a {setOperation} of {nameof(equivSet)}", aThruFSet.IsSubsetOf(equivSet));
            assertFalse($"{methodName}: {nameof(aThruFSuperset)} is a {setOperation} of {nameof(equivSet2)}", aThruFSuperset.IsSubsetOf(equivSet2));
            assertFalse($"{methodName}: {nameof(aThruFSet)} is a {setOperation} of {nameof(equivSubset)}", aThruFSet.IsSubsetOf(equivSubset));

            assertTrue($"{methodName}: {nameof(aThruFSet)} is not a {setOperation} of {nameof(equivSuperset)}", aThruFSet.IsSubsetOf(equivSuperset));
            assertTrue($"{methodName}: {nameof(aThruFSuperset)} is not a {setOperation} of {nameof(equivSuperset)}", aThruFSuperset.IsSubsetOf(equivSuperset));
        }



        [Test]
        public void TestIsSubsetOf_CharSequence()
        {
            var equivEmptySet = "".AsCharSequence();
            var equivSet = "ABCDEF".AsCharSequence();
            var equivSet2 = "BDEFAC".AsCharSequence();
            var equivSubset = "CDEAF".AsCharSequence();
            var equivSuperset = "ABCDEFG".AsCharSequence();
            string setOperation = "subset", methodName = nameof(UnicodeSet.IsSubsetOf);

            // Test empty set
            assertFalse($"{methodName}: {nameof(aThruFSet)} is a {setOperation} of {nameof(equivEmptySet)}", aThruFSet.IsSubsetOf(equivEmptySet));
            assertTrue($"{methodName}: {nameof(emptySet)} is not a {setOperation} of {nameof(equivEmptySet)}", emptySet.IsSubsetOf(equivEmptySet));

            assertTrue($"{methodName}: {nameof(aThruFSet)} is not a {setOperation} of {nameof(equivSet)}", aThruFSet.IsSubsetOf(equivSet));
            assertFalse($"{methodName}: {nameof(aThruFSuperset)} is a {setOperation} of {nameof(equivSet2)}", aThruFSuperset.IsSubsetOf(equivSet2));
            assertFalse($"{methodName}: {nameof(aThruFSet)} is a {setOperation} of {nameof(equivSubset)}", aThruFSet.IsSubsetOf(equivSubset));

            assertTrue($"{methodName}: {nameof(aThruFSet)} is not a {setOperation} of {nameof(equivSuperset)}", aThruFSet.IsSubsetOf(equivSuperset));
            assertTrue($"{methodName}: {nameof(aThruFSuperset)} is not a {setOperation} of {nameof(equivSuperset)}", aThruFSuperset.IsSubsetOf(equivSuperset));
        }



        [Test]
        public void TestIsSubsetOf_ReadOnlySpan()
        {
            var equivEmptySet = "".AsSpan();
            var equivSet = "ABCDEF".AsSpan();
            var equivSet2 = "BDEFAC".AsSpan();
            var equivSubset = "CDEAF".AsSpan();
            var equivSuperset = "ABCDEFG".AsSpan();
            string setOperation = "subset", methodName = nameof(UnicodeSet.IsSubsetOf);

            // Test empty set
            assertFalse($"{methodName}: {nameof(aThruFSet)} is a {setOperation} of {nameof(equivEmptySet)}", aThruFSet.IsSubsetOf(equivEmptySet));
            assertTrue($"{methodName}: {nameof(emptySet)} is not a {setOperation} of {nameof(equivEmptySet)}", emptySet.IsSubsetOf(equivEmptySet));

            assertTrue($"{methodName}: {nameof(aThruFSet)} is not a {setOperation} of {nameof(equivSet)}", aThruFSet.IsSubsetOf(equivSet));
            assertFalse($"{methodName}: {nameof(aThruFSuperset)} is a {setOperation} of {nameof(equivSet2)}", aThruFSuperset.IsSubsetOf(equivSet2));
            assertFalse($"{methodName}: {nameof(aThruFSet)} is a {setOperation} of {nameof(equivSubset)}", aThruFSet.IsSubsetOf(equivSubset));

            assertTrue($"{methodName}: {nameof(aThruFSet)} is not a {setOperation} of {nameof(equivSuperset)}", aThruFSet.IsSubsetOf(equivSuperset));
            assertTrue($"{methodName}: {nameof(aThruFSuperset)} is not a {setOperation} of {nameof(equivSuperset)}", aThruFSuperset.IsSubsetOf(equivSuperset));
        }



        [Test]
        public void TestIsSubsetOf_CharArray()
        {
            var equivEmptySet = "".ToCharArray();
            var equivSet = "ABCDEF".ToCharArray();
            var equivSet2 = "BDEFAC".ToCharArray();
            var equivSubset = "CDEAF".ToCharArray();
            var equivSuperset = "ABCDEFG".ToCharArray();
            string setOperation = "subset", methodName = nameof(UnicodeSet.IsSubsetOf);

            // Test empty set
            assertFalse($"{methodName}: {nameof(aThruFSet)} is a {setOperation} of {nameof(equivEmptySet)}", aThruFSet.IsSubsetOf(equivEmptySet));
            assertTrue($"{methodName}: {nameof(emptySet)} is not a {setOperation} of {nameof(equivEmptySet)}", emptySet.IsSubsetOf(equivEmptySet));

            assertTrue($"{methodName}: {nameof(aThruFSet)} is not a {setOperation} of {nameof(equivSet)}", aThruFSet.IsSubsetOf(equivSet));
            assertFalse($"{methodName}: {nameof(aThruFSuperset)} is a {setOperation} of {nameof(equivSet2)}", aThruFSuperset.IsSubsetOf(equivSet2));
            assertFalse($"{methodName}: {nameof(aThruFSet)} is a {setOperation} of {nameof(equivSubset)}", aThruFSet.IsSubsetOf(equivSubset));

            assertTrue($"{methodName}: {nameof(aThruFSet)} is not a {setOperation} of {nameof(equivSuperset)}", aThruFSet.IsSubsetOf(equivSuperset));
            assertTrue($"{methodName}: {nameof(aThruFSuperset)} is not a {setOperation} of {nameof(equivSuperset)}", aThruFSuperset.IsSubsetOf(equivSuperset));
        }

    

        [Test]
        public void TestIsSubsetOf_StringCollection()
        {
            var equivEmptySet = new List<string>();
            var equivSet = new List<string>();
            var equivSubset = new List<string>();
            var equivSuperset = new List<string>();
            string setOperation = "subset", methodName = nameof(UnicodeSet.IsSubsetOf);

            // Test empty set
            assertFalse($"{methodName}: {nameof(thaiWordSet)} is a {setOperation} of {nameof(equivEmptySet)}", thaiWordSet.IsSubsetOf(equivEmptySet));
            assertTrue($"{methodName}: {nameof(emptySet)} is not a {setOperation} of {nameof(equivEmptySet)}", emptySet.IsSubsetOf(equivEmptySet));

            thaiWordSet.CopyTo(equivSet);
            assertTrue($"{methodName}: {nameof(thaiWordSet)} is not a {setOperation} of {nameof(equivSet)}", thaiWordSet.IsSubsetOf(equivSet));

            thaiWordSubset.CopyTo(equivSubset);
            assertFalse($"{methodName}: {nameof(thaiWordSet)} is a {setOperation} of {nameof(equivSubset)}", thaiWordSet.IsSubsetOf(equivSubset));

            thaiWordSuperset.CopyTo(equivSuperset);
            assertTrue($"{methodName}: {nameof(thaiWordSet)} is not a {setOperation} of {nameof(equivSuperset)}", thaiWordSet.IsSubsetOf(equivSuperset));
        }

        

        [Test]
        public void TestIsSubsetOf_CharSequenceCollection()
        {
            var equivEmptySet = new List<ICharSequence>();
            var equivSet = new List<ICharSequence>();
            var equivSubset = new List<ICharSequence>();
            var equivSuperset = new List<ICharSequence>();
            string setOperation = "subset", methodName = nameof(UnicodeSet.IsSubsetOf);

            // Test empty set
            assertFalse($"{methodName}: {nameof(thaiWordSet)} is a {setOperation} of {nameof(equivEmptySet)}", thaiWordSet.IsSubsetOf(equivEmptySet));
            assertTrue($"{methodName}: {nameof(emptySet)} is not a {setOperation} of {nameof(equivEmptySet)}", emptySet.IsSubsetOf(equivEmptySet));

            thaiWordSet.CopyTo(equivSet);
            assertTrue($"{methodName}: {nameof(thaiWordSet)} is not a {setOperation} of {nameof(equivSet)}", thaiWordSet.IsSubsetOf(equivSet));

            thaiWordSubset.CopyTo(equivSubset);
            assertFalse($"{methodName}: {nameof(thaiWordSet)} is a {setOperation} of {nameof(equivSubset)}", thaiWordSet.IsSubsetOf(equivSubset));

            thaiWordSuperset.CopyTo(equivSuperset);
            assertTrue($"{methodName}: {nameof(thaiWordSet)} is not a {setOperation} of {nameof(equivSuperset)}", thaiWordSet.IsSubsetOf(equivSuperset));
        }

            

        [Test]
        public void TestIsSubsetOf_CharArrayCollection()
        {
            var equivEmptySet = new List<char[]>();
            var equivSet = new List<char[]>();
            var equivSubset = new List<char[]>();
            var equivSuperset = new List<char[]>();
            string setOperation = "subset", methodName = nameof(UnicodeSet.IsSubsetOf);

            // Test empty set
            assertFalse($"{methodName}: {nameof(thaiWordSet)} is a {setOperation} of {nameof(equivEmptySet)}", thaiWordSet.IsSubsetOf(equivEmptySet));
            assertTrue($"{methodName}: {nameof(emptySet)} is not a {setOperation} of {nameof(equivEmptySet)}", emptySet.IsSubsetOf(equivEmptySet));

            thaiWordSet.CopyTo(equivSet);
            assertTrue($"{methodName}: {nameof(thaiWordSet)} is not a {setOperation} of {nameof(equivSet)}", thaiWordSet.IsSubsetOf(equivSet));

            thaiWordSubset.CopyTo(equivSubset);
            assertFalse($"{methodName}: {nameof(thaiWordSet)} is a {setOperation} of {nameof(equivSubset)}", thaiWordSet.IsSubsetOf(equivSubset));

            thaiWordSuperset.CopyTo(equivSuperset);
            assertTrue($"{methodName}: {nameof(thaiWordSet)} is not a {setOperation} of {nameof(equivSuperset)}", thaiWordSet.IsSubsetOf(equivSuperset));
        }

    

        [Test]
        public void TestIsProperSubsetOf_String()
        {
            var equivEmptySet = "";
            var equivSet = "ABCDEF";
            var equivSubset = "CDEAF";
            var equivSuperset = "ABCDEFG";
            string setOperation = "proper superset", methodName = nameof(UnicodeSet.IsProperSubsetOf);

            // Test empty set
            assertFalse($"{methodName}: {nameof(thaiWordSet)} is a {setOperation} of {nameof(equivEmptySet)}", aThruFSet.IsProperSubsetOf(equivEmptySet));
            assertFalse($"{methodName}: {nameof(thaiWordSet)} is a {setOperation} of {nameof(equivEmptySet)}", emptySet.IsProperSubsetOf(equivEmptySet));

            assertFalse($"{methodName}: {nameof(aThruFSet)} is a {setOperation} of {nameof(equivSet)}", aThruFSet.IsProperSubsetOf(equivSet));
            assertTrue($"{methodName}: {nameof(aThruFSubset)} is not a {setOperation} of {nameof(equivSet)}", aThruFSubset.IsProperSubsetOf(equivSet));
            assertFalse($"{methodName}: {nameof(aThruFSet)} is a {setOperation} of {nameof(equivSubset)}", aThruFSet.IsProperSubsetOf(equivSubset));

            assertTrue($"{methodName}: {nameof(aThruFSet)} is not a {setOperation} of {nameof(equivSuperset)}", aThruFSet.IsProperSubsetOf(equivSuperset));
            assertFalse($"{methodName}: {nameof(aThruFSuperset)} is a {setOperation} of {nameof(equivSuperset)}", aThruFSuperset.IsProperSubsetOf(equivSuperset));
        }



        [Test]
        public void TestIsProperSubsetOf_CharSequence()
        {
            var equivEmptySet = "".AsCharSequence();
            var equivSet = "ABCDEF".AsCharSequence();
            var equivSubset = "CDEAF".AsCharSequence();
            var equivSuperset = "ABCDEFG".AsCharSequence();
            string setOperation = "proper superset", methodName = nameof(UnicodeSet.IsProperSubsetOf);

            // Test empty set
            assertFalse($"{methodName}: {nameof(thaiWordSet)} is a {setOperation} of {nameof(equivEmptySet)}", aThruFSet.IsProperSubsetOf(equivEmptySet));
            assertFalse($"{methodName}: {nameof(thaiWordSet)} is a {setOperation} of {nameof(equivEmptySet)}", emptySet.IsProperSubsetOf(equivEmptySet));

            assertFalse($"{methodName}: {nameof(aThruFSet)} is a {setOperation} of {nameof(equivSet)}", aThruFSet.IsProperSubsetOf(equivSet));
            assertTrue($"{methodName}: {nameof(aThruFSubset)} is not a {setOperation} of {nameof(equivSet)}", aThruFSubset.IsProperSubsetOf(equivSet));
            assertFalse($"{methodName}: {nameof(aThruFSet)} is a {setOperation} of {nameof(equivSubset)}", aThruFSet.IsProperSubsetOf(equivSubset));

            assertTrue($"{methodName}: {nameof(aThruFSet)} is not a {setOperation} of {nameof(equivSuperset)}", aThruFSet.IsProperSubsetOf(equivSuperset));
            assertFalse($"{methodName}: {nameof(aThruFSuperset)} is a {setOperation} of {nameof(equivSuperset)}", aThruFSuperset.IsProperSubsetOf(equivSuperset));
        }



        [Test]
        public void TestIsProperSubsetOf_ReadOnlySpan()
        {
            var equivEmptySet = "".AsSpan();
            var equivSet = "ABCDEF".AsSpan();
            var equivSubset = "CDEAF".AsSpan();
            var equivSuperset = "ABCDEFG".AsSpan();
            string setOperation = "proper superset", methodName = nameof(UnicodeSet.IsProperSubsetOf);

            // Test empty set
            assertFalse($"{methodName}: {nameof(thaiWordSet)} is a {setOperation} of {nameof(equivEmptySet)}", aThruFSet.IsProperSubsetOf(equivEmptySet));
            assertFalse($"{methodName}: {nameof(thaiWordSet)} is a {setOperation} of {nameof(equivEmptySet)}", emptySet.IsProperSubsetOf(equivEmptySet));

            assertFalse($"{methodName}: {nameof(aThruFSet)} is a {setOperation} of {nameof(equivSet)}", aThruFSet.IsProperSubsetOf(equivSet));
            assertTrue($"{methodName}: {nameof(aThruFSubset)} is not a {setOperation} of {nameof(equivSet)}", aThruFSubset.IsProperSubsetOf(equivSet));
            assertFalse($"{methodName}: {nameof(aThruFSet)} is a {setOperation} of {nameof(equivSubset)}", aThruFSet.IsProperSubsetOf(equivSubset));

            assertTrue($"{methodName}: {nameof(aThruFSet)} is not a {setOperation} of {nameof(equivSuperset)}", aThruFSet.IsProperSubsetOf(equivSuperset));
            assertFalse($"{methodName}: {nameof(aThruFSuperset)} is a {setOperation} of {nameof(equivSuperset)}", aThruFSuperset.IsProperSubsetOf(equivSuperset));
        }



        [Test]
        public void TestIsProperSubsetOf_CharArray()
        {
            var equivEmptySet = "".ToCharArray();
            var equivSet = "ABCDEF".ToCharArray();
            var equivSubset = "CDEAF".ToCharArray();
            var equivSuperset = "ABCDEFG".ToCharArray();
            string setOperation = "proper superset", methodName = nameof(UnicodeSet.IsProperSubsetOf);

            // Test empty set
            assertFalse($"{methodName}: {nameof(thaiWordSet)} is a {setOperation} of {nameof(equivEmptySet)}", aThruFSet.IsProperSubsetOf(equivEmptySet));
            assertFalse($"{methodName}: {nameof(thaiWordSet)} is a {setOperation} of {nameof(equivEmptySet)}", emptySet.IsProperSubsetOf(equivEmptySet));

            assertFalse($"{methodName}: {nameof(aThruFSet)} is a {setOperation} of {nameof(equivSet)}", aThruFSet.IsProperSubsetOf(equivSet));
            assertTrue($"{methodName}: {nameof(aThruFSubset)} is not a {setOperation} of {nameof(equivSet)}", aThruFSubset.IsProperSubsetOf(equivSet));
            assertFalse($"{methodName}: {nameof(aThruFSet)} is a {setOperation} of {nameof(equivSubset)}", aThruFSet.IsProperSubsetOf(equivSubset));

            assertTrue($"{methodName}: {nameof(aThruFSet)} is not a {setOperation} of {nameof(equivSuperset)}", aThruFSet.IsProperSubsetOf(equivSuperset));
            assertFalse($"{methodName}: {nameof(aThruFSuperset)} is a {setOperation} of {nameof(equivSuperset)}", aThruFSuperset.IsProperSubsetOf(equivSuperset));
        }

    

        [Test]
        public void TestIsProperSubsetOf_StringCollection()
        {
            var equivEmptySet = new List<string>();
            var equivSet = new List<string>();
            var equivSubset = new List<string>();
            var equivSuperset = new List<string>();
            string setOperation = "proper superset", methodName = nameof(UnicodeSet.IsProperSubsetOf);

            // Test empty set
            assertFalse($"{methodName}: {nameof(thaiWordSet)} is a {setOperation} of {nameof(equivEmptySet)}", thaiWordSet.IsProperSubsetOf(equivEmptySet));
            assertFalse($"{methodName}: {nameof(thaiWordSet)} is a {setOperation} of {nameof(equivEmptySet)}", emptySet.IsProperSubsetOf(equivEmptySet));

            thaiWordSet.CopyTo(equivSet);
            assertFalse($"{methodName}: {nameof(thaiWordSet)} is a {setOperation} of {nameof(equivSet)}", thaiWordSet.IsProperSubsetOf(equivSet));

            thaiWordSubset.CopyTo(equivSubset);
            assertFalse($"{methodName}: {nameof(thaiWordSet)} is a {setOperation} of {nameof(equivSubset)}", thaiWordSet.IsProperSubsetOf(equivSubset));

            thaiWordSuperset.CopyTo(equivSuperset);
            assertTrue($"{methodName}: {nameof(thaiWordSet)} is not a {setOperation} of {nameof(equivSuperset)}", thaiWordSet.IsProperSubsetOf(equivSuperset));
        }

        

        [Test]
        public void TestIsProperSubsetOf_CharSequenceCollection()
        {
            var equivEmptySet = new List<ICharSequence>();
            var equivSet = new List<ICharSequence>();
            var equivSubset = new List<ICharSequence>();
            var equivSuperset = new List<ICharSequence>();
            string setOperation = "proper superset", methodName = nameof(UnicodeSet.IsProperSubsetOf);

            // Test empty set
            assertFalse($"{methodName}: {nameof(thaiWordSet)} is a {setOperation} of {nameof(equivEmptySet)}", thaiWordSet.IsProperSubsetOf(equivEmptySet));
            assertFalse($"{methodName}: {nameof(thaiWordSet)} is a {setOperation} of {nameof(equivEmptySet)}", emptySet.IsProperSubsetOf(equivEmptySet));

            thaiWordSet.CopyTo(equivSet);
            assertFalse($"{methodName}: {nameof(thaiWordSet)} is a {setOperation} of {nameof(equivSet)}", thaiWordSet.IsProperSubsetOf(equivSet));

            thaiWordSubset.CopyTo(equivSubset);
            assertFalse($"{methodName}: {nameof(thaiWordSet)} is a {setOperation} of {nameof(equivSubset)}", thaiWordSet.IsProperSubsetOf(equivSubset));

            thaiWordSuperset.CopyTo(equivSuperset);
            assertTrue($"{methodName}: {nameof(thaiWordSet)} is not a {setOperation} of {nameof(equivSuperset)}", thaiWordSet.IsProperSubsetOf(equivSuperset));
        }

            

        [Test]
        public void TestIsProperSubsetOf_CharArrayCollection()
        {
            var equivEmptySet = new List<char[]>();
            var equivSet = new List<char[]>();
            var equivSubset = new List<char[]>();
            var equivSuperset = new List<char[]>();
            string setOperation = "proper superset", methodName = nameof(UnicodeSet.IsProperSubsetOf);

            // Test empty set
            assertFalse($"{methodName}: {nameof(thaiWordSet)} is a {setOperation} of {nameof(equivEmptySet)}", thaiWordSet.IsProperSubsetOf(equivEmptySet));
            assertFalse($"{methodName}: {nameof(thaiWordSet)} is a {setOperation} of {nameof(equivEmptySet)}", emptySet.IsProperSubsetOf(equivEmptySet));

            thaiWordSet.CopyTo(equivSet);
            assertFalse($"{methodName}: {nameof(thaiWordSet)} is a {setOperation} of {nameof(equivSet)}", thaiWordSet.IsProperSubsetOf(equivSet));

            thaiWordSubset.CopyTo(equivSubset);
            assertFalse($"{methodName}: {nameof(thaiWordSet)} is a {setOperation} of {nameof(equivSubset)}", thaiWordSet.IsProperSubsetOf(equivSubset));

            thaiWordSuperset.CopyTo(equivSuperset);
            assertTrue($"{methodName}: {nameof(thaiWordSet)} is not a {setOperation} of {nameof(equivSuperset)}", thaiWordSet.IsProperSubsetOf(equivSuperset));
        }

    

        [Test]
        public void TestOverlaps_String()
        {
            var equivEmptySet = "";
            var equivSet = "ABCDEF";
            var equivSubset = "CDEAF";
            var equivSuperset = "ABCDEFG";
            string setOperation = "overlap", methodName = nameof(UnicodeSet.Overlaps);

            // Test empty set
            assertFalse($"{methodName}: {nameof(aThruFSet)} does {setOperation} with {nameof(equivEmptySet)}", aThruFSet.Overlaps(equivEmptySet));
            assertFalse($"{methodName}: {nameof(emptySet)} does {setOperation} with {nameof(equivEmptySet)}", emptySet.Overlaps(equivEmptySet));

            assertTrue($"{methodName}: {nameof(aThruFSet)} does not {setOperation} with {nameof(equivSet)}", aThruFSet.Overlaps(equivSet));
            assertTrue($"{methodName}: {nameof(aThruFSet)} does not {setOperation} with {nameof(equivSubset)}", aThruFSet.Overlaps(equivSubset));
            assertTrue($"{methodName}: {nameof(aThruFSet)} does not {setOperation} with {nameof(equivSuperset)}", aThruFSet.Overlaps(equivSuperset));
            assertFalse($"{methodName}: {nameof(thaiWordSet)} does {setOperation} with {nameof(equivSet)}", thaiWordSet.Overlaps(equivSet));
        }



        [Test]
        public void TestOverlaps_CharSequence()
        {
            var equivEmptySet = "".AsCharSequence();
            var equivSet = "ABCDEF".AsCharSequence();
            var equivSubset = "CDEAF".AsCharSequence();
            var equivSuperset = "ABCDEFG".AsCharSequence();
            string setOperation = "overlap", methodName = nameof(UnicodeSet.Overlaps);

            // Test empty set
            assertFalse($"{methodName}: {nameof(aThruFSet)} does {setOperation} with {nameof(equivEmptySet)}", aThruFSet.Overlaps(equivEmptySet));
            assertFalse($"{methodName}: {nameof(emptySet)} does {setOperation} with {nameof(equivEmptySet)}", emptySet.Overlaps(equivEmptySet));

            assertTrue($"{methodName}: {nameof(aThruFSet)} does not {setOperation} with {nameof(equivSet)}", aThruFSet.Overlaps(equivSet));
            assertTrue($"{methodName}: {nameof(aThruFSet)} does not {setOperation} with {nameof(equivSubset)}", aThruFSet.Overlaps(equivSubset));
            assertTrue($"{methodName}: {nameof(aThruFSet)} does not {setOperation} with {nameof(equivSuperset)}", aThruFSet.Overlaps(equivSuperset));
            assertFalse($"{methodName}: {nameof(thaiWordSet)} does {setOperation} with {nameof(equivSet)}", thaiWordSet.Overlaps(equivSet));
        }



        [Test]
        public void TestOverlaps_ReadOnlySpan()
        {
            var equivEmptySet = "".AsSpan();
            var equivSet = "ABCDEF".AsSpan();
            var equivSubset = "CDEAF".AsSpan();
            var equivSuperset = "ABCDEFG".AsSpan();
            string setOperation = "overlap", methodName = nameof(UnicodeSet.Overlaps);

            // Test empty set
            assertFalse($"{methodName}: {nameof(aThruFSet)} does {setOperation} with {nameof(equivEmptySet)}", aThruFSet.Overlaps(equivEmptySet));
            assertFalse($"{methodName}: {nameof(emptySet)} does {setOperation} with {nameof(equivEmptySet)}", emptySet.Overlaps(equivEmptySet));

            assertTrue($"{methodName}: {nameof(aThruFSet)} does not {setOperation} with {nameof(equivSet)}", aThruFSet.Overlaps(equivSet));
            assertTrue($"{methodName}: {nameof(aThruFSet)} does not {setOperation} with {nameof(equivSubset)}", aThruFSet.Overlaps(equivSubset));
            assertTrue($"{methodName}: {nameof(aThruFSet)} does not {setOperation} with {nameof(equivSuperset)}", aThruFSet.Overlaps(equivSuperset));
            assertFalse($"{methodName}: {nameof(thaiWordSet)} does {setOperation} with {nameof(equivSet)}", thaiWordSet.Overlaps(equivSet));
        }



        [Test]
        public void TestOverlaps_CharArray()
        {
            var equivEmptySet = "".ToCharArray();
            var equivSet = "ABCDEF".ToCharArray();
            var equivSubset = "CDEAF".ToCharArray();
            var equivSuperset = "ABCDEFG".ToCharArray();
            string setOperation = "overlap", methodName = nameof(UnicodeSet.Overlaps);

            // Test empty set
            assertFalse($"{methodName}: {nameof(aThruFSet)} does {setOperation} with {nameof(equivEmptySet)}", aThruFSet.Overlaps(equivEmptySet));
            assertFalse($"{methodName}: {nameof(emptySet)} does {setOperation} with {nameof(equivEmptySet)}", emptySet.Overlaps(equivEmptySet));

            assertTrue($"{methodName}: {nameof(aThruFSet)} does not {setOperation} with {nameof(equivSet)}", aThruFSet.Overlaps(equivSet));
            assertTrue($"{methodName}: {nameof(aThruFSet)} does not {setOperation} with {nameof(equivSubset)}", aThruFSet.Overlaps(equivSubset));
            assertTrue($"{methodName}: {nameof(aThruFSet)} does not {setOperation} with {nameof(equivSuperset)}", aThruFSet.Overlaps(equivSuperset));
            assertFalse($"{methodName}: {nameof(thaiWordSet)} does {setOperation} with {nameof(equivSet)}", thaiWordSet.Overlaps(equivSet));
        }

    

        [Test]
        public void TestOverlaps_StringCollection()
        {
            var equivEmptySet = new List<string>();
            var equivSet = new List<string>();
            var equivSubset = new List<string>();
            var equivSuperset = new List<string>();
            var equivBurmeseSet = new List<string>();
            string setOperation = "overlap", methodName = nameof(UnicodeSet.Overlaps);

            // Test empty set
            assertFalse($"{methodName}: {nameof(thaiWordSet)} does {setOperation} with {nameof(equivEmptySet)}", thaiWordSet.Overlaps(equivEmptySet));
            assertFalse($"{methodName}: {nameof(emptySet)} does {setOperation} with {nameof(equivEmptySet)}", emptySet.Overlaps(equivEmptySet));

            thaiWordSet.CopyTo(equivSet);
            assertTrue($"{methodName}: {nameof(thaiWordSet)} does not {setOperation} with {nameof(equivSet)}", thaiWordSet.Overlaps(equivSet));

            thaiWordSubset.CopyTo(equivSubset);
            assertTrue($"{methodName}: {nameof(thaiWordSet)} does not {setOperation} with {nameof(equivSubset)}", thaiWordSet.Overlaps(equivSubset));

            thaiWordSuperset.CopyTo(equivSuperset);
            assertTrue($"{methodName}: {nameof(thaiWordSet)} does not {setOperation} with {nameof(equivSuperset)}", thaiWordSet.Overlaps(equivSuperset));

            burmeseWordSet.CopyTo(equivBurmeseSet);
            assertFalse($"{methodName}: {nameof(thaiWordSet)} does {setOperation} with {nameof(equivBurmeseSet)}", thaiWordSet.Overlaps(equivBurmeseSet));
        }

        

        [Test]
        public void TestOverlaps_CharSequenceCollection()
        {
            var equivEmptySet = new List<ICharSequence>();
            var equivSet = new List<ICharSequence>();
            var equivSubset = new List<ICharSequence>();
            var equivSuperset = new List<ICharSequence>();
            var equivBurmeseSet = new List<ICharSequence>();
            string setOperation = "overlap", methodName = nameof(UnicodeSet.Overlaps);

            // Test empty set
            assertFalse($"{methodName}: {nameof(thaiWordSet)} does {setOperation} with {nameof(equivEmptySet)}", thaiWordSet.Overlaps(equivEmptySet));
            assertFalse($"{methodName}: {nameof(emptySet)} does {setOperation} with {nameof(equivEmptySet)}", emptySet.Overlaps(equivEmptySet));

            thaiWordSet.CopyTo(equivSet);
            assertTrue($"{methodName}: {nameof(thaiWordSet)} does not {setOperation} with {nameof(equivSet)}", thaiWordSet.Overlaps(equivSet));

            thaiWordSubset.CopyTo(equivSubset);
            assertTrue($"{methodName}: {nameof(thaiWordSet)} does not {setOperation} with {nameof(equivSubset)}", thaiWordSet.Overlaps(equivSubset));

            thaiWordSuperset.CopyTo(equivSuperset);
            assertTrue($"{methodName}: {nameof(thaiWordSet)} does not {setOperation} with {nameof(equivSuperset)}", thaiWordSet.Overlaps(equivSuperset));

            burmeseWordSet.CopyTo(equivBurmeseSet);
            assertFalse($"{methodName}: {nameof(thaiWordSet)} does {setOperation} with {nameof(equivBurmeseSet)}", thaiWordSet.Overlaps(equivBurmeseSet));
        }

            

        [Test]
        public void TestOverlaps_CharArrayCollection()
        {
            var equivEmptySet = new List<char[]>();
            var equivSet = new List<char[]>();
            var equivSubset = new List<char[]>();
            var equivSuperset = new List<char[]>();
            var equivBurmeseSet = new List<char[]>();
            string setOperation = "overlap", methodName = nameof(UnicodeSet.Overlaps);

            // Test empty set
            assertFalse($"{methodName}: {nameof(thaiWordSet)} does {setOperation} with {nameof(equivEmptySet)}", thaiWordSet.Overlaps(equivEmptySet));
            assertFalse($"{methodName}: {nameof(emptySet)} does {setOperation} with {nameof(equivEmptySet)}", emptySet.Overlaps(equivEmptySet));

            thaiWordSet.CopyTo(equivSet);
            assertTrue($"{methodName}: {nameof(thaiWordSet)} does not {setOperation} with {nameof(equivSet)}", thaiWordSet.Overlaps(equivSet));

            thaiWordSubset.CopyTo(equivSubset);
            assertTrue($"{methodName}: {nameof(thaiWordSet)} does not {setOperation} with {nameof(equivSubset)}", thaiWordSet.Overlaps(equivSubset));

            thaiWordSuperset.CopyTo(equivSuperset);
            assertTrue($"{methodName}: {nameof(thaiWordSet)} does not {setOperation} with {nameof(equivSuperset)}", thaiWordSet.Overlaps(equivSuperset));

            burmeseWordSet.CopyTo(equivBurmeseSet);
            assertFalse($"{methodName}: {nameof(thaiWordSet)} does {setOperation} with {nameof(equivBurmeseSet)}", thaiWordSet.Overlaps(equivBurmeseSet));
        }

        

        [Test]
        public void TestSymmetricExceptWith_StringCollection()
        {
            var equivEmptySet = new List<string>();
            var equivDThruMSet = new List<string>();
            var equivThaiWordSuperset = new List<string>();
            string setOperation = "symmetric except with (xOr)", methodName = nameof(UnicodeSet.SymmetricExceptWith);

            // Test empty set
            assertEquals($"{methodName}: {nameof(aThruFSet)} {setOperation} {nameof(equivEmptySet)} is wrong", aThruFSet, aThruFSet.SymmetricExceptWith(equivEmptySet));

            dThruMSet.CopyTo(equivDThruMSet);
            assertEquals($"{methodName}: {nameof(aThruFSet)} {setOperation} {nameof(equivDThruMSet)} is wrong", new UnicodeSet("[A-CG-M]"), aThruFSet.SymmetricExceptWith(equivDThruMSet));

            thaiWordSuperset.CopyTo(equivThaiWordSuperset);
            assertEquals($"{methodName}: {nameof(thaiWordSet)} {setOperation} {nameof(equivThaiWordSuperset)} is wrong", new UnicodeSet("[A]"), thaiWordSet.SymmetricExceptWith(equivThaiWordSuperset));
        }

        

        [Test]
        public void TestSymmetricExceptWith_CharSequenceCollection()
        {
            var equivEmptySet = new List<ICharSequence>();
            var equivDThruMSet = new List<ICharSequence>();
            var equivThaiWordSuperset = new List<ICharSequence>();
            string setOperation = "symmetric except with (xOr)", methodName = nameof(UnicodeSet.SymmetricExceptWith);

            // Test empty set
            assertEquals($"{methodName}: {nameof(aThruFSet)} {setOperation} {nameof(equivEmptySet)} is wrong", aThruFSet, aThruFSet.SymmetricExceptWith(equivEmptySet));

            dThruMSet.CopyTo(equivDThruMSet);
            assertEquals($"{methodName}: {nameof(aThruFSet)} {setOperation} {nameof(equivDThruMSet)} is wrong", new UnicodeSet("[A-CG-M]"), aThruFSet.SymmetricExceptWith(equivDThruMSet));

            thaiWordSuperset.CopyTo(equivThaiWordSuperset);
            assertEquals($"{methodName}: {nameof(thaiWordSet)} {setOperation} {nameof(equivThaiWordSuperset)} is wrong", new UnicodeSet("[A]"), thaiWordSet.SymmetricExceptWith(equivThaiWordSuperset));
        }

            

        [Test]
        public void TestSymmetricExceptWith_CharArrayCollection()
        {
            var equivEmptySet = new List<char[]>();
            var equivDThruMSet = new List<char[]>();
            var equivThaiWordSuperset = new List<char[]>();
            string setOperation = "symmetric except with (xOr)", methodName = nameof(UnicodeSet.SymmetricExceptWith);

            // Test empty set
            assertEquals($"{methodName}: {nameof(aThruFSet)} {setOperation} {nameof(equivEmptySet)} is wrong", aThruFSet, aThruFSet.SymmetricExceptWith(equivEmptySet));

            dThruMSet.CopyTo(equivDThruMSet);
            assertEquals($"{methodName}: {nameof(aThruFSet)} {setOperation} {nameof(equivDThruMSet)} is wrong", new UnicodeSet("[A-CG-M]"), aThruFSet.SymmetricExceptWith(equivDThruMSet));

            thaiWordSuperset.CopyTo(equivThaiWordSuperset);
            assertEquals($"{methodName}: {nameof(thaiWordSet)} {setOperation} {nameof(equivThaiWordSuperset)} is wrong", new UnicodeSet("[A]"), thaiWordSet.SymmetricExceptWith(equivThaiWordSuperset));
        }

        }
}

