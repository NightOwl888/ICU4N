//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using ICU4N.Impl;
using ICU4N.Text;
using J2N.Text;
using NUnit.Framework;
using System;
using System.Text;

namespace ICU4N.Dev.Test.Util
{
    public partial class SimpleFormatterTest
    {
        #region FormatRawPattern

        [Test]
        public void TestFormatRawPattern_OneArguments_ReadOnlySpan()
        {
            string expected = "The result is: first";
            ReadOnlySpan<char> pattern = "The result is: {0}".AsSpan();
            string actual = SimpleFormatterImpl.FormatRawPattern(pattern, 0, int.MaxValue, "first".AsSpan());
            assertEquals("TestFormatRawPattern_OneArguments_ReadOnlySpan", expected, actual);
        }

        [Test]
        public void TestFormatRawPattern_TwoArguments_ReadOnlySpan()
        {
            string expected = "The result is: first, second";
            ReadOnlySpan<char> pattern = "The result is: {0}, {1}".AsSpan();
            string actual = SimpleFormatterImpl.FormatRawPattern(pattern, 0, int.MaxValue, "first".AsSpan(), "second".AsSpan());
            assertEquals("TestFormatRawPattern_TwoArguments_ReadOnlySpan", expected, actual);
        }

        [Test]
        public void TestFormatRawPattern_ThreeArguments_ReadOnlySpan()
        {
            string expected = "The result is: first, second, third";
            ReadOnlySpan<char> pattern = "The result is: {0}, {1}, {2}".AsSpan();
            string actual = SimpleFormatterImpl.FormatRawPattern(pattern, 0, int.MaxValue, "first".AsSpan(), "second".AsSpan(), "third".AsSpan());
            assertEquals("TestFormatRawPattern_ThreeArguments_ReadOnlySpan", expected, actual);
        }

        [Test]
        public void TestFormatRawPattern_FourArguments_ReadOnlySpan()
        {
            string expected = "The result is: first, second, third, fourth";
            ReadOnlySpan<char> pattern = "The result is: {0}, {1}, {2}, {3}".AsSpan();
            string actual = SimpleFormatterImpl.FormatRawPattern(pattern, 0, int.MaxValue, "first".AsSpan(), "second".AsSpan(), "third".AsSpan(), "fourth".AsSpan());
            assertEquals("TestFormatRawPattern_FourArguments_ReadOnlySpan", expected, actual);
        }

        [Test]
        public void TestFormatRawPattern_FiveArguments_ReadOnlySpan()
        {
            string expected = "The result is: first, second, third, fourth, fifth";
            ReadOnlySpan<char> pattern = "The result is: {0}, {1}, {2}, {3}, {4}".AsSpan();
            string actual = SimpleFormatterImpl.FormatRawPattern(pattern, 0, int.MaxValue, "first".AsSpan(), "second".AsSpan(), "third".AsSpan(), "fourth".AsSpan(), "fifth".AsSpan());
            assertEquals("TestFormatRawPattern_FiveArguments_ReadOnlySpan", expected, actual);
        }

        [Test]
        public void TestFormatRawPattern_SixArguments_ReadOnlySpan()
        {
            string expected = "The result is: first, second, third, fourth, fifth, sixth";
            ReadOnlySpan<char> pattern = "The result is: {0}, {1}, {2}, {3}, {4}, {5}".AsSpan();
            string actual = SimpleFormatterImpl.FormatRawPattern(pattern, 0, int.MaxValue, "first".AsSpan(), "second".AsSpan(), "third".AsSpan(), "fourth".AsSpan(), "fifth".AsSpan(), "sixth".AsSpan());
            assertEquals("TestFormatRawPattern_SixArguments_ReadOnlySpan", expected, actual);
        }

        [Test]
        public void TestFormatRawPattern_SevenArguments_ReadOnlySpan()
        {
            string expected = "The result is: first, second, third, fourth, fifth, sixth, seventh";
            ReadOnlySpan<char> pattern = "The result is: {0}, {1}, {2}, {3}, {4}, {5}, {6}".AsSpan();
            string actual = SimpleFormatterImpl.FormatRawPattern(pattern, 0, int.MaxValue, "first".AsSpan(), "second".AsSpan(), "third".AsSpan(), "fourth".AsSpan(), "fifth".AsSpan(), "sixth".AsSpan(), "seventh".AsSpan());
            assertEquals("TestFormatRawPattern_SevenArguments_ReadOnlySpan", expected, actual);
        }

        [Test]
        public void TestFormatRawPattern_EightArguments_ReadOnlySpan()
        {
            string expected = "The result is: first, second, third, fourth, fifth, sixth, seventh, eighth";
            ReadOnlySpan<char> pattern = "The result is: {0}, {1}, {2}, {3}, {4}, {5}, {6}, {7}".AsSpan();
            string actual = SimpleFormatterImpl.FormatRawPattern(pattern, 0, int.MaxValue, "first".AsSpan(), "second".AsSpan(), "third".AsSpan(), "fourth".AsSpan(), "fifth".AsSpan(), "sixth".AsSpan(), "seventh".AsSpan(), "eighth".AsSpan());
            assertEquals("TestFormatRawPattern_EightArguments_ReadOnlySpan", expected, actual);
        }

        [Test]
        public void TestFormatRawPattern_NineArguments_ReadOnlySpan()
        {
            string expected = "The result is: first, second, third, fourth, fifth, sixth, seventh, eighth, ninth";
            ReadOnlySpan<char> pattern = "The result is: {0}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {8}".AsSpan();
            string actual = SimpleFormatterImpl.FormatRawPattern(pattern, 0, int.MaxValue, "first".AsSpan(), "second".AsSpan(), "third".AsSpan(), "fourth".AsSpan(), "fifth".AsSpan(), "sixth".AsSpan(), "seventh".AsSpan(), "eighth".AsSpan(), "ninth".AsSpan());
            assertEquals("TestFormatRawPattern_NineArguments_ReadOnlySpan", expected, actual);
        }

        [Test]
        public void TestFormatRawPattern_TenArguments_ReadOnlySpan()
        {
            string expected = "The result is: first, second, third, fourth, fifth, sixth, seventh, eighth, ninth, tenth";
            ReadOnlySpan<char> pattern = "The result is: {0}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {8}, {9}".AsSpan();
            string actual = SimpleFormatterImpl.FormatRawPattern(pattern, 0, int.MaxValue, "first".AsSpan(), "second".AsSpan(), "third".AsSpan(), "fourth".AsSpan(), "fifth".AsSpan(), "sixth".AsSpan(), "seventh".AsSpan(), "eighth".AsSpan(), "ninth".AsSpan(), "tenth".AsSpan());
            assertEquals("TestFormatRawPattern_TenArguments_ReadOnlySpan", expected, actual);
        }

        [Test]
        public void TestFormatRawPattern_ElevenArguments_ReadOnlySpan()
        {
            string expected = "The result is: first, second, third, fourth, fifth, sixth, seventh, eighth, ninth, tenth, eleventh";
            ReadOnlySpan<char> pattern = "The result is: {0}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {8}, {9}, {10}".AsSpan();
            string actual = SimpleFormatterImpl.FormatRawPattern(pattern, 0, int.MaxValue, "first".AsSpan(), "second".AsSpan(), "third".AsSpan(), "fourth".AsSpan(), "fifth".AsSpan(), "sixth".AsSpan(), "seventh".AsSpan(), "eighth".AsSpan(), "ninth".AsSpan(), "tenth".AsSpan(), "eleventh".AsSpan());
            assertEquals("TestFormatRawPattern_ElevenArguments_ReadOnlySpan", expected, actual);
        }

        [Test]
        public void TestFormatRawPattern_TwelveArguments_ReadOnlySpan()
        {
            string expected = "The result is: first, second, third, fourth, fifth, sixth, seventh, eighth, ninth, tenth, eleventh, twelveth";
            ReadOnlySpan<char> pattern = "The result is: {0}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {8}, {9}, {10}, {11}".AsSpan();
            string actual = SimpleFormatterImpl.FormatRawPattern(pattern, 0, int.MaxValue, "first".AsSpan(), "second".AsSpan(), "third".AsSpan(), "fourth".AsSpan(), "fifth".AsSpan(), "sixth".AsSpan(), "seventh".AsSpan(), "eighth".AsSpan(), "ninth".AsSpan(), "tenth".AsSpan(), "eleventh".AsSpan(), "twelveth".AsSpan());
            assertEquals("TestFormatRawPattern_TwelveArguments_ReadOnlySpan", expected, actual);
        }

        [Test]
        public void TestFormatRawPattern_ThirteenArguments_ReadOnlySpan()
        {
            string expected = "The result is: first, second, third, fourth, fifth, sixth, seventh, eighth, ninth, tenth, eleventh, twelveth, thirteenth";
            ReadOnlySpan<char> pattern = "The result is: {0}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {8}, {9}, {10}, {11}, {12}".AsSpan();
            string actual = SimpleFormatterImpl.FormatRawPattern(pattern, 0, int.MaxValue, "first".AsSpan(), "second".AsSpan(), "third".AsSpan(), "fourth".AsSpan(), "fifth".AsSpan(), "sixth".AsSpan(), "seventh".AsSpan(), "eighth".AsSpan(), "ninth".AsSpan(), "tenth".AsSpan(), "eleventh".AsSpan(), "twelveth".AsSpan(), "thirteenth".AsSpan());
            assertEquals("TestFormatRawPattern_ThirteenArguments_ReadOnlySpan", expected, actual);
        }

        [Test]
        public void TestFormatRawPattern_FourteenArguments_ReadOnlySpan()
        {
            string expected = "The result is: first, second, third, fourth, fifth, sixth, seventh, eighth, ninth, tenth, eleventh, twelveth, thirteenth, fourteenth";
            ReadOnlySpan<char> pattern = "The result is: {0}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {8}, {9}, {10}, {11}, {12}, {13}".AsSpan();
            string actual = SimpleFormatterImpl.FormatRawPattern(pattern, 0, int.MaxValue, "first".AsSpan(), "second".AsSpan(), "third".AsSpan(), "fourth".AsSpan(), "fifth".AsSpan(), "sixth".AsSpan(), "seventh".AsSpan(), "eighth".AsSpan(), "ninth".AsSpan(), "tenth".AsSpan(), "eleventh".AsSpan(), "twelveth".AsSpan(), "thirteenth".AsSpan(), "fourteenth".AsSpan());
            assertEquals("TestFormatRawPattern_FourteenArguments_ReadOnlySpan", expected, actual);
        }

        [Test]
        public void TestFormatRawPattern_FifteenArguments_ReadOnlySpan()
        {
            string expected = "The result is: first, second, third, fourth, fifth, sixth, seventh, eighth, ninth, tenth, eleventh, twelveth, thirteenth, fourteenth, fifteenth";
            ReadOnlySpan<char> pattern = "The result is: {0}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {8}, {9}, {10}, {11}, {12}, {13}, {14}".AsSpan();
            string actual = SimpleFormatterImpl.FormatRawPattern(pattern, 0, int.MaxValue, "first".AsSpan(), "second".AsSpan(), "third".AsSpan(), "fourth".AsSpan(), "fifth".AsSpan(), "sixth".AsSpan(), "seventh".AsSpan(), "eighth".AsSpan(), "ninth".AsSpan(), "tenth".AsSpan(), "eleventh".AsSpan(), "twelveth".AsSpan(), "thirteenth".AsSpan(), "fourteenth".AsSpan(), "fifteenth".AsSpan());
            assertEquals("TestFormatRawPattern_FifteenArguments_ReadOnlySpan", expected, actual);
        }

        [Test]
        public void TestFormatRawPattern_SixteenArguments_ReadOnlySpan()
        {
            string expected = "The result is: first, second, third, fourth, fifth, sixth, seventh, eighth, ninth, tenth, eleventh, twelveth, thirteenth, fourteenth, fifteenth, sixteenth";
            ReadOnlySpan<char> pattern = "The result is: {0}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {8}, {9}, {10}, {11}, {12}, {13}, {14}, {15}".AsSpan();
            string actual = SimpleFormatterImpl.FormatRawPattern(pattern, 0, int.MaxValue, "first".AsSpan(), "second".AsSpan(), "third".AsSpan(), "fourth".AsSpan(), "fifth".AsSpan(), "sixth".AsSpan(), "seventh".AsSpan(), "eighth".AsSpan(), "ninth".AsSpan(), "tenth".AsSpan(), "eleventh".AsSpan(), "twelveth".AsSpan(), "thirteenth".AsSpan(), "fourteenth".AsSpan(), "fifteenth".AsSpan(), "sixteenth".AsSpan());
            assertEquals("TestFormatRawPattern_SixteenArguments_ReadOnlySpan", expected, actual);
        }

        #endregion FormatRawPattern

        #region TryFormatRawPattern

        [Test]
        public void TestTryFormatRawPattern_OneArguments_ReadOnlySpan()
        {
            string expected = "The result is: first";
            ReadOnlySpan<char> pattern = "The result is: {0}".AsSpan();
            Span<char> actual = stackalloc char[expected.Length];
            assertTrue("Result was false", SimpleFormatterImpl.TryFormatRawPattern(pattern, actual, out int charsLength, 0, int.MaxValue, "first".AsSpan()));
            assertEquals("TestTryFormatRawPattern_OneArguments_ReadOnlySpan", expected, actual.Slice(0, charsLength).ToString());
        }

        [Test]
        public void TestTryFormatRawPattern_TwoArguments_ReadOnlySpan()
        {
            string expected = "The result is: first, second";
            ReadOnlySpan<char> pattern = "The result is: {0}, {1}".AsSpan();
            Span<char> actual = stackalloc char[expected.Length];
            assertTrue("Result was false", SimpleFormatterImpl.TryFormatRawPattern(pattern, actual, out int charsLength, 0, int.MaxValue, "first".AsSpan(), "second".AsSpan()));
            assertEquals("TestTryFormatRawPattern_TwoArguments_ReadOnlySpan", expected, actual.Slice(0, charsLength).ToString());
        }

        [Test]
        public void TestTryFormatRawPattern_ThreeArguments_ReadOnlySpan()
        {
            string expected = "The result is: first, second, third";
            ReadOnlySpan<char> pattern = "The result is: {0}, {1}, {2}".AsSpan();
            Span<char> actual = stackalloc char[expected.Length];
            assertTrue("Result was false", SimpleFormatterImpl.TryFormatRawPattern(pattern, actual, out int charsLength, 0, int.MaxValue, "first".AsSpan(), "second".AsSpan(), "third".AsSpan()));
            assertEquals("TestTryFormatRawPattern_ThreeArguments_ReadOnlySpan", expected, actual.Slice(0, charsLength).ToString());
        }

        [Test]
        public void TestTryFormatRawPattern_FourArguments_ReadOnlySpan()
        {
            string expected = "The result is: first, second, third, fourth";
            ReadOnlySpan<char> pattern = "The result is: {0}, {1}, {2}, {3}".AsSpan();
            Span<char> actual = stackalloc char[expected.Length];
            assertTrue("Result was false", SimpleFormatterImpl.TryFormatRawPattern(pattern, actual, out int charsLength, 0, int.MaxValue, "first".AsSpan(), "second".AsSpan(), "third".AsSpan(), "fourth".AsSpan()));
            assertEquals("TestTryFormatRawPattern_FourArguments_ReadOnlySpan", expected, actual.Slice(0, charsLength).ToString());
        }

        [Test]
        public void TestTryFormatRawPattern_FiveArguments_ReadOnlySpan()
        {
            string expected = "The result is: first, second, third, fourth, fifth";
            ReadOnlySpan<char> pattern = "The result is: {0}, {1}, {2}, {3}, {4}".AsSpan();
            Span<char> actual = stackalloc char[expected.Length];
            assertTrue("Result was false", SimpleFormatterImpl.TryFormatRawPattern(pattern, actual, out int charsLength, 0, int.MaxValue, "first".AsSpan(), "second".AsSpan(), "third".AsSpan(), "fourth".AsSpan(), "fifth".AsSpan()));
            assertEquals("TestTryFormatRawPattern_FiveArguments_ReadOnlySpan", expected, actual.Slice(0, charsLength).ToString());
        }

        [Test]
        public void TestTryFormatRawPattern_SixArguments_ReadOnlySpan()
        {
            string expected = "The result is: first, second, third, fourth, fifth, sixth";
            ReadOnlySpan<char> pattern = "The result is: {0}, {1}, {2}, {3}, {4}, {5}".AsSpan();
            Span<char> actual = stackalloc char[expected.Length];
            assertTrue("Result was false", SimpleFormatterImpl.TryFormatRawPattern(pattern, actual, out int charsLength, 0, int.MaxValue, "first".AsSpan(), "second".AsSpan(), "third".AsSpan(), "fourth".AsSpan(), "fifth".AsSpan(), "sixth".AsSpan()));
            assertEquals("TestTryFormatRawPattern_SixArguments_ReadOnlySpan", expected, actual.Slice(0, charsLength).ToString());
        }

        [Test]
        public void TestTryFormatRawPattern_SevenArguments_ReadOnlySpan()
        {
            string expected = "The result is: first, second, third, fourth, fifth, sixth, seventh";
            ReadOnlySpan<char> pattern = "The result is: {0}, {1}, {2}, {3}, {4}, {5}, {6}".AsSpan();
            Span<char> actual = stackalloc char[expected.Length];
            assertTrue("Result was false", SimpleFormatterImpl.TryFormatRawPattern(pattern, actual, out int charsLength, 0, int.MaxValue, "first".AsSpan(), "second".AsSpan(), "third".AsSpan(), "fourth".AsSpan(), "fifth".AsSpan(), "sixth".AsSpan(), "seventh".AsSpan()));
            assertEquals("TestTryFormatRawPattern_SevenArguments_ReadOnlySpan", expected, actual.Slice(0, charsLength).ToString());
        }

        [Test]
        public void TestTryFormatRawPattern_EightArguments_ReadOnlySpan()
        {
            string expected = "The result is: first, second, third, fourth, fifth, sixth, seventh, eighth";
            ReadOnlySpan<char> pattern = "The result is: {0}, {1}, {2}, {3}, {4}, {5}, {6}, {7}".AsSpan();
            Span<char> actual = stackalloc char[expected.Length];
            assertTrue("Result was false", SimpleFormatterImpl.TryFormatRawPattern(pattern, actual, out int charsLength, 0, int.MaxValue, "first".AsSpan(), "second".AsSpan(), "third".AsSpan(), "fourth".AsSpan(), "fifth".AsSpan(), "sixth".AsSpan(), "seventh".AsSpan(), "eighth".AsSpan()));
            assertEquals("TestTryFormatRawPattern_EightArguments_ReadOnlySpan", expected, actual.Slice(0, charsLength).ToString());
        }

        [Test]
        public void TestTryFormatRawPattern_NineArguments_ReadOnlySpan()
        {
            string expected = "The result is: first, second, third, fourth, fifth, sixth, seventh, eighth, ninth";
            ReadOnlySpan<char> pattern = "The result is: {0}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {8}".AsSpan();
            Span<char> actual = stackalloc char[expected.Length];
            assertTrue("Result was false", SimpleFormatterImpl.TryFormatRawPattern(pattern, actual, out int charsLength, 0, int.MaxValue, "first".AsSpan(), "second".AsSpan(), "third".AsSpan(), "fourth".AsSpan(), "fifth".AsSpan(), "sixth".AsSpan(), "seventh".AsSpan(), "eighth".AsSpan(), "ninth".AsSpan()));
            assertEquals("TestTryFormatRawPattern_NineArguments_ReadOnlySpan", expected, actual.Slice(0, charsLength).ToString());
        }

        [Test]
        public void TestTryFormatRawPattern_TenArguments_ReadOnlySpan()
        {
            string expected = "The result is: first, second, third, fourth, fifth, sixth, seventh, eighth, ninth, tenth";
            ReadOnlySpan<char> pattern = "The result is: {0}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {8}, {9}".AsSpan();
            Span<char> actual = stackalloc char[expected.Length];
            assertTrue("Result was false", SimpleFormatterImpl.TryFormatRawPattern(pattern, actual, out int charsLength, 0, int.MaxValue, "first".AsSpan(), "second".AsSpan(), "third".AsSpan(), "fourth".AsSpan(), "fifth".AsSpan(), "sixth".AsSpan(), "seventh".AsSpan(), "eighth".AsSpan(), "ninth".AsSpan(), "tenth".AsSpan()));
            assertEquals("TestTryFormatRawPattern_TenArguments_ReadOnlySpan", expected, actual.Slice(0, charsLength).ToString());
        }

        [Test]
        public void TestTryFormatRawPattern_ElevenArguments_ReadOnlySpan()
        {
            string expected = "The result is: first, second, third, fourth, fifth, sixth, seventh, eighth, ninth, tenth, eleventh";
            ReadOnlySpan<char> pattern = "The result is: {0}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {8}, {9}, {10}".AsSpan();
            Span<char> actual = stackalloc char[expected.Length];
            assertTrue("Result was false", SimpleFormatterImpl.TryFormatRawPattern(pattern, actual, out int charsLength, 0, int.MaxValue, "first".AsSpan(), "second".AsSpan(), "third".AsSpan(), "fourth".AsSpan(), "fifth".AsSpan(), "sixth".AsSpan(), "seventh".AsSpan(), "eighth".AsSpan(), "ninth".AsSpan(), "tenth".AsSpan(), "eleventh".AsSpan()));
            assertEquals("TestTryFormatRawPattern_ElevenArguments_ReadOnlySpan", expected, actual.Slice(0, charsLength).ToString());
        }

        [Test]
        public void TestTryFormatRawPattern_TwelveArguments_ReadOnlySpan()
        {
            string expected = "The result is: first, second, third, fourth, fifth, sixth, seventh, eighth, ninth, tenth, eleventh, twelveth";
            ReadOnlySpan<char> pattern = "The result is: {0}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {8}, {9}, {10}, {11}".AsSpan();
            Span<char> actual = stackalloc char[expected.Length];
            assertTrue("Result was false", SimpleFormatterImpl.TryFormatRawPattern(pattern, actual, out int charsLength, 0, int.MaxValue, "first".AsSpan(), "second".AsSpan(), "third".AsSpan(), "fourth".AsSpan(), "fifth".AsSpan(), "sixth".AsSpan(), "seventh".AsSpan(), "eighth".AsSpan(), "ninth".AsSpan(), "tenth".AsSpan(), "eleventh".AsSpan(), "twelveth".AsSpan()));
            assertEquals("TestTryFormatRawPattern_TwelveArguments_ReadOnlySpan", expected, actual.Slice(0, charsLength).ToString());
        }

        [Test]
        public void TestTryFormatRawPattern_ThirteenArguments_ReadOnlySpan()
        {
            string expected = "The result is: first, second, third, fourth, fifth, sixth, seventh, eighth, ninth, tenth, eleventh, twelveth, thirteenth";
            ReadOnlySpan<char> pattern = "The result is: {0}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {8}, {9}, {10}, {11}, {12}".AsSpan();
            Span<char> actual = stackalloc char[expected.Length];
            assertTrue("Result was false", SimpleFormatterImpl.TryFormatRawPattern(pattern, actual, out int charsLength, 0, int.MaxValue, "first".AsSpan(), "second".AsSpan(), "third".AsSpan(), "fourth".AsSpan(), "fifth".AsSpan(), "sixth".AsSpan(), "seventh".AsSpan(), "eighth".AsSpan(), "ninth".AsSpan(), "tenth".AsSpan(), "eleventh".AsSpan(), "twelveth".AsSpan(), "thirteenth".AsSpan()));
            assertEquals("TestTryFormatRawPattern_ThirteenArguments_ReadOnlySpan", expected, actual.Slice(0, charsLength).ToString());
        }

        [Test]
        public void TestTryFormatRawPattern_FourteenArguments_ReadOnlySpan()
        {
            string expected = "The result is: first, second, third, fourth, fifth, sixth, seventh, eighth, ninth, tenth, eleventh, twelveth, thirteenth, fourteenth";
            ReadOnlySpan<char> pattern = "The result is: {0}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {8}, {9}, {10}, {11}, {12}, {13}".AsSpan();
            Span<char> actual = stackalloc char[expected.Length];
            assertTrue("Result was false", SimpleFormatterImpl.TryFormatRawPattern(pattern, actual, out int charsLength, 0, int.MaxValue, "first".AsSpan(), "second".AsSpan(), "third".AsSpan(), "fourth".AsSpan(), "fifth".AsSpan(), "sixth".AsSpan(), "seventh".AsSpan(), "eighth".AsSpan(), "ninth".AsSpan(), "tenth".AsSpan(), "eleventh".AsSpan(), "twelveth".AsSpan(), "thirteenth".AsSpan(), "fourteenth".AsSpan()));
            assertEquals("TestTryFormatRawPattern_FourteenArguments_ReadOnlySpan", expected, actual.Slice(0, charsLength).ToString());
        }

        [Test]
        public void TestTryFormatRawPattern_FifteenArguments_ReadOnlySpan()
        {
            string expected = "The result is: first, second, third, fourth, fifth, sixth, seventh, eighth, ninth, tenth, eleventh, twelveth, thirteenth, fourteenth, fifteenth";
            ReadOnlySpan<char> pattern = "The result is: {0}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {8}, {9}, {10}, {11}, {12}, {13}, {14}".AsSpan();
            Span<char> actual = stackalloc char[expected.Length];
            assertTrue("Result was false", SimpleFormatterImpl.TryFormatRawPattern(pattern, actual, out int charsLength, 0, int.MaxValue, "first".AsSpan(), "second".AsSpan(), "third".AsSpan(), "fourth".AsSpan(), "fifth".AsSpan(), "sixth".AsSpan(), "seventh".AsSpan(), "eighth".AsSpan(), "ninth".AsSpan(), "tenth".AsSpan(), "eleventh".AsSpan(), "twelveth".AsSpan(), "thirteenth".AsSpan(), "fourteenth".AsSpan(), "fifteenth".AsSpan()));
            assertEquals("TestTryFormatRawPattern_FifteenArguments_ReadOnlySpan", expected, actual.Slice(0, charsLength).ToString());
        }

        [Test]
        public void TestTryFormatRawPattern_SixteenArguments_ReadOnlySpan()
        {
            string expected = "The result is: first, second, third, fourth, fifth, sixth, seventh, eighth, ninth, tenth, eleventh, twelveth, thirteenth, fourteenth, fifteenth, sixteenth";
            ReadOnlySpan<char> pattern = "The result is: {0}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {8}, {9}, {10}, {11}, {12}, {13}, {14}, {15}".AsSpan();
            Span<char> actual = stackalloc char[expected.Length];
            assertTrue("Result was false", SimpleFormatterImpl.TryFormatRawPattern(pattern, actual, out int charsLength, 0, int.MaxValue, "first".AsSpan(), "second".AsSpan(), "third".AsSpan(), "fourth".AsSpan(), "fifth".AsSpan(), "sixth".AsSpan(), "seventh".AsSpan(), "eighth".AsSpan(), "ninth".AsSpan(), "tenth".AsSpan(), "eleventh".AsSpan(), "twelveth".AsSpan(), "thirteenth".AsSpan(), "fourteenth".AsSpan(), "fifteenth".AsSpan(), "sixteenth".AsSpan()));
            assertEquals("TestTryFormatRawPattern_SixteenArguments_ReadOnlySpan", expected, actual.Slice(0, charsLength).ToString());
        }

        #endregion TryFormatRawPattern

        #region FormatCompiledPattern

        [Test]
        public void TestFormatCompiledPattern_OneArguments_ReadOnlySpan()
        {
            string expected = "The result is: first";
            string pattern = SimpleFormatterImpl.CompileToStringMinMaxArguments("The result is: {0}".AsSpan(), 0, int.MaxValue);
            string actual = SimpleFormatterImpl.FormatCompiledPattern(pattern.AsSpan(), "first".AsSpan());
            assertEquals("TestFormatCompiledPattern_OneArguments_ReadOnlySpan", expected, actual);
        }

        [Test]
        public void TestFormatCompiledPattern_TwoArguments_ReadOnlySpan()
        {
            string expected = "The result is: first, second";
            string pattern = SimpleFormatterImpl.CompileToStringMinMaxArguments("The result is: {0}, {1}".AsSpan(), 0, int.MaxValue);
            string actual = SimpleFormatterImpl.FormatCompiledPattern(pattern.AsSpan(), "first".AsSpan(), "second".AsSpan());
            assertEquals("TestFormatCompiledPattern_TwoArguments_ReadOnlySpan", expected, actual);
        }

        [Test]
        public void TestFormatCompiledPattern_ThreeArguments_ReadOnlySpan()
        {
            string expected = "The result is: first, second, third";
            string pattern = SimpleFormatterImpl.CompileToStringMinMaxArguments("The result is: {0}, {1}, {2}".AsSpan(), 0, int.MaxValue);
            string actual = SimpleFormatterImpl.FormatCompiledPattern(pattern.AsSpan(), "first".AsSpan(), "second".AsSpan(), "third".AsSpan());
            assertEquals("TestFormatCompiledPattern_ThreeArguments_ReadOnlySpan", expected, actual);
        }

        [Test]
        public void TestFormatCompiledPattern_FourArguments_ReadOnlySpan()
        {
            string expected = "The result is: first, second, third, fourth";
            string pattern = SimpleFormatterImpl.CompileToStringMinMaxArguments("The result is: {0}, {1}, {2}, {3}".AsSpan(), 0, int.MaxValue);
            string actual = SimpleFormatterImpl.FormatCompiledPattern(pattern.AsSpan(), "first".AsSpan(), "second".AsSpan(), "third".AsSpan(), "fourth".AsSpan());
            assertEquals("TestFormatCompiledPattern_FourArguments_ReadOnlySpan", expected, actual);
        }

        [Test]
        public void TestFormatCompiledPattern_FiveArguments_ReadOnlySpan()
        {
            string expected = "The result is: first, second, third, fourth, fifth";
            string pattern = SimpleFormatterImpl.CompileToStringMinMaxArguments("The result is: {0}, {1}, {2}, {3}, {4}".AsSpan(), 0, int.MaxValue);
            string actual = SimpleFormatterImpl.FormatCompiledPattern(pattern.AsSpan(), "first".AsSpan(), "second".AsSpan(), "third".AsSpan(), "fourth".AsSpan(), "fifth".AsSpan());
            assertEquals("TestFormatCompiledPattern_FiveArguments_ReadOnlySpan", expected, actual);
        }

        [Test]
        public void TestFormatCompiledPattern_SixArguments_ReadOnlySpan()
        {
            string expected = "The result is: first, second, third, fourth, fifth, sixth";
            string pattern = SimpleFormatterImpl.CompileToStringMinMaxArguments("The result is: {0}, {1}, {2}, {3}, {4}, {5}".AsSpan(), 0, int.MaxValue);
            string actual = SimpleFormatterImpl.FormatCompiledPattern(pattern.AsSpan(), "first".AsSpan(), "second".AsSpan(), "third".AsSpan(), "fourth".AsSpan(), "fifth".AsSpan(), "sixth".AsSpan());
            assertEquals("TestFormatCompiledPattern_SixArguments_ReadOnlySpan", expected, actual);
        }

        [Test]
        public void TestFormatCompiledPattern_SevenArguments_ReadOnlySpan()
        {
            string expected = "The result is: first, second, third, fourth, fifth, sixth, seventh";
            string pattern = SimpleFormatterImpl.CompileToStringMinMaxArguments("The result is: {0}, {1}, {2}, {3}, {4}, {5}, {6}".AsSpan(), 0, int.MaxValue);
            string actual = SimpleFormatterImpl.FormatCompiledPattern(pattern.AsSpan(), "first".AsSpan(), "second".AsSpan(), "third".AsSpan(), "fourth".AsSpan(), "fifth".AsSpan(), "sixth".AsSpan(), "seventh".AsSpan());
            assertEquals("TestFormatCompiledPattern_SevenArguments_ReadOnlySpan", expected, actual);
        }

        [Test]
        public void TestFormatCompiledPattern_EightArguments_ReadOnlySpan()
        {
            string expected = "The result is: first, second, third, fourth, fifth, sixth, seventh, eighth";
            string pattern = SimpleFormatterImpl.CompileToStringMinMaxArguments("The result is: {0}, {1}, {2}, {3}, {4}, {5}, {6}, {7}".AsSpan(), 0, int.MaxValue);
            string actual = SimpleFormatterImpl.FormatCompiledPattern(pattern.AsSpan(), "first".AsSpan(), "second".AsSpan(), "third".AsSpan(), "fourth".AsSpan(), "fifth".AsSpan(), "sixth".AsSpan(), "seventh".AsSpan(), "eighth".AsSpan());
            assertEquals("TestFormatCompiledPattern_EightArguments_ReadOnlySpan", expected, actual);
        }

        [Test]
        public void TestFormatCompiledPattern_NineArguments_ReadOnlySpan()
        {
            string expected = "The result is: first, second, third, fourth, fifth, sixth, seventh, eighth, ninth";
            string pattern = SimpleFormatterImpl.CompileToStringMinMaxArguments("The result is: {0}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {8}".AsSpan(), 0, int.MaxValue);
            string actual = SimpleFormatterImpl.FormatCompiledPattern(pattern.AsSpan(), "first".AsSpan(), "second".AsSpan(), "third".AsSpan(), "fourth".AsSpan(), "fifth".AsSpan(), "sixth".AsSpan(), "seventh".AsSpan(), "eighth".AsSpan(), "ninth".AsSpan());
            assertEquals("TestFormatCompiledPattern_NineArguments_ReadOnlySpan", expected, actual);
        }

        [Test]
        public void TestFormatCompiledPattern_TenArguments_ReadOnlySpan()
        {
            string expected = "The result is: first, second, third, fourth, fifth, sixth, seventh, eighth, ninth, tenth";
            string pattern = SimpleFormatterImpl.CompileToStringMinMaxArguments("The result is: {0}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {8}, {9}".AsSpan(), 0, int.MaxValue);
            string actual = SimpleFormatterImpl.FormatCompiledPattern(pattern.AsSpan(), "first".AsSpan(), "second".AsSpan(), "third".AsSpan(), "fourth".AsSpan(), "fifth".AsSpan(), "sixth".AsSpan(), "seventh".AsSpan(), "eighth".AsSpan(), "ninth".AsSpan(), "tenth".AsSpan());
            assertEquals("TestFormatCompiledPattern_TenArguments_ReadOnlySpan", expected, actual);
        }

        [Test]
        public void TestFormatCompiledPattern_ElevenArguments_ReadOnlySpan()
        {
            string expected = "The result is: first, second, third, fourth, fifth, sixth, seventh, eighth, ninth, tenth, eleventh";
            string pattern = SimpleFormatterImpl.CompileToStringMinMaxArguments("The result is: {0}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {8}, {9}, {10}".AsSpan(), 0, int.MaxValue);
            string actual = SimpleFormatterImpl.FormatCompiledPattern(pattern.AsSpan(), "first".AsSpan(), "second".AsSpan(), "third".AsSpan(), "fourth".AsSpan(), "fifth".AsSpan(), "sixth".AsSpan(), "seventh".AsSpan(), "eighth".AsSpan(), "ninth".AsSpan(), "tenth".AsSpan(), "eleventh".AsSpan());
            assertEquals("TestFormatCompiledPattern_ElevenArguments_ReadOnlySpan", expected, actual);
        }

        [Test]
        public void TestFormatCompiledPattern_TwelveArguments_ReadOnlySpan()
        {
            string expected = "The result is: first, second, third, fourth, fifth, sixth, seventh, eighth, ninth, tenth, eleventh, twelveth";
            string pattern = SimpleFormatterImpl.CompileToStringMinMaxArguments("The result is: {0}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {8}, {9}, {10}, {11}".AsSpan(), 0, int.MaxValue);
            string actual = SimpleFormatterImpl.FormatCompiledPattern(pattern.AsSpan(), "first".AsSpan(), "second".AsSpan(), "third".AsSpan(), "fourth".AsSpan(), "fifth".AsSpan(), "sixth".AsSpan(), "seventh".AsSpan(), "eighth".AsSpan(), "ninth".AsSpan(), "tenth".AsSpan(), "eleventh".AsSpan(), "twelveth".AsSpan());
            assertEquals("TestFormatCompiledPattern_TwelveArguments_ReadOnlySpan", expected, actual);
        }

        [Test]
        public void TestFormatCompiledPattern_ThirteenArguments_ReadOnlySpan()
        {
            string expected = "The result is: first, second, third, fourth, fifth, sixth, seventh, eighth, ninth, tenth, eleventh, twelveth, thirteenth";
            string pattern = SimpleFormatterImpl.CompileToStringMinMaxArguments("The result is: {0}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {8}, {9}, {10}, {11}, {12}".AsSpan(), 0, int.MaxValue);
            string actual = SimpleFormatterImpl.FormatCompiledPattern(pattern.AsSpan(), "first".AsSpan(), "second".AsSpan(), "third".AsSpan(), "fourth".AsSpan(), "fifth".AsSpan(), "sixth".AsSpan(), "seventh".AsSpan(), "eighth".AsSpan(), "ninth".AsSpan(), "tenth".AsSpan(), "eleventh".AsSpan(), "twelveth".AsSpan(), "thirteenth".AsSpan());
            assertEquals("TestFormatCompiledPattern_ThirteenArguments_ReadOnlySpan", expected, actual);
        }

        [Test]
        public void TestFormatCompiledPattern_FourteenArguments_ReadOnlySpan()
        {
            string expected = "The result is: first, second, third, fourth, fifth, sixth, seventh, eighth, ninth, tenth, eleventh, twelveth, thirteenth, fourteenth";
            string pattern = SimpleFormatterImpl.CompileToStringMinMaxArguments("The result is: {0}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {8}, {9}, {10}, {11}, {12}, {13}".AsSpan(), 0, int.MaxValue);
            string actual = SimpleFormatterImpl.FormatCompiledPattern(pattern.AsSpan(), "first".AsSpan(), "second".AsSpan(), "third".AsSpan(), "fourth".AsSpan(), "fifth".AsSpan(), "sixth".AsSpan(), "seventh".AsSpan(), "eighth".AsSpan(), "ninth".AsSpan(), "tenth".AsSpan(), "eleventh".AsSpan(), "twelveth".AsSpan(), "thirteenth".AsSpan(), "fourteenth".AsSpan());
            assertEquals("TestFormatCompiledPattern_FourteenArguments_ReadOnlySpan", expected, actual);
        }

        [Test]
        public void TestFormatCompiledPattern_FifteenArguments_ReadOnlySpan()
        {
            string expected = "The result is: first, second, third, fourth, fifth, sixth, seventh, eighth, ninth, tenth, eleventh, twelveth, thirteenth, fourteenth, fifteenth";
            string pattern = SimpleFormatterImpl.CompileToStringMinMaxArguments("The result is: {0}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {8}, {9}, {10}, {11}, {12}, {13}, {14}".AsSpan(), 0, int.MaxValue);
            string actual = SimpleFormatterImpl.FormatCompiledPattern(pattern.AsSpan(), "first".AsSpan(), "second".AsSpan(), "third".AsSpan(), "fourth".AsSpan(), "fifth".AsSpan(), "sixth".AsSpan(), "seventh".AsSpan(), "eighth".AsSpan(), "ninth".AsSpan(), "tenth".AsSpan(), "eleventh".AsSpan(), "twelveth".AsSpan(), "thirteenth".AsSpan(), "fourteenth".AsSpan(), "fifteenth".AsSpan());
            assertEquals("TestFormatCompiledPattern_FifteenArguments_ReadOnlySpan", expected, actual);
        }

        [Test]
        public void TestFormatCompiledPattern_SixteenArguments_ReadOnlySpan()
        {
            string expected = "The result is: first, second, third, fourth, fifth, sixth, seventh, eighth, ninth, tenth, eleventh, twelveth, thirteenth, fourteenth, fifteenth, sixteenth";
            string pattern = SimpleFormatterImpl.CompileToStringMinMaxArguments("The result is: {0}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {8}, {9}, {10}, {11}, {12}, {13}, {14}, {15}".AsSpan(), 0, int.MaxValue);
            string actual = SimpleFormatterImpl.FormatCompiledPattern(pattern.AsSpan(), "first".AsSpan(), "second".AsSpan(), "third".AsSpan(), "fourth".AsSpan(), "fifth".AsSpan(), "sixth".AsSpan(), "seventh".AsSpan(), "eighth".AsSpan(), "ninth".AsSpan(), "tenth".AsSpan(), "eleventh".AsSpan(), "twelveth".AsSpan(), "thirteenth".AsSpan(), "fourteenth".AsSpan(), "fifteenth".AsSpan(), "sixteenth".AsSpan());
            assertEquals("TestFormatCompiledPattern_SixteenArguments_ReadOnlySpan", expected, actual);
        }

        #endregion FormatCompiledPattern

        #region TryFormatCompiledPattern

        [Test]
        public void TestTryFormatCompiledPattern_OneArguments_ReadOnlySpan()
        {
            string expected = "The result is: first";
            Span<char> compiledPattern = stackalloc char[128];
            assertTrue("Compile pattern result was false", SimpleFormatterImpl.TryCompileToStringMinMaxArguments("The result is: {0}".AsSpan(), compiledPattern, out int patternLength, 0, int.MaxValue));
            Span<char> actual = stackalloc char[expected.Length];
            assertTrue("Result was false", SimpleFormatterImpl.TryFormatCompiledPattern(compiledPattern.Slice(0, patternLength), actual, out int charsLength, "first".AsSpan()));
            assertEquals("TestTryFormatCompiledPattern_OneArguments_ReadOnlySpan", expected, actual.Slice(0, charsLength).ToString());
        }

        [Test]
        public void TestTryFormatCompiledPattern_TwoArguments_ReadOnlySpan()
        {
            string expected = "The result is: first, second";
            Span<char> compiledPattern = stackalloc char[128];
            assertTrue("Compile pattern result was false", SimpleFormatterImpl.TryCompileToStringMinMaxArguments("The result is: {0}, {1}".AsSpan(), compiledPattern, out int patternLength, 0, int.MaxValue));
            Span<char> actual = stackalloc char[expected.Length];
            assertTrue("Result was false", SimpleFormatterImpl.TryFormatCompiledPattern(compiledPattern.Slice(0, patternLength), actual, out int charsLength, "first".AsSpan(), "second".AsSpan()));
            assertEquals("TestTryFormatCompiledPattern_TwoArguments_ReadOnlySpan", expected, actual.Slice(0, charsLength).ToString());
        }

        [Test]
        public void TestTryFormatCompiledPattern_ThreeArguments_ReadOnlySpan()
        {
            string expected = "The result is: first, second, third";
            Span<char> compiledPattern = stackalloc char[128];
            assertTrue("Compile pattern result was false", SimpleFormatterImpl.TryCompileToStringMinMaxArguments("The result is: {0}, {1}, {2}".AsSpan(), compiledPattern, out int patternLength, 0, int.MaxValue));
            Span<char> actual = stackalloc char[expected.Length];
            assertTrue("Result was false", SimpleFormatterImpl.TryFormatCompiledPattern(compiledPattern.Slice(0, patternLength), actual, out int charsLength, "first".AsSpan(), "second".AsSpan(), "third".AsSpan()));
            assertEquals("TestTryFormatCompiledPattern_ThreeArguments_ReadOnlySpan", expected, actual.Slice(0, charsLength).ToString());
        }

        [Test]
        public void TestTryFormatCompiledPattern_FourArguments_ReadOnlySpan()
        {
            string expected = "The result is: first, second, third, fourth";
            Span<char> compiledPattern = stackalloc char[128];
            assertTrue("Compile pattern result was false", SimpleFormatterImpl.TryCompileToStringMinMaxArguments("The result is: {0}, {1}, {2}, {3}".AsSpan(), compiledPattern, out int patternLength, 0, int.MaxValue));
            Span<char> actual = stackalloc char[expected.Length];
            assertTrue("Result was false", SimpleFormatterImpl.TryFormatCompiledPattern(compiledPattern.Slice(0, patternLength), actual, out int charsLength, "first".AsSpan(), "second".AsSpan(), "third".AsSpan(), "fourth".AsSpan()));
            assertEquals("TestTryFormatCompiledPattern_FourArguments_ReadOnlySpan", expected, actual.Slice(0, charsLength).ToString());
        }

        [Test]
        public void TestTryFormatCompiledPattern_FiveArguments_ReadOnlySpan()
        {
            string expected = "The result is: first, second, third, fourth, fifth";
            Span<char> compiledPattern = stackalloc char[128];
            assertTrue("Compile pattern result was false", SimpleFormatterImpl.TryCompileToStringMinMaxArguments("The result is: {0}, {1}, {2}, {3}, {4}".AsSpan(), compiledPattern, out int patternLength, 0, int.MaxValue));
            Span<char> actual = stackalloc char[expected.Length];
            assertTrue("Result was false", SimpleFormatterImpl.TryFormatCompiledPattern(compiledPattern.Slice(0, patternLength), actual, out int charsLength, "first".AsSpan(), "second".AsSpan(), "third".AsSpan(), "fourth".AsSpan(), "fifth".AsSpan()));
            assertEquals("TestTryFormatCompiledPattern_FiveArguments_ReadOnlySpan", expected, actual.Slice(0, charsLength).ToString());
        }

        [Test]
        public void TestTryFormatCompiledPattern_SixArguments_ReadOnlySpan()
        {
            string expected = "The result is: first, second, third, fourth, fifth, sixth";
            Span<char> compiledPattern = stackalloc char[128];
            assertTrue("Compile pattern result was false", SimpleFormatterImpl.TryCompileToStringMinMaxArguments("The result is: {0}, {1}, {2}, {3}, {4}, {5}".AsSpan(), compiledPattern, out int patternLength, 0, int.MaxValue));
            Span<char> actual = stackalloc char[expected.Length];
            assertTrue("Result was false", SimpleFormatterImpl.TryFormatCompiledPattern(compiledPattern.Slice(0, patternLength), actual, out int charsLength, "first".AsSpan(), "second".AsSpan(), "third".AsSpan(), "fourth".AsSpan(), "fifth".AsSpan(), "sixth".AsSpan()));
            assertEquals("TestTryFormatCompiledPattern_SixArguments_ReadOnlySpan", expected, actual.Slice(0, charsLength).ToString());
        }

        [Test]
        public void TestTryFormatCompiledPattern_SevenArguments_ReadOnlySpan()
        {
            string expected = "The result is: first, second, third, fourth, fifth, sixth, seventh";
            Span<char> compiledPattern = stackalloc char[128];
            assertTrue("Compile pattern result was false", SimpleFormatterImpl.TryCompileToStringMinMaxArguments("The result is: {0}, {1}, {2}, {3}, {4}, {5}, {6}".AsSpan(), compiledPattern, out int patternLength, 0, int.MaxValue));
            Span<char> actual = stackalloc char[expected.Length];
            assertTrue("Result was false", SimpleFormatterImpl.TryFormatCompiledPattern(compiledPattern.Slice(0, patternLength), actual, out int charsLength, "first".AsSpan(), "second".AsSpan(), "third".AsSpan(), "fourth".AsSpan(), "fifth".AsSpan(), "sixth".AsSpan(), "seventh".AsSpan()));
            assertEquals("TestTryFormatCompiledPattern_SevenArguments_ReadOnlySpan", expected, actual.Slice(0, charsLength).ToString());
        }

        [Test]
        public void TestTryFormatCompiledPattern_EightArguments_ReadOnlySpan()
        {
            string expected = "The result is: first, second, third, fourth, fifth, sixth, seventh, eighth";
            Span<char> compiledPattern = stackalloc char[128];
            assertTrue("Compile pattern result was false", SimpleFormatterImpl.TryCompileToStringMinMaxArguments("The result is: {0}, {1}, {2}, {3}, {4}, {5}, {6}, {7}".AsSpan(), compiledPattern, out int patternLength, 0, int.MaxValue));
            Span<char> actual = stackalloc char[expected.Length];
            assertTrue("Result was false", SimpleFormatterImpl.TryFormatCompiledPattern(compiledPattern.Slice(0, patternLength), actual, out int charsLength, "first".AsSpan(), "second".AsSpan(), "third".AsSpan(), "fourth".AsSpan(), "fifth".AsSpan(), "sixth".AsSpan(), "seventh".AsSpan(), "eighth".AsSpan()));
            assertEquals("TestTryFormatCompiledPattern_EightArguments_ReadOnlySpan", expected, actual.Slice(0, charsLength).ToString());
        }

        [Test]
        public void TestTryFormatCompiledPattern_NineArguments_ReadOnlySpan()
        {
            string expected = "The result is: first, second, third, fourth, fifth, sixth, seventh, eighth, ninth";
            Span<char> compiledPattern = stackalloc char[128];
            assertTrue("Compile pattern result was false", SimpleFormatterImpl.TryCompileToStringMinMaxArguments("The result is: {0}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {8}".AsSpan(), compiledPattern, out int patternLength, 0, int.MaxValue));
            Span<char> actual = stackalloc char[expected.Length];
            assertTrue("Result was false", SimpleFormatterImpl.TryFormatCompiledPattern(compiledPattern.Slice(0, patternLength), actual, out int charsLength, "first".AsSpan(), "second".AsSpan(), "third".AsSpan(), "fourth".AsSpan(), "fifth".AsSpan(), "sixth".AsSpan(), "seventh".AsSpan(), "eighth".AsSpan(), "ninth".AsSpan()));
            assertEquals("TestTryFormatCompiledPattern_NineArguments_ReadOnlySpan", expected, actual.Slice(0, charsLength).ToString());
        }

        [Test]
        public void TestTryFormatCompiledPattern_TenArguments_ReadOnlySpan()
        {
            string expected = "The result is: first, second, third, fourth, fifth, sixth, seventh, eighth, ninth, tenth";
            Span<char> compiledPattern = stackalloc char[128];
            assertTrue("Compile pattern result was false", SimpleFormatterImpl.TryCompileToStringMinMaxArguments("The result is: {0}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {8}, {9}".AsSpan(), compiledPattern, out int patternLength, 0, int.MaxValue));
            Span<char> actual = stackalloc char[expected.Length];
            assertTrue("Result was false", SimpleFormatterImpl.TryFormatCompiledPattern(compiledPattern.Slice(0, patternLength), actual, out int charsLength, "first".AsSpan(), "second".AsSpan(), "third".AsSpan(), "fourth".AsSpan(), "fifth".AsSpan(), "sixth".AsSpan(), "seventh".AsSpan(), "eighth".AsSpan(), "ninth".AsSpan(), "tenth".AsSpan()));
            assertEquals("TestTryFormatCompiledPattern_TenArguments_ReadOnlySpan", expected, actual.Slice(0, charsLength).ToString());
        }

        [Test]
        public void TestTryFormatCompiledPattern_ElevenArguments_ReadOnlySpan()
        {
            string expected = "The result is: first, second, third, fourth, fifth, sixth, seventh, eighth, ninth, tenth, eleventh";
            Span<char> compiledPattern = stackalloc char[128];
            assertTrue("Compile pattern result was false", SimpleFormatterImpl.TryCompileToStringMinMaxArguments("The result is: {0}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {8}, {9}, {10}".AsSpan(), compiledPattern, out int patternLength, 0, int.MaxValue));
            Span<char> actual = stackalloc char[expected.Length];
            assertTrue("Result was false", SimpleFormatterImpl.TryFormatCompiledPattern(compiledPattern.Slice(0, patternLength), actual, out int charsLength, "first".AsSpan(), "second".AsSpan(), "third".AsSpan(), "fourth".AsSpan(), "fifth".AsSpan(), "sixth".AsSpan(), "seventh".AsSpan(), "eighth".AsSpan(), "ninth".AsSpan(), "tenth".AsSpan(), "eleventh".AsSpan()));
            assertEquals("TestTryFormatCompiledPattern_ElevenArguments_ReadOnlySpan", expected, actual.Slice(0, charsLength).ToString());
        }

        [Test]
        public void TestTryFormatCompiledPattern_TwelveArguments_ReadOnlySpan()
        {
            string expected = "The result is: first, second, third, fourth, fifth, sixth, seventh, eighth, ninth, tenth, eleventh, twelveth";
            Span<char> compiledPattern = stackalloc char[128];
            assertTrue("Compile pattern result was false", SimpleFormatterImpl.TryCompileToStringMinMaxArguments("The result is: {0}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {8}, {9}, {10}, {11}".AsSpan(), compiledPattern, out int patternLength, 0, int.MaxValue));
            Span<char> actual = stackalloc char[expected.Length];
            assertTrue("Result was false", SimpleFormatterImpl.TryFormatCompiledPattern(compiledPattern.Slice(0, patternLength), actual, out int charsLength, "first".AsSpan(), "second".AsSpan(), "third".AsSpan(), "fourth".AsSpan(), "fifth".AsSpan(), "sixth".AsSpan(), "seventh".AsSpan(), "eighth".AsSpan(), "ninth".AsSpan(), "tenth".AsSpan(), "eleventh".AsSpan(), "twelveth".AsSpan()));
            assertEquals("TestTryFormatCompiledPattern_TwelveArguments_ReadOnlySpan", expected, actual.Slice(0, charsLength).ToString());
        }

        [Test]
        public void TestTryFormatCompiledPattern_ThirteenArguments_ReadOnlySpan()
        {
            string expected = "The result is: first, second, third, fourth, fifth, sixth, seventh, eighth, ninth, tenth, eleventh, twelveth, thirteenth";
            Span<char> compiledPattern = stackalloc char[128];
            assertTrue("Compile pattern result was false", SimpleFormatterImpl.TryCompileToStringMinMaxArguments("The result is: {0}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {8}, {9}, {10}, {11}, {12}".AsSpan(), compiledPattern, out int patternLength, 0, int.MaxValue));
            Span<char> actual = stackalloc char[expected.Length];
            assertTrue("Result was false", SimpleFormatterImpl.TryFormatCompiledPattern(compiledPattern.Slice(0, patternLength), actual, out int charsLength, "first".AsSpan(), "second".AsSpan(), "third".AsSpan(), "fourth".AsSpan(), "fifth".AsSpan(), "sixth".AsSpan(), "seventh".AsSpan(), "eighth".AsSpan(), "ninth".AsSpan(), "tenth".AsSpan(), "eleventh".AsSpan(), "twelveth".AsSpan(), "thirteenth".AsSpan()));
            assertEquals("TestTryFormatCompiledPattern_ThirteenArguments_ReadOnlySpan", expected, actual.Slice(0, charsLength).ToString());
        }

        [Test]
        public void TestTryFormatCompiledPattern_FourteenArguments_ReadOnlySpan()
        {
            string expected = "The result is: first, second, third, fourth, fifth, sixth, seventh, eighth, ninth, tenth, eleventh, twelveth, thirteenth, fourteenth";
            Span<char> compiledPattern = stackalloc char[128];
            assertTrue("Compile pattern result was false", SimpleFormatterImpl.TryCompileToStringMinMaxArguments("The result is: {0}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {8}, {9}, {10}, {11}, {12}, {13}".AsSpan(), compiledPattern, out int patternLength, 0, int.MaxValue));
            Span<char> actual = stackalloc char[expected.Length];
            assertTrue("Result was false", SimpleFormatterImpl.TryFormatCompiledPattern(compiledPattern.Slice(0, patternLength), actual, out int charsLength, "first".AsSpan(), "second".AsSpan(), "third".AsSpan(), "fourth".AsSpan(), "fifth".AsSpan(), "sixth".AsSpan(), "seventh".AsSpan(), "eighth".AsSpan(), "ninth".AsSpan(), "tenth".AsSpan(), "eleventh".AsSpan(), "twelveth".AsSpan(), "thirteenth".AsSpan(), "fourteenth".AsSpan()));
            assertEquals("TestTryFormatCompiledPattern_FourteenArguments_ReadOnlySpan", expected, actual.Slice(0, charsLength).ToString());
        }

        [Test]
        public void TestTryFormatCompiledPattern_FifteenArguments_ReadOnlySpan()
        {
            string expected = "The result is: first, second, third, fourth, fifth, sixth, seventh, eighth, ninth, tenth, eleventh, twelveth, thirteenth, fourteenth, fifteenth";
            Span<char> compiledPattern = stackalloc char[128];
            assertTrue("Compile pattern result was false", SimpleFormatterImpl.TryCompileToStringMinMaxArguments("The result is: {0}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {8}, {9}, {10}, {11}, {12}, {13}, {14}".AsSpan(), compiledPattern, out int patternLength, 0, int.MaxValue));
            Span<char> actual = stackalloc char[expected.Length];
            assertTrue("Result was false", SimpleFormatterImpl.TryFormatCompiledPattern(compiledPattern.Slice(0, patternLength), actual, out int charsLength, "first".AsSpan(), "second".AsSpan(), "third".AsSpan(), "fourth".AsSpan(), "fifth".AsSpan(), "sixth".AsSpan(), "seventh".AsSpan(), "eighth".AsSpan(), "ninth".AsSpan(), "tenth".AsSpan(), "eleventh".AsSpan(), "twelveth".AsSpan(), "thirteenth".AsSpan(), "fourteenth".AsSpan(), "fifteenth".AsSpan()));
            assertEquals("TestTryFormatCompiledPattern_FifteenArguments_ReadOnlySpan", expected, actual.Slice(0, charsLength).ToString());
        }

        [Test]
        public void TestTryFormatCompiledPattern_SixteenArguments_ReadOnlySpan()
        {
            string expected = "The result is: first, second, third, fourth, fifth, sixth, seventh, eighth, ninth, tenth, eleventh, twelveth, thirteenth, fourteenth, fifteenth, sixteenth";
            Span<char> compiledPattern = stackalloc char[128];
            assertTrue("Compile pattern result was false", SimpleFormatterImpl.TryCompileToStringMinMaxArguments("The result is: {0}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {8}, {9}, {10}, {11}, {12}, {13}, {14}, {15}".AsSpan(), compiledPattern, out int patternLength, 0, int.MaxValue));
            Span<char> actual = stackalloc char[expected.Length];
            assertTrue("Result was false", SimpleFormatterImpl.TryFormatCompiledPattern(compiledPattern.Slice(0, patternLength), actual, out int charsLength, "first".AsSpan(), "second".AsSpan(), "third".AsSpan(), "fourth".AsSpan(), "fifth".AsSpan(), "sixth".AsSpan(), "seventh".AsSpan(), "eighth".AsSpan(), "ninth".AsSpan(), "tenth".AsSpan(), "eleventh".AsSpan(), "twelveth".AsSpan(), "thirteenth".AsSpan(), "fourteenth".AsSpan(), "fifteenth".AsSpan(), "sixteenth".AsSpan()));
            assertEquals("TestTryFormatCompiledPattern_SixteenArguments_ReadOnlySpan", expected, actual.Slice(0, charsLength).ToString());
        }

        #endregion TryFormatCompiledPattern

        #region FormatAndAppend

        [Test]
        public void TestFormatAndAppend_OneArguments_ReadOnlySpan()
        {
            string expected = "prefix|The result is: first";
            int[] expectedOffsets = { 22 };
            string pattern = SimpleFormatterImpl.CompileToStringMinMaxArguments("The result is: {0}".AsSpan(), 0, int.MaxValue);
            string actual;
            int[] offsets = new int[1];
            ValueStringBuilder sb = new ValueStringBuilder(stackalloc char[64]);
            try
            {
                sb.Append("prefix|");
                SimpleFormatterImpl.FormatAndAppend(pattern.AsSpan(), ref sb, offsets, "first".AsSpan());
                actual = sb.ToString();
            }
            finally
            {
                sb.Dispose();
            }
            assertEquals("TestFormatAndAppend_OneArguments_ReadOnlySpan", expected, actual);
            assertEquals("Offsets", expectedOffsets, offsets);
        }

        [Test]
        public void TestFormatAndAppend_TwoArguments_ReadOnlySpan()
        {
            string expected = "prefix|The result is: first, second";
            int[] expectedOffsets = { 22 };
            string pattern = SimpleFormatterImpl.CompileToStringMinMaxArguments("The result is: {0}, {1}".AsSpan(), 0, int.MaxValue);
            string actual;
            int[] offsets = new int[1];
            ValueStringBuilder sb = new ValueStringBuilder(stackalloc char[64]);
            try
            {
                sb.Append("prefix|");
                SimpleFormatterImpl.FormatAndAppend(pattern.AsSpan(), ref sb, offsets, "first".AsSpan(), "second".AsSpan());
                actual = sb.ToString();
            }
            finally
            {
                sb.Dispose();
            }
            assertEquals("TestFormatAndAppend_TwoArguments_ReadOnlySpan", expected, actual);
            assertEquals("Offsets", expectedOffsets, offsets);
        }

        [Test]
        public void TestFormatAndAppend_ThreeArguments_ReadOnlySpan()
        {
            string expected = "prefix|The result is: first, second, third";
            int[] expectedOffsets = { 22 };
            string pattern = SimpleFormatterImpl.CompileToStringMinMaxArguments("The result is: {0}, {1}, {2}".AsSpan(), 0, int.MaxValue);
            string actual;
            int[] offsets = new int[1];
            ValueStringBuilder sb = new ValueStringBuilder(stackalloc char[64]);
            try
            {
                sb.Append("prefix|");
                SimpleFormatterImpl.FormatAndAppend(pattern.AsSpan(), ref sb, offsets, "first".AsSpan(), "second".AsSpan(), "third".AsSpan());
                actual = sb.ToString();
            }
            finally
            {
                sb.Dispose();
            }
            assertEquals("TestFormatAndAppend_ThreeArguments_ReadOnlySpan", expected, actual);
            assertEquals("Offsets", expectedOffsets, offsets);
        }

        [Test]
        public void TestFormatAndAppend_FourArguments_ReadOnlySpan()
        {
            string expected = "prefix|The result is: first, second, third, fourth";
            int[] expectedOffsets = { 22 };
            string pattern = SimpleFormatterImpl.CompileToStringMinMaxArguments("The result is: {0}, {1}, {2}, {3}".AsSpan(), 0, int.MaxValue);
            string actual;
            int[] offsets = new int[1];
            ValueStringBuilder sb = new ValueStringBuilder(stackalloc char[64]);
            try
            {
                sb.Append("prefix|");
                SimpleFormatterImpl.FormatAndAppend(pattern.AsSpan(), ref sb, offsets, "first".AsSpan(), "second".AsSpan(), "third".AsSpan(), "fourth".AsSpan());
                actual = sb.ToString();
            }
            finally
            {
                sb.Dispose();
            }
            assertEquals("TestFormatAndAppend_FourArguments_ReadOnlySpan", expected, actual);
            assertEquals("Offsets", expectedOffsets, offsets);
        }

        [Test]
        public void TestFormatAndAppend_FiveArguments_ReadOnlySpan()
        {
            string expected = "prefix|The result is: first, second, third, fourth, fifth";
            int[] expectedOffsets = { 22 };
            string pattern = SimpleFormatterImpl.CompileToStringMinMaxArguments("The result is: {0}, {1}, {2}, {3}, {4}".AsSpan(), 0, int.MaxValue);
            string actual;
            int[] offsets = new int[1];
            ValueStringBuilder sb = new ValueStringBuilder(stackalloc char[64]);
            try
            {
                sb.Append("prefix|");
                SimpleFormatterImpl.FormatAndAppend(pattern.AsSpan(), ref sb, offsets, "first".AsSpan(), "second".AsSpan(), "third".AsSpan(), "fourth".AsSpan(), "fifth".AsSpan());
                actual = sb.ToString();
            }
            finally
            {
                sb.Dispose();
            }
            assertEquals("TestFormatAndAppend_FiveArguments_ReadOnlySpan", expected, actual);
            assertEquals("Offsets", expectedOffsets, offsets);
        }

        [Test]
        public void TestFormatAndAppend_SixArguments_ReadOnlySpan()
        {
            string expected = "prefix|The result is: first, second, third, fourth, fifth, sixth";
            int[] expectedOffsets = { 22 };
            string pattern = SimpleFormatterImpl.CompileToStringMinMaxArguments("The result is: {0}, {1}, {2}, {3}, {4}, {5}".AsSpan(), 0, int.MaxValue);
            string actual;
            int[] offsets = new int[1];
            ValueStringBuilder sb = new ValueStringBuilder(stackalloc char[64]);
            try
            {
                sb.Append("prefix|");
                SimpleFormatterImpl.FormatAndAppend(pattern.AsSpan(), ref sb, offsets, "first".AsSpan(), "second".AsSpan(), "third".AsSpan(), "fourth".AsSpan(), "fifth".AsSpan(), "sixth".AsSpan());
                actual = sb.ToString();
            }
            finally
            {
                sb.Dispose();
            }
            assertEquals("TestFormatAndAppend_SixArguments_ReadOnlySpan", expected, actual);
            assertEquals("Offsets", expectedOffsets, offsets);
        }

        [Test]
        public void TestFormatAndAppend_SevenArguments_ReadOnlySpan()
        {
            string expected = "prefix|The result is: first, second, third, fourth, fifth, sixth, seventh";
            int[] expectedOffsets = { 22 };
            string pattern = SimpleFormatterImpl.CompileToStringMinMaxArguments("The result is: {0}, {1}, {2}, {3}, {4}, {5}, {6}".AsSpan(), 0, int.MaxValue);
            string actual;
            int[] offsets = new int[1];
            ValueStringBuilder sb = new ValueStringBuilder(stackalloc char[64]);
            try
            {
                sb.Append("prefix|");
                SimpleFormatterImpl.FormatAndAppend(pattern.AsSpan(), ref sb, offsets, "first".AsSpan(), "second".AsSpan(), "third".AsSpan(), "fourth".AsSpan(), "fifth".AsSpan(), "sixth".AsSpan(), "seventh".AsSpan());
                actual = sb.ToString();
            }
            finally
            {
                sb.Dispose();
            }
            assertEquals("TestFormatAndAppend_SevenArguments_ReadOnlySpan", expected, actual);
            assertEquals("Offsets", expectedOffsets, offsets);
        }

        [Test]
        public void TestFormatAndAppend_EightArguments_ReadOnlySpan()
        {
            string expected = "prefix|The result is: first, second, third, fourth, fifth, sixth, seventh, eighth";
            int[] expectedOffsets = { 22 };
            string pattern = SimpleFormatterImpl.CompileToStringMinMaxArguments("The result is: {0}, {1}, {2}, {3}, {4}, {5}, {6}, {7}".AsSpan(), 0, int.MaxValue);
            string actual;
            int[] offsets = new int[1];
            ValueStringBuilder sb = new ValueStringBuilder(stackalloc char[64]);
            try
            {
                sb.Append("prefix|");
                SimpleFormatterImpl.FormatAndAppend(pattern.AsSpan(), ref sb, offsets, "first".AsSpan(), "second".AsSpan(), "third".AsSpan(), "fourth".AsSpan(), "fifth".AsSpan(), "sixth".AsSpan(), "seventh".AsSpan(), "eighth".AsSpan());
                actual = sb.ToString();
            }
            finally
            {
                sb.Dispose();
            }
            assertEquals("TestFormatAndAppend_EightArguments_ReadOnlySpan", expected, actual);
            assertEquals("Offsets", expectedOffsets, offsets);
        }

        [Test]
        public void TestFormatAndAppend_NineArguments_ReadOnlySpan()
        {
            string expected = "prefix|The result is: first, second, third, fourth, fifth, sixth, seventh, eighth, ninth";
            int[] expectedOffsets = { 22 };
            string pattern = SimpleFormatterImpl.CompileToStringMinMaxArguments("The result is: {0}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {8}".AsSpan(), 0, int.MaxValue);
            string actual;
            int[] offsets = new int[1];
            ValueStringBuilder sb = new ValueStringBuilder(stackalloc char[64]);
            try
            {
                sb.Append("prefix|");
                SimpleFormatterImpl.FormatAndAppend(pattern.AsSpan(), ref sb, offsets, "first".AsSpan(), "second".AsSpan(), "third".AsSpan(), "fourth".AsSpan(), "fifth".AsSpan(), "sixth".AsSpan(), "seventh".AsSpan(), "eighth".AsSpan(), "ninth".AsSpan());
                actual = sb.ToString();
            }
            finally
            {
                sb.Dispose();
            }
            assertEquals("TestFormatAndAppend_NineArguments_ReadOnlySpan", expected, actual);
            assertEquals("Offsets", expectedOffsets, offsets);
        }

        [Test]
        public void TestFormatAndAppend_TenArguments_ReadOnlySpan()
        {
            string expected = "prefix|The result is: first, second, third, fourth, fifth, sixth, seventh, eighth, ninth, tenth";
            int[] expectedOffsets = { 22 };
            string pattern = SimpleFormatterImpl.CompileToStringMinMaxArguments("The result is: {0}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {8}, {9}".AsSpan(), 0, int.MaxValue);
            string actual;
            int[] offsets = new int[1];
            ValueStringBuilder sb = new ValueStringBuilder(stackalloc char[64]);
            try
            {
                sb.Append("prefix|");
                SimpleFormatterImpl.FormatAndAppend(pattern.AsSpan(), ref sb, offsets, "first".AsSpan(), "second".AsSpan(), "third".AsSpan(), "fourth".AsSpan(), "fifth".AsSpan(), "sixth".AsSpan(), "seventh".AsSpan(), "eighth".AsSpan(), "ninth".AsSpan(), "tenth".AsSpan());
                actual = sb.ToString();
            }
            finally
            {
                sb.Dispose();
            }
            assertEquals("TestFormatAndAppend_TenArguments_ReadOnlySpan", expected, actual);
            assertEquals("Offsets", expectedOffsets, offsets);
        }

        [Test]
        public void TestFormatAndAppend_ElevenArguments_ReadOnlySpan()
        {
            string expected = "prefix|The result is: first, second, third, fourth, fifth, sixth, seventh, eighth, ninth, tenth, eleventh";
            int[] expectedOffsets = { 22 };
            string pattern = SimpleFormatterImpl.CompileToStringMinMaxArguments("The result is: {0}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {8}, {9}, {10}".AsSpan(), 0, int.MaxValue);
            string actual;
            int[] offsets = new int[1];
            ValueStringBuilder sb = new ValueStringBuilder(stackalloc char[64]);
            try
            {
                sb.Append("prefix|");
                SimpleFormatterImpl.FormatAndAppend(pattern.AsSpan(), ref sb, offsets, "first".AsSpan(), "second".AsSpan(), "third".AsSpan(), "fourth".AsSpan(), "fifth".AsSpan(), "sixth".AsSpan(), "seventh".AsSpan(), "eighth".AsSpan(), "ninth".AsSpan(), "tenth".AsSpan(), "eleventh".AsSpan());
                actual = sb.ToString();
            }
            finally
            {
                sb.Dispose();
            }
            assertEquals("TestFormatAndAppend_ElevenArguments_ReadOnlySpan", expected, actual);
            assertEquals("Offsets", expectedOffsets, offsets);
        }

        [Test]
        public void TestFormatAndAppend_TwelveArguments_ReadOnlySpan()
        {
            string expected = "prefix|The result is: first, second, third, fourth, fifth, sixth, seventh, eighth, ninth, tenth, eleventh, twelveth";
            int[] expectedOffsets = { 22 };
            string pattern = SimpleFormatterImpl.CompileToStringMinMaxArguments("The result is: {0}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {8}, {9}, {10}, {11}".AsSpan(), 0, int.MaxValue);
            string actual;
            int[] offsets = new int[1];
            ValueStringBuilder sb = new ValueStringBuilder(stackalloc char[64]);
            try
            {
                sb.Append("prefix|");
                SimpleFormatterImpl.FormatAndAppend(pattern.AsSpan(), ref sb, offsets, "first".AsSpan(), "second".AsSpan(), "third".AsSpan(), "fourth".AsSpan(), "fifth".AsSpan(), "sixth".AsSpan(), "seventh".AsSpan(), "eighth".AsSpan(), "ninth".AsSpan(), "tenth".AsSpan(), "eleventh".AsSpan(), "twelveth".AsSpan());
                actual = sb.ToString();
            }
            finally
            {
                sb.Dispose();
            }
            assertEquals("TestFormatAndAppend_TwelveArguments_ReadOnlySpan", expected, actual);
            assertEquals("Offsets", expectedOffsets, offsets);
        }

        [Test]
        public void TestFormatAndAppend_ThirteenArguments_ReadOnlySpan()
        {
            string expected = "prefix|The result is: first, second, third, fourth, fifth, sixth, seventh, eighth, ninth, tenth, eleventh, twelveth, thirteenth";
            int[] expectedOffsets = { 22 };
            string pattern = SimpleFormatterImpl.CompileToStringMinMaxArguments("The result is: {0}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {8}, {9}, {10}, {11}, {12}".AsSpan(), 0, int.MaxValue);
            string actual;
            int[] offsets = new int[1];
            ValueStringBuilder sb = new ValueStringBuilder(stackalloc char[64]);
            try
            {
                sb.Append("prefix|");
                SimpleFormatterImpl.FormatAndAppend(pattern.AsSpan(), ref sb, offsets, "first".AsSpan(), "second".AsSpan(), "third".AsSpan(), "fourth".AsSpan(), "fifth".AsSpan(), "sixth".AsSpan(), "seventh".AsSpan(), "eighth".AsSpan(), "ninth".AsSpan(), "tenth".AsSpan(), "eleventh".AsSpan(), "twelveth".AsSpan(), "thirteenth".AsSpan());
                actual = sb.ToString();
            }
            finally
            {
                sb.Dispose();
            }
            assertEquals("TestFormatAndAppend_ThirteenArguments_ReadOnlySpan", expected, actual);
            assertEquals("Offsets", expectedOffsets, offsets);
        }

        [Test]
        public void TestFormatAndAppend_FourteenArguments_ReadOnlySpan()
        {
            string expected = "prefix|The result is: first, second, third, fourth, fifth, sixth, seventh, eighth, ninth, tenth, eleventh, twelveth, thirteenth, fourteenth";
            int[] expectedOffsets = { 22 };
            string pattern = SimpleFormatterImpl.CompileToStringMinMaxArguments("The result is: {0}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {8}, {9}, {10}, {11}, {12}, {13}".AsSpan(), 0, int.MaxValue);
            string actual;
            int[] offsets = new int[1];
            ValueStringBuilder sb = new ValueStringBuilder(stackalloc char[64]);
            try
            {
                sb.Append("prefix|");
                SimpleFormatterImpl.FormatAndAppend(pattern.AsSpan(), ref sb, offsets, "first".AsSpan(), "second".AsSpan(), "third".AsSpan(), "fourth".AsSpan(), "fifth".AsSpan(), "sixth".AsSpan(), "seventh".AsSpan(), "eighth".AsSpan(), "ninth".AsSpan(), "tenth".AsSpan(), "eleventh".AsSpan(), "twelveth".AsSpan(), "thirteenth".AsSpan(), "fourteenth".AsSpan());
                actual = sb.ToString();
            }
            finally
            {
                sb.Dispose();
            }
            assertEquals("TestFormatAndAppend_FourteenArguments_ReadOnlySpan", expected, actual);
            assertEquals("Offsets", expectedOffsets, offsets);
        }

        [Test]
        public void TestFormatAndAppend_FifteenArguments_ReadOnlySpan()
        {
            string expected = "prefix|The result is: first, second, third, fourth, fifth, sixth, seventh, eighth, ninth, tenth, eleventh, twelveth, thirteenth, fourteenth, fifteenth";
            int[] expectedOffsets = { 22 };
            string pattern = SimpleFormatterImpl.CompileToStringMinMaxArguments("The result is: {0}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {8}, {9}, {10}, {11}, {12}, {13}, {14}".AsSpan(), 0, int.MaxValue);
            string actual;
            int[] offsets = new int[1];
            ValueStringBuilder sb = new ValueStringBuilder(stackalloc char[64]);
            try
            {
                sb.Append("prefix|");
                SimpleFormatterImpl.FormatAndAppend(pattern.AsSpan(), ref sb, offsets, "first".AsSpan(), "second".AsSpan(), "third".AsSpan(), "fourth".AsSpan(), "fifth".AsSpan(), "sixth".AsSpan(), "seventh".AsSpan(), "eighth".AsSpan(), "ninth".AsSpan(), "tenth".AsSpan(), "eleventh".AsSpan(), "twelveth".AsSpan(), "thirteenth".AsSpan(), "fourteenth".AsSpan(), "fifteenth".AsSpan());
                actual = sb.ToString();
            }
            finally
            {
                sb.Dispose();
            }
            assertEquals("TestFormatAndAppend_FifteenArguments_ReadOnlySpan", expected, actual);
            assertEquals("Offsets", expectedOffsets, offsets);
        }

        [Test]
        public void TestFormatAndAppend_SixteenArguments_ReadOnlySpan()
        {
            string expected = "prefix|The result is: first, second, third, fourth, fifth, sixth, seventh, eighth, ninth, tenth, eleventh, twelveth, thirteenth, fourteenth, fifteenth, sixteenth";
            int[] expectedOffsets = { 22 };
            string pattern = SimpleFormatterImpl.CompileToStringMinMaxArguments("The result is: {0}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {8}, {9}, {10}, {11}, {12}, {13}, {14}, {15}".AsSpan(), 0, int.MaxValue);
            string actual;
            int[] offsets = new int[1];
            ValueStringBuilder sb = new ValueStringBuilder(stackalloc char[64]);
            try
            {
                sb.Append("prefix|");
                SimpleFormatterImpl.FormatAndAppend(pattern.AsSpan(), ref sb, offsets, "first".AsSpan(), "second".AsSpan(), "third".AsSpan(), "fourth".AsSpan(), "fifth".AsSpan(), "sixth".AsSpan(), "seventh".AsSpan(), "eighth".AsSpan(), "ninth".AsSpan(), "tenth".AsSpan(), "eleventh".AsSpan(), "twelveth".AsSpan(), "thirteenth".AsSpan(), "fourteenth".AsSpan(), "fifteenth".AsSpan(), "sixteenth".AsSpan());
                actual = sb.ToString();
            }
            finally
            {
                sb.Dispose();
            }
            assertEquals("TestFormatAndAppend_SixteenArguments_ReadOnlySpan", expected, actual);
            assertEquals("Offsets", expectedOffsets, offsets);
        }

        #endregion FormatAndAppend

        #region FormatAndReplace

        [Test]
        public void TestFormatAndReplace_OneArguments_ReadOnlySpan()
        {
            string expected = "The result is: first";
            int[] expectedOffsets = { 15 };
            string pattern = SimpleFormatterImpl.CompileToStringMinMaxArguments("The result is: {0}".AsSpan(), 0, int.MaxValue);
            string actual;
            int[] offsets = new int[1];
            ValueStringBuilder sb = new ValueStringBuilder(stackalloc char[64]);
            try
            {
                sb.Append("prefix|");
                SimpleFormatterImpl.FormatAndReplace(pattern.AsSpan(), ref sb, offsets, "first".AsSpan());
                actual = sb.ToString();
            }
            finally
            {
                sb.Dispose();
            }
            assertEquals("TestFormatAndReplace_OneArguments_ReadOnlySpan", expected, actual);
            assertEquals("Offsets", expectedOffsets, offsets);
        }

        [Test]
        public void TestFormatAndReplace_TwoArguments_ReadOnlySpan()
        {
            string expected = "The result is: first, second";
            int[] expectedOffsets = { 15 };
            string pattern = SimpleFormatterImpl.CompileToStringMinMaxArguments("The result is: {0}, {1}".AsSpan(), 0, int.MaxValue);
            string actual;
            int[] offsets = new int[1];
            ValueStringBuilder sb = new ValueStringBuilder(stackalloc char[64]);
            try
            {
                sb.Append("prefix|");
                SimpleFormatterImpl.FormatAndReplace(pattern.AsSpan(), ref sb, offsets, "first".AsSpan(), "second".AsSpan());
                actual = sb.ToString();
            }
            finally
            {
                sb.Dispose();
            }
            assertEquals("TestFormatAndReplace_TwoArguments_ReadOnlySpan", expected, actual);
            assertEquals("Offsets", expectedOffsets, offsets);
        }

        [Test]
        public void TestFormatAndReplace_ThreeArguments_ReadOnlySpan()
        {
            string expected = "The result is: first, second, third";
            int[] expectedOffsets = { 15 };
            string pattern = SimpleFormatterImpl.CompileToStringMinMaxArguments("The result is: {0}, {1}, {2}".AsSpan(), 0, int.MaxValue);
            string actual;
            int[] offsets = new int[1];
            ValueStringBuilder sb = new ValueStringBuilder(stackalloc char[64]);
            try
            {
                sb.Append("prefix|");
                SimpleFormatterImpl.FormatAndReplace(pattern.AsSpan(), ref sb, offsets, "first".AsSpan(), "second".AsSpan(), "third".AsSpan());
                actual = sb.ToString();
            }
            finally
            {
                sb.Dispose();
            }
            assertEquals("TestFormatAndReplace_ThreeArguments_ReadOnlySpan", expected, actual);
            assertEquals("Offsets", expectedOffsets, offsets);
        }

        [Test]
        public void TestFormatAndReplace_FourArguments_ReadOnlySpan()
        {
            string expected = "The result is: first, second, third, fourth";
            int[] expectedOffsets = { 15 };
            string pattern = SimpleFormatterImpl.CompileToStringMinMaxArguments("The result is: {0}, {1}, {2}, {3}".AsSpan(), 0, int.MaxValue);
            string actual;
            int[] offsets = new int[1];
            ValueStringBuilder sb = new ValueStringBuilder(stackalloc char[64]);
            try
            {
                sb.Append("prefix|");
                SimpleFormatterImpl.FormatAndReplace(pattern.AsSpan(), ref sb, offsets, "first".AsSpan(), "second".AsSpan(), "third".AsSpan(), "fourth".AsSpan());
                actual = sb.ToString();
            }
            finally
            {
                sb.Dispose();
            }
            assertEquals("TestFormatAndReplace_FourArguments_ReadOnlySpan", expected, actual);
            assertEquals("Offsets", expectedOffsets, offsets);
        }

        [Test]
        public void TestFormatAndReplace_FiveArguments_ReadOnlySpan()
        {
            string expected = "The result is: first, second, third, fourth, fifth";
            int[] expectedOffsets = { 15 };
            string pattern = SimpleFormatterImpl.CompileToStringMinMaxArguments("The result is: {0}, {1}, {2}, {3}, {4}".AsSpan(), 0, int.MaxValue);
            string actual;
            int[] offsets = new int[1];
            ValueStringBuilder sb = new ValueStringBuilder(stackalloc char[64]);
            try
            {
                sb.Append("prefix|");
                SimpleFormatterImpl.FormatAndReplace(pattern.AsSpan(), ref sb, offsets, "first".AsSpan(), "second".AsSpan(), "third".AsSpan(), "fourth".AsSpan(), "fifth".AsSpan());
                actual = sb.ToString();
            }
            finally
            {
                sb.Dispose();
            }
            assertEquals("TestFormatAndReplace_FiveArguments_ReadOnlySpan", expected, actual);
            assertEquals("Offsets", expectedOffsets, offsets);
        }

        [Test]
        public void TestFormatAndReplace_SixArguments_ReadOnlySpan()
        {
            string expected = "The result is: first, second, third, fourth, fifth, sixth";
            int[] expectedOffsets = { 15 };
            string pattern = SimpleFormatterImpl.CompileToStringMinMaxArguments("The result is: {0}, {1}, {2}, {3}, {4}, {5}".AsSpan(), 0, int.MaxValue);
            string actual;
            int[] offsets = new int[1];
            ValueStringBuilder sb = new ValueStringBuilder(stackalloc char[64]);
            try
            {
                sb.Append("prefix|");
                SimpleFormatterImpl.FormatAndReplace(pattern.AsSpan(), ref sb, offsets, "first".AsSpan(), "second".AsSpan(), "third".AsSpan(), "fourth".AsSpan(), "fifth".AsSpan(), "sixth".AsSpan());
                actual = sb.ToString();
            }
            finally
            {
                sb.Dispose();
            }
            assertEquals("TestFormatAndReplace_SixArguments_ReadOnlySpan", expected, actual);
            assertEquals("Offsets", expectedOffsets, offsets);
        }

        [Test]
        public void TestFormatAndReplace_SevenArguments_ReadOnlySpan()
        {
            string expected = "The result is: first, second, third, fourth, fifth, sixth, seventh";
            int[] expectedOffsets = { 15 };
            string pattern = SimpleFormatterImpl.CompileToStringMinMaxArguments("The result is: {0}, {1}, {2}, {3}, {4}, {5}, {6}".AsSpan(), 0, int.MaxValue);
            string actual;
            int[] offsets = new int[1];
            ValueStringBuilder sb = new ValueStringBuilder(stackalloc char[64]);
            try
            {
                sb.Append("prefix|");
                SimpleFormatterImpl.FormatAndReplace(pattern.AsSpan(), ref sb, offsets, "first".AsSpan(), "second".AsSpan(), "third".AsSpan(), "fourth".AsSpan(), "fifth".AsSpan(), "sixth".AsSpan(), "seventh".AsSpan());
                actual = sb.ToString();
            }
            finally
            {
                sb.Dispose();
            }
            assertEquals("TestFormatAndReplace_SevenArguments_ReadOnlySpan", expected, actual);
            assertEquals("Offsets", expectedOffsets, offsets);
        }

        [Test]
        public void TestFormatAndReplace_EightArguments_ReadOnlySpan()
        {
            string expected = "The result is: first, second, third, fourth, fifth, sixth, seventh, eighth";
            int[] expectedOffsets = { 15 };
            string pattern = SimpleFormatterImpl.CompileToStringMinMaxArguments("The result is: {0}, {1}, {2}, {3}, {4}, {5}, {6}, {7}".AsSpan(), 0, int.MaxValue);
            string actual;
            int[] offsets = new int[1];
            ValueStringBuilder sb = new ValueStringBuilder(stackalloc char[64]);
            try
            {
                sb.Append("prefix|");
                SimpleFormatterImpl.FormatAndReplace(pattern.AsSpan(), ref sb, offsets, "first".AsSpan(), "second".AsSpan(), "third".AsSpan(), "fourth".AsSpan(), "fifth".AsSpan(), "sixth".AsSpan(), "seventh".AsSpan(), "eighth".AsSpan());
                actual = sb.ToString();
            }
            finally
            {
                sb.Dispose();
            }
            assertEquals("TestFormatAndReplace_EightArguments_ReadOnlySpan", expected, actual);
            assertEquals("Offsets", expectedOffsets, offsets);
        }

        [Test]
        public void TestFormatAndReplace_NineArguments_ReadOnlySpan()
        {
            string expected = "The result is: first, second, third, fourth, fifth, sixth, seventh, eighth, ninth";
            int[] expectedOffsets = { 15 };
            string pattern = SimpleFormatterImpl.CompileToStringMinMaxArguments("The result is: {0}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {8}".AsSpan(), 0, int.MaxValue);
            string actual;
            int[] offsets = new int[1];
            ValueStringBuilder sb = new ValueStringBuilder(stackalloc char[64]);
            try
            {
                sb.Append("prefix|");
                SimpleFormatterImpl.FormatAndReplace(pattern.AsSpan(), ref sb, offsets, "first".AsSpan(), "second".AsSpan(), "third".AsSpan(), "fourth".AsSpan(), "fifth".AsSpan(), "sixth".AsSpan(), "seventh".AsSpan(), "eighth".AsSpan(), "ninth".AsSpan());
                actual = sb.ToString();
            }
            finally
            {
                sb.Dispose();
            }
            assertEquals("TestFormatAndReplace_NineArguments_ReadOnlySpan", expected, actual);
            assertEquals("Offsets", expectedOffsets, offsets);
        }

        [Test]
        public void TestFormatAndReplace_TenArguments_ReadOnlySpan()
        {
            string expected = "The result is: first, second, third, fourth, fifth, sixth, seventh, eighth, ninth, tenth";
            int[] expectedOffsets = { 15 };
            string pattern = SimpleFormatterImpl.CompileToStringMinMaxArguments("The result is: {0}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {8}, {9}".AsSpan(), 0, int.MaxValue);
            string actual;
            int[] offsets = new int[1];
            ValueStringBuilder sb = new ValueStringBuilder(stackalloc char[64]);
            try
            {
                sb.Append("prefix|");
                SimpleFormatterImpl.FormatAndReplace(pattern.AsSpan(), ref sb, offsets, "first".AsSpan(), "second".AsSpan(), "third".AsSpan(), "fourth".AsSpan(), "fifth".AsSpan(), "sixth".AsSpan(), "seventh".AsSpan(), "eighth".AsSpan(), "ninth".AsSpan(), "tenth".AsSpan());
                actual = sb.ToString();
            }
            finally
            {
                sb.Dispose();
            }
            assertEquals("TestFormatAndReplace_TenArguments_ReadOnlySpan", expected, actual);
            assertEquals("Offsets", expectedOffsets, offsets);
        }

        [Test]
        public void TestFormatAndReplace_ElevenArguments_ReadOnlySpan()
        {
            string expected = "The result is: first, second, third, fourth, fifth, sixth, seventh, eighth, ninth, tenth, eleventh";
            int[] expectedOffsets = { 15 };
            string pattern = SimpleFormatterImpl.CompileToStringMinMaxArguments("The result is: {0}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {8}, {9}, {10}".AsSpan(), 0, int.MaxValue);
            string actual;
            int[] offsets = new int[1];
            ValueStringBuilder sb = new ValueStringBuilder(stackalloc char[64]);
            try
            {
                sb.Append("prefix|");
                SimpleFormatterImpl.FormatAndReplace(pattern.AsSpan(), ref sb, offsets, "first".AsSpan(), "second".AsSpan(), "third".AsSpan(), "fourth".AsSpan(), "fifth".AsSpan(), "sixth".AsSpan(), "seventh".AsSpan(), "eighth".AsSpan(), "ninth".AsSpan(), "tenth".AsSpan(), "eleventh".AsSpan());
                actual = sb.ToString();
            }
            finally
            {
                sb.Dispose();
            }
            assertEquals("TestFormatAndReplace_ElevenArguments_ReadOnlySpan", expected, actual);
            assertEquals("Offsets", expectedOffsets, offsets);
        }

        [Test]
        public void TestFormatAndReplace_TwelveArguments_ReadOnlySpan()
        {
            string expected = "The result is: first, second, third, fourth, fifth, sixth, seventh, eighth, ninth, tenth, eleventh, twelveth";
            int[] expectedOffsets = { 15 };
            string pattern = SimpleFormatterImpl.CompileToStringMinMaxArguments("The result is: {0}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {8}, {9}, {10}, {11}".AsSpan(), 0, int.MaxValue);
            string actual;
            int[] offsets = new int[1];
            ValueStringBuilder sb = new ValueStringBuilder(stackalloc char[64]);
            try
            {
                sb.Append("prefix|");
                SimpleFormatterImpl.FormatAndReplace(pattern.AsSpan(), ref sb, offsets, "first".AsSpan(), "second".AsSpan(), "third".AsSpan(), "fourth".AsSpan(), "fifth".AsSpan(), "sixth".AsSpan(), "seventh".AsSpan(), "eighth".AsSpan(), "ninth".AsSpan(), "tenth".AsSpan(), "eleventh".AsSpan(), "twelveth".AsSpan());
                actual = sb.ToString();
            }
            finally
            {
                sb.Dispose();
            }
            assertEquals("TestFormatAndReplace_TwelveArguments_ReadOnlySpan", expected, actual);
            assertEquals("Offsets", expectedOffsets, offsets);
        }

        [Test]
        public void TestFormatAndReplace_ThirteenArguments_ReadOnlySpan()
        {
            string expected = "The result is: first, second, third, fourth, fifth, sixth, seventh, eighth, ninth, tenth, eleventh, twelveth, thirteenth";
            int[] expectedOffsets = { 15 };
            string pattern = SimpleFormatterImpl.CompileToStringMinMaxArguments("The result is: {0}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {8}, {9}, {10}, {11}, {12}".AsSpan(), 0, int.MaxValue);
            string actual;
            int[] offsets = new int[1];
            ValueStringBuilder sb = new ValueStringBuilder(stackalloc char[64]);
            try
            {
                sb.Append("prefix|");
                SimpleFormatterImpl.FormatAndReplace(pattern.AsSpan(), ref sb, offsets, "first".AsSpan(), "second".AsSpan(), "third".AsSpan(), "fourth".AsSpan(), "fifth".AsSpan(), "sixth".AsSpan(), "seventh".AsSpan(), "eighth".AsSpan(), "ninth".AsSpan(), "tenth".AsSpan(), "eleventh".AsSpan(), "twelveth".AsSpan(), "thirteenth".AsSpan());
                actual = sb.ToString();
            }
            finally
            {
                sb.Dispose();
            }
            assertEquals("TestFormatAndReplace_ThirteenArguments_ReadOnlySpan", expected, actual);
            assertEquals("Offsets", expectedOffsets, offsets);
        }

        [Test]
        public void TestFormatAndReplace_FourteenArguments_ReadOnlySpan()
        {
            string expected = "The result is: first, second, third, fourth, fifth, sixth, seventh, eighth, ninth, tenth, eleventh, twelveth, thirteenth, fourteenth";
            int[] expectedOffsets = { 15 };
            string pattern = SimpleFormatterImpl.CompileToStringMinMaxArguments("The result is: {0}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {8}, {9}, {10}, {11}, {12}, {13}".AsSpan(), 0, int.MaxValue);
            string actual;
            int[] offsets = new int[1];
            ValueStringBuilder sb = new ValueStringBuilder(stackalloc char[64]);
            try
            {
                sb.Append("prefix|");
                SimpleFormatterImpl.FormatAndReplace(pattern.AsSpan(), ref sb, offsets, "first".AsSpan(), "second".AsSpan(), "third".AsSpan(), "fourth".AsSpan(), "fifth".AsSpan(), "sixth".AsSpan(), "seventh".AsSpan(), "eighth".AsSpan(), "ninth".AsSpan(), "tenth".AsSpan(), "eleventh".AsSpan(), "twelveth".AsSpan(), "thirteenth".AsSpan(), "fourteenth".AsSpan());
                actual = sb.ToString();
            }
            finally
            {
                sb.Dispose();
            }
            assertEquals("TestFormatAndReplace_FourteenArguments_ReadOnlySpan", expected, actual);
            assertEquals("Offsets", expectedOffsets, offsets);
        }

        [Test]
        public void TestFormatAndReplace_FifteenArguments_ReadOnlySpan()
        {
            string expected = "The result is: first, second, third, fourth, fifth, sixth, seventh, eighth, ninth, tenth, eleventh, twelveth, thirteenth, fourteenth, fifteenth";
            int[] expectedOffsets = { 15 };
            string pattern = SimpleFormatterImpl.CompileToStringMinMaxArguments("The result is: {0}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {8}, {9}, {10}, {11}, {12}, {13}, {14}".AsSpan(), 0, int.MaxValue);
            string actual;
            int[] offsets = new int[1];
            ValueStringBuilder sb = new ValueStringBuilder(stackalloc char[64]);
            try
            {
                sb.Append("prefix|");
                SimpleFormatterImpl.FormatAndReplace(pattern.AsSpan(), ref sb, offsets, "first".AsSpan(), "second".AsSpan(), "third".AsSpan(), "fourth".AsSpan(), "fifth".AsSpan(), "sixth".AsSpan(), "seventh".AsSpan(), "eighth".AsSpan(), "ninth".AsSpan(), "tenth".AsSpan(), "eleventh".AsSpan(), "twelveth".AsSpan(), "thirteenth".AsSpan(), "fourteenth".AsSpan(), "fifteenth".AsSpan());
                actual = sb.ToString();
            }
            finally
            {
                sb.Dispose();
            }
            assertEquals("TestFormatAndReplace_FifteenArguments_ReadOnlySpan", expected, actual);
            assertEquals("Offsets", expectedOffsets, offsets);
        }

        [Test]
        public void TestFormatAndReplace_SixteenArguments_ReadOnlySpan()
        {
            string expected = "The result is: first, second, third, fourth, fifth, sixth, seventh, eighth, ninth, tenth, eleventh, twelveth, thirteenth, fourteenth, fifteenth, sixteenth";
            int[] expectedOffsets = { 15 };
            string pattern = SimpleFormatterImpl.CompileToStringMinMaxArguments("The result is: {0}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {8}, {9}, {10}, {11}, {12}, {13}, {14}, {15}".AsSpan(), 0, int.MaxValue);
            string actual;
            int[] offsets = new int[1];
            ValueStringBuilder sb = new ValueStringBuilder(stackalloc char[64]);
            try
            {
                sb.Append("prefix|");
                SimpleFormatterImpl.FormatAndReplace(pattern.AsSpan(), ref sb, offsets, "first".AsSpan(), "second".AsSpan(), "third".AsSpan(), "fourth".AsSpan(), "fifth".AsSpan(), "sixth".AsSpan(), "seventh".AsSpan(), "eighth".AsSpan(), "ninth".AsSpan(), "tenth".AsSpan(), "eleventh".AsSpan(), "twelveth".AsSpan(), "thirteenth".AsSpan(), "fourteenth".AsSpan(), "fifteenth".AsSpan(), "sixteenth".AsSpan());
                actual = sb.ToString();
            }
            finally
            {
                sb.Dispose();
            }
            assertEquals("TestFormatAndReplace_SixteenArguments_ReadOnlySpan", expected, actual);
            assertEquals("Offsets", expectedOffsets, offsets);
        }

        #endregion FormatAndReplace
    }
}
